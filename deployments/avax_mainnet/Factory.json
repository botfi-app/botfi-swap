{
  "address": "0xb01E271Ab8A49B7Cf151B3f3dDed4BCb069A8628",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "feeWallet",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetFeeWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "SetProtocolFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "routerId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeBps",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "addRoute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bps",
          "type": "uint256"
        }
      ],
      "name": "calPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "opt",
          "type": "bool"
        }
      ],
      "name": "enableRoute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRoutes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "group",
              "type": "bytes32"
            },
            {
              "internalType": "address payable",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "weth",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            }
          ],
          "internalType": "struct Defs.RouteParams[]",
          "name": "rp",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        },
        {
          "internalType": "bool",
          "name": "revertOnError",
          "type": "bool"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "opt",
          "type": "bool"
        }
      ],
      "name": "pauseSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "routes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "routesIds",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setFeeWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeBps",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "routeId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x45b66d827421a19d642197b2b639ce03276a4fbc167080e790991c1b9a28f08c",
  "receipt": {
    "to": null,
    "from": "0xc3490a43FF5825F34f714fd52697f2Ed2c7D44F8",
    "contractAddress": "0xb01E271Ab8A49B7Cf151B3f3dDed4BCb069A8628",
    "transactionIndex": 1,
    "gasUsed": "2860454",
    "logsBloom": "0x
    "blockHash": "0x1ef051b0c577a6743360daf4c28be290112f3cdb3cdfe3d3b580a2077b2d11f6",
    "transactionHash": "0x45b66d827421a19d642197b2b639ce03276a4fbc167080e790991c1b9a28f08c",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 37737001,
        "transactionHash": "0x45b66d827421a19d642197b2b639ce03276a4fbc167080e790991c1b9a28f08c",
        "address": "0xb01E271Ab8A49B7Cf151B3f3dDed4BCb069A8628",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c3490a43ff5825f34f714fd52697f2ed2c7d44f8"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x1ef051b0c577a6743360daf4c28be290112f3cdb3cdfe3d3b580a2077b2d11f6"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 37737001,
        "transactionHash": "0x45b66d827421a19d642197b2b639ce03276a4fbc167080e790991c1b9a28f08c",
        "address": "0xb01E271Ab8A49B7Cf151B3f3dDed4BCb069A8628",
        "topics": [
          "0xdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b1"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000064",
        "logIndex": 12,
        "blockHash": "0x1ef051b0c577a6743360daf4c28be290112f3cdb3cdfe3d3b580a2077b2d11f6"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 37737001,
        "transactionHash": "0x45b66d827421a19d642197b2b639ce03276a4fbc167080e790991c1b9a28f08c",
        "address": "0xb01E271Ab8A49B7Cf151B3f3dDed4BCb069A8628",
        "topics": [
          "0x3d21e5a2b633291bd1ff5f9c654e402d063783c95759d2ea521b31fb30e4da41"
        ],
        "data": "0x00000000000000000000000092c9e17a2f02b2119350f3e90918bed3c6e24f3c",
        "logIndex": 13,
        "blockHash": "0x1ef051b0c577a6743360daf4c28be290112f3cdb3cdfe3d3b580a2077b2d11f6"
      }
    ],
    "blockNumber": 37737001,
    "cumulativeGasUsed": "3166638",
    "status": 1,
    "byzantium": true
  },
  "args": [
    100,
    "0x92c9E17a2f02b2119350F3E90918bEd3c6e24F3c"
  ],
  "numDeployments": 4,
  "solcInputHash": "230c8a83460ace4eaf89e30696be972b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetFeeWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SetProtocolFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"routerId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"addRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"calPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"opt\",\"type\":\"bool\"}],\"name\":\"enableRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRoutes\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"struct Defs.RouteParams[]\",\"name\":\"rp\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"revertOnError\",\"type\":\"bool\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"opt\",\"type\":\"bool\"}],\"name\":\"pauseSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"routes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"routesIds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeBps\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"routeId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"addRoute(bytes32,bytes32,address,address,address,bool)\":{\"details\":\"addRouter add a router params\",\"params\":{\"enabled\":\"is the router enabled or not\",\"factory\":\"the factory address\",\"group\":\"router group - uni_v2, uni_v3 ....\",\"id\":\"router id\",\"router\":\"the router address \",\"weth\":\"wrapped ether or wrapped native token\"}},\"calPercentage(uint256,uint256)\":{\"details\":\"convert percentage in basis point of a value \",\"params\":{\"amount\":\"the amount to be calculated on\",\"bps\":\"percentage value in basis point\"}},\"enableRoute(bytes32,bool)\":{\"details\":\"enable or disable a route\",\"params\":{\"id\":\"the router id\",\"opt\":\"true or false\"}},\"getAllRoutes()\":{\"details\":\"getAllRoutes get all the routers returns array \"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pauseSwap(bool)\":{\"details\":\"pause the swap operation for the contract\",\"params\":{\"opt\":\"true or false \"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setFeeWallet(address)\":{\"details\":\"set the address for taking the protocol fees\",\"params\":{\"addr\":\"the fee in percentage basis point\"}},\"setProtocolFee(uint256)\":{\"details\":\"protocol fee in basis point\",\"params\":{\"_feeBps\":\"the fee in percentage basis point\"}},\"swap(bytes32,uint256,address,bytes)\":{\"details\":\"perform a swap\",\"params\":{\"amount\":\"the total amount including the protocol fee for the swap\",\"payload\":\"the encoded swap data to foward to the router\",\"routeId\":\"the identifier of the router to use\",\"tokenA\":\"the token to swap into another token (tokenB)\"}},\"sweep(address,uint256)\":{\"details\":\"withdraw any stucked tokens in the contract\",\"params\":{\"amount\":\"the amount to move out\",\"token\":\"the token address to withdraw\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory.sol\":\"Factory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/ContractBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./base/Utils.sol\\\";\\nimport \\\"./base/Defs.sol\\\";\\nimport \\\"./base/Multicall.sol\\\";\\n\\ncontract ContractBase is \\n    Defs, \\n    Context, \\n    Ownable, \\n    Multicall, \\n    ReentrancyGuard \\n{\\n\\n\\n    event SetProtocolFee(uint256);\\n    event SetFeeWallet(address addr);\\n\\n    constructor() Ownable(_msgSender()) {}\\n\\n    /**\\n     * @dev protocol fee in basis point\\n     * @param _feeBps the fee in percentage basis point\\n     */\\n    function __setProtocolFee (uint256 _feeBps)\\n        internal\\n    {\\n        PROTOCOL_FEE = _feeBps;\\n\\n        emit SetProtocolFee(_feeBps);\\n    }\\n\\n    /**\\n     * @dev protocol fee in basis point\\n     * @param _feeBps the fee in percentage basis point\\n     */\\n    function setProtocolFee(uint _feeBps)\\n        public \\n        onlyOwner \\n    {\\n        __setProtocolFee(_feeBps);\\n    }\\n\\n    \\n    function __setFeeWallet(address addr)\\n        internal \\n    {\\n        FEE_WALLET = addr;\\n        emit SetFeeWallet(addr);\\n    }\\n\\n    /**\\n     * @dev set the address for taking the protocol fees\\n     * @param addr the fee in percentage basis point\\n     */\\n    function setFeeWallet(address addr)\\n        public \\n        onlyOwner \\n    {\\n        __setFeeWallet(addr);\\n    }\\n}\\n\",\"keccak256\":\"0x00120ff28de189dfe40c7272807f0055e9b38f88cd2a5de45601873a22c0d128\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ContractBase.sol\\\";\\nimport \\\"./swap/SwapEngine.sol\\\";\\n\\ncontract Factory is ContractBase, SwapEngine {\\n\\n    constructor(\\n        uint    protocolFee,\\n        address feeWallet\\n    ) {     \\n        __setProtocolFee(protocolFee);\\n        __setFeeWallet(feeWallet);\\n    }\\n    \\n}\",\"keccak256\":\"0x394890b11ef8b34761951c491de6616cd029c0856ef14c01af97b0e27087d694\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/Defs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract Defs {\\n\\n    // the protocol fee \\n    uint PROTOCOL_FEE;\\n\\n    // the fee address, for taking fees \\n    address FEE_WALLET;\\n\\n    // native token \\n    address constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n\\n    // id  =>  RouteParams \\n    mapping (bytes32 => RouteParams) public routes;\\n    bytes32[] public routesIds;\\n\\n    struct RouteParams {\\n        bytes32             id;\\n        bytes32             group; //adapter name uni_v2, uni_v3 and 1inch, balancer\\n        address   payable   router;\\n        address             factory;\\n        address             weth;\\n        uint256             createdAt;\\n        bool                enabled; \\n    }\\n\\n    /**\\n     * @dev convert percentage in basis point of a value \\n     * @param amount the amount to be calculated on\\n     * @param bps percentage value in basis point\\n     */\\n    function calPercentage(uint amount, uint bps) \\n        public \\n        pure \\n        returns (uint256)\\n    {\\n        require((amount * bps) >= 10_000);\\n        return (amount * bps) / 10_000;\\n    }\\n\\n}\",\"keccak256\":\"0x163db44458c4ae4e7d8685439563c73cce1cda0c953d696a1adc11e3e8a1164d\",\"license\":\"MIT\"},\"contracts/base/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\ncontract Multicall {\\n\\n    function multicall(bytes[] calldata data, bool revertOnError) \\n        public \\n        payable  \\n        returns \\n        (bytes[] memory results) \\n    {\\n\\n        results = new bytes[](data.length);\\n\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n            if (!success) {\\n               \\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n                if (result.length < 68) revert();\\n\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n\\n                if(revertOnError) {\\n                    revert(abi.decode(result, (string)));\\n                }\\n            }\\n\\n            results[i] = result;\\n        }\\n    }\\n}\",\"keccak256\":\"0x75f8340a1929f3453e3fda3533bf7f2313a54efbc42752e01c11dfa3cddc2c8c\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Defs.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ncontract TransferHelper is Defs {\\n\\n    /**\\n     * @dev safeTransfer eth or token \\n     * @param token, the token contract\\n     * @param from the sender's address \\n     * @param to the recipient's address\\n     * @param value the value to send\\n    */\\n    function transferAsset(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        \\n        if(token == NATIVE_TOKEN){\\n            safeTransferETH(to, value);\\n        } else {\\n            safeTransferFrom(token, from, to, value);\\n        }\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'BotFi#TransferHelper: TOKEN_TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'BotFi#TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\",\"keccak256\":\"0x51b937555ca9f1a7622bf6c8172ee3e669fc613558d15997c9dbae4d46a552a2\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nlibrary Utils {\\n\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n}\",\"keccak256\":\"0xc362e2117b035f0117be46f04422be11297ece6ab03dcfde07db97f5cb2f9728\",\"license\":\"GPL-2.0-or-later\"},\"contracts/swap/SwapEngine.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ContractBase.sol\\\";\\nimport \\\"../base/TransferHelper.sol\\\";\\n//import \\\"hardhat/console.sol\\\";\\n\\n\\ncontract SwapEngine is TransferHelper, ContractBase {\\n\\n    event Swap(\\n        bytes32 routerId, \\n        uint256 amount,\\n        address tokenA,\\n        uint    feeBps,\\n        address account  \\n    );\\n\\n    using Address for address;\\n    using Address for address payable;\\n\\n    bool private isPaused;\\n\\n    receive() external payable{}\\n    fallback() external payable{}\\n\\n    modifier notPaused() {\\n        require(!isPaused, \\\"BotFi#swapNotPaused: SWAP_PAUSED\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev addRouter add a router params\\n     * @param id  router id\\n     * @param group  router group - uni_v2, uni_v3 ....\\n     * @param router  the router address \\n     * @param factory the factory address\\n     * @param weth   wrapped ether or wrapped native token\\n     * @param enabled  is the router enabled or not\\n     */\\n    function addRoute(\\n        bytes32             id,\\n        bytes32             group, // uni_v2, uni_v3, 1inch, ...                  \\n        address  payable    router, \\n        address             factory,\\n        address             weth,\\n        bool                enabled\\n    ) \\n        external \\n        onlyOwner \\n    {\\n\\n        require(router != address(0), \\\"BotFi#SwapEngine#addRouter: ZERO_ROUTER_ADDRESS\\\");\\n\\n        require(Utils.isContract(router), \\\"BotFi#SwapEngine#addRouter: ROUTER_NOT_A_CONTRACT\\\");\\n        require(Utils.isContract(factory), \\\"BotFi#SwapEngine#addRouter: FACTORY_NOT_A_CONTRACT\\\");\\n        require(Utils.isContract(weth), \\\"BotFi#SwapEngine#addRouter: WETH_NOT_A_CONTRACT\\\");\\n\\n        bool isNew = (routes[id].createdAt == 0);\\n        uint createdAt = (isNew) ? block.timestamp : routes[id].createdAt;\\n\\n\\n        routes[id] = RouteParams(\\n            id,\\n            group, \\n            router,\\n            factory,\\n            weth,\\n            createdAt,\\n            enabled\\n        );\\n\\n        if(isNew) routesIds.push(id);\\n    }\\n\\n    /**\\n     * @dev enable or disable a route\\n     * @param id the router id\\n     * @param opt true or false\\n     */\\n    function enableRoute(bytes32 id, bool opt)\\n        external\\n    {\\n        require(routes[id].createdAt > 0, \\\"BotFi:SwapEngine#enableRouter: INVALID_ROUTE\\\");\\n\\n        routes[id].enabled = opt;\\n    }\\n\\n    /**\\n     * @dev getAllRoutes get all the routers\\n     * returns array \\n     */\\n    function getAllRoutes()\\n        external\\n        view \\n        returns (RouteParams[] memory rp)\\n    {\\n       rp = new RouteParams[](routesIds.length); \\n\\n        for(uint i=0; i < routesIds.length; i++){\\n            rp[i] = routes[routesIds[i]];\\n        }\\n    }\\n\\n    /**\\n     * @dev pause the swap operation for the contract\\n     * @param opt true or false \\n     */\\n    function pauseSwap(bool opt) \\n        external\\n        onlyOwner \\n    {\\n        isPaused = opt;\\n    }\\n\\n\\n    modifier validateRouter(bytes32 routeId) {\\n        require(routes[routeId].createdAt > 0, \\\"BotFi#SwapEngine#validateRouter: UNKNOWN_ROUTER_ID\\\");\\n\\n        require(routes[routeId].enabled, \\\"BotFi#SwapEngine#validateRouter: ROUTER_NOT_ENABLED\\\");\\n\\n        _;\\n    }\\n\\n\\n    /**\\n     * @dev perform a swap\\n     * @param routeId the identifier of the router to use\\n     * @param amount the total amount including the protocol fee for the swap\\n     * @param tokenA the token to swap into another token (tokenB)\\n     * @param payload the encoded swap data to foward to the router\\n     */ \\n    function swap(\\n        bytes32 routeId,\\n        uint256 amount, \\n        address tokenA, \\n        bytes calldata payload\\n    ) \\n        external \\n        payable\\n        validateRouter(routeId)\\n        nonReentrant()\\n        notPaused()\\n    {   \\n\\n        require(routes[routeId].createdAt > 0, \\\"BotFi#Swap: UNSUPPORTED_DEX\\\");\\n        require(payload.length > 0, \\\"BotFi#Swap: DATA_ARG_REQUIRED\\\");\\n        require(tokenA != address(0), \\\"BotFi#Swap: ZERO_TOKENA_ADDR\\\");\\n\\n        if(tokenA == NATIVE_TOKEN) {\\n            //validate native token input\\n            require(msg.value == amount, \\\"BotFi#Swap: INSUFFICIENT_BALANCE\\\");\\n        } else {\\n            \\n            // lets transfer the tokens from the user\\n            transferAsset(tokenA, _msgSender(), address(this), amount);\\n        }\\n\\n        //get fee amt\\n        uint feeAmt = amount - calPercentage(amount, PROTOCOL_FEE);\\n\\n        // lets perform fee transfer \\n        transferAsset(tokenA, _msgSender(), FEE_WALLET, feeAmt);\\n\\n        address router = routes[routeId].router;\\n        uint256 swapAmt = amount - feeAmt;\\n\\n\\n        if(tokenA == NATIVE_TOKEN){\\n            router.functionCallWithValue(payload, swapAmt);\\n        } else {\\n\\n            require(IERC20(tokenA).approve(router, swapAmt), \\\"BotFi#SwapEngine: TOKENA_APPROVAL_FAILED\\\");\\n\\n            router.functionCallWithValue(payload, msg.value);\\n        }\\n\\n        emit Swap(routeId, amount, tokenA, PROTOCOL_FEE, _msgSender());\\n    }\\n    \\n    /**\\n     * @dev withdraw any stucked tokens in the contract\\n     * @param token the token address to withdraw\\n     * @param amount the amount to move out\\n     */\\n    function sweep(address token, uint256 amount) \\n        external \\n        onlyOwner \\n    {\\n        transferAsset(token, address(this), _msgSender(), amount);\\n    }\\n\\n}   \",\"keccak256\":\"0xd268e7a22a0a6bd068a8a90d17a4fc3820a9f3fc0e2f7dd383550637168ef6ff\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100ec5760003560e01c80636f8e61761161008a5780638da5cb5b116100595780638da5cb5b146102e457806390d49b9d1461030f5780639d783ea414610338578063f2fde38b14610361576100f3565b80636f8e61761461024b578063715018a614610267578063787dce3d1461027e5780637c249d29146102a7576100f3565b80631e9701d4116100c65780631e9701d41461019e5780631f696924146101ce57806339691ed9146101f95780636ea056a914610222576100f3565b8063066e9481146100f55780630dd3ca83146101385780631b80b51014610161576100f3565b366100f357005b005b34801561010157600080fd5b5061011c60048036038101906101179190611ac9565b61038a565b60405161012f9796959493929190611b9b565b60405180910390f35b34801561014457600080fd5b5061015f600480360381019061015a9190611c36565b610439565b005b34801561016d57600080fd5b5061018860048036038101906101839190611ca2565b6104c4565b6040516101959190611ce2565b60405180910390f35b6101b860048036038101906101b39190611d62565b610501565b6040516101c59190611f14565b60405180910390f35b3480156101da57600080fd5b506101e36106a3565b6040516101f091906120be565b60405180910390f35b34801561020557600080fd5b50610220600480360381019061021b91906120e0565b6108bc565b005b34801561022e57600080fd5b5061024960048036038101906102449190612139565b6108e1565b005b610265600480360381019061026091906121cf565b610900565b005b34801561027357600080fd5b5061027c610ea5565b005b34801561028a57600080fd5b506102a560048036038101906102a09190612257565b610eb9565b005b3480156102b357600080fd5b506102ce60048036038101906102c99190612257565b610ecd565b6040516102db9190612284565b60405180910390f35b3480156102f057600080fd5b506102f9610ef1565b604051610306919061229f565b60405180910390f35b34801561031b57600080fd5b50610336600480360381019061033191906122ba565b610f1b565b005b34801561034457600080fd5b5061035f600480360381019061035a9190612313565b610f2f565b005b34801561036d57600080fd5b50610388600480360381019061038391906122ba565b61129c565b005b60026020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050154908060060160009054906101000a900460ff16905087565b6000600260008481526020019081526020016000206005015411610492576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048990612423565b60405180910390fd5b806002600084815260200190815260200160002060060160006101000a81548160ff0219169083151502179055505050565b600061271082846104d59190612472565b10156104e057600080fd5b61271082846104ef9190612472565b6104f991906124e3565b905092915050565b60608383905067ffffffffffffffff8111156105205761051f612514565b5b60405190808252806020026020018201604052801561055357816020015b606081526020019060019003908161053e5790505b50905060005b8484905081101561069b576000803073ffffffffffffffffffffffffffffffffffffffff1687878581811061059157610590612543565b5b90506020028101906105a39190612581565b6040516105b1929190612623565b600060405180830381855af49150503d80600081146105ec576040519150601f19603f3d011682016040523d82523d6000602084013e6105f1565b606091505b5091509150816106675760448151101561060a57600080fd5b6004810190508415610666578080602001905181019061062a919061272e565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065d91906127bb565b60405180910390fd5b5b8084848151811061067b5761067a612543565b5b602002602001018190525050508080610693906127dd565b915050610559565b509392505050565b606060038054905067ffffffffffffffff8111156106c4576106c3612514565b5b6040519080825280602002602001820160405280156106fd57816020015b6106ea6119f8565b8152602001906001900390816106e25790505b50905060005b6003805490508110156108b857600260006003838154811061072857610727612543565b5b906000526020600020015481526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff16151515158152505082828151811061089a57610899612543565b5b602002602001018190525080806108b0906127dd565b915050610703565b5090565b6108c4611322565b80600660006101000a81548160ff02191690831515021790555050565b6108e9611322565b6108fc82306108f66113a9565b846113b1565b5050565b84600060026000838152602001908152602001600020600501541161095a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095190612897565b60405180910390fd5b6002600082815260200190815260200160002060060160009054906101000a900460ff166109bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b490612929565b60405180910390fd5b6109c561141a565b600660009054906101000a900460ff1615610a15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0c90612995565b60405180910390fd5b6000600260008881526020019081526020016000206005015411610a6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6590612a01565b60405180910390fd5b60008383905011610ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aab90612a6d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610b23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1a90612ad9565b60405180910390fd5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610bb157843414610bac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba390612b45565b60405180910390fd5b610bc5565b610bc484610bbd6113a9565b30886113b1565b5b6000610bd3866000546104c4565b86610bde9190612b65565b9050610c1585610bec6113a9565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846113b1565b60006002600089815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008288610c5e9190612b65565b905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1603610d1c57610d1686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050828473ffffffffffffffffffffffffffffffffffffffff166114609092919063ffffffff16565b50610e4a565b8673ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b8152600401610d57929190612b99565b6020604051808303816000875af1158015610d76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9a9190612bd7565b610dd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd090612c76565b60405180910390fd5b610e4886868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050348473ffffffffffffffffffffffffffffffffffffffff166114609092919063ffffffff16565b505b7fa1cf747ad001476b442e3c9c4a2b2180fbc1b3a710b44c90e2f2d23d2f2710c2898989600054610e796113a9565b604051610e8a959493929190612c96565b60405180910390a1505050610e9d61152d565b505050505050565b610ead611322565b610eb76000611537565b565b610ec1611322565b610eca816115fd565b50565b60038181548110610edd57600080fd5b906000526020600020016000915090505481565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610f23611322565b610f2c8161163e565b50565b610f37611322565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610fa6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9d90612d5b565b60405180910390fd5b610faf846116b9565b610fee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe590612ded565b60405180910390fd5b610ff7836116b9565b611036576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102d90612e7f565b60405180910390fd5b61103f826116b9565b61107e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107590612f11565b60405180910390fd5b60008060026000898152602001908152602001600020600501541490506000816110be5760026000898152602001908152602001600020600501546110c0565b425b90506040518060e001604052808981526020018881526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001828152602001841515815250600260008a8152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555090505081156112925760038890806001815401808255809150506001900390600052602060002001600090919091909150555b5050505050505050565b6112a4611322565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036113165760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161130d919061229f565b60405180910390fd5b61131f81611537565b50565b61132a6113a9565b73ffffffffffffffffffffffffffffffffffffffff16611348610ef1565b73ffffffffffffffffffffffffffffffffffffffff16146113a75761136b6113a9565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161139e919061229f565b60405180910390fd5b565b600033905090565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036114075761140282826116cc565b611414565b611413848484846117cc565b5b50505050565b600260055403611456576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600581905550565b6060814710156114a757306040517fcd78605900000000000000000000000000000000000000000000000000000000815260040161149e919061229f565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1684866040516114d09190612f62565b60006040518083038185875af1925050503d806000811461150d576040519150601f19603f3d011682016040523d82523d6000602084013e611512565b606091505b5091509150611522868383611924565b925050509392505050565b6001600581905550565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b806000819055507fdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b1816040516116339190611ce2565b60405180910390a150565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3d21e5a2b633291bd1ff5f9c654e402d063783c95759d2ea521b31fb30e4da41816040516116ae919061229f565b60405180910390a150565b600080823b905060008111915050919050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff81111561170157611700612514565b5b6040519080825280601f01601f1916602001820160405280156117335781602001600182028036833780820191505090505b506040516117419190612f62565b60006040518083038185875af1925050503d806000811461177e576040519150601f19603f3d011682016040523d82523d6000602084013e611783565b606091505b50509050806117c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117be90612feb565b60405180910390fd5b505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b8686866040516024016118039392919061300b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161186d9190612f62565b6000604051808303816000865af19150503d80600081146118aa576040519150601f19603f3d011682016040523d82523d6000602084013e6118af565b606091505b50915091508180156118dd57506000815114806118dc5750808060200190518101906118db9190612bd7565b5b5b61191c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611913906130b4565b60405180910390fd5b505050505050565b60608261193957611934826119b3565b6119ab565b60008251148015611961575060008473ffffffffffffffffffffffffffffffffffffffff163b145b156119a357836040517f9996b31500000000000000000000000000000000000000000000000000000000815260040161199a919061229f565b60405180910390fd5b8190506119ac565b5b9392505050565b6000815111156119c65780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060e001604052806000801916815260200160008019168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611aa681611a93565b8114611ab157600080fd5b50565b600081359050611ac381611a9d565b92915050565b600060208284031215611adf57611ade611a89565b5b6000611aed84828501611ab4565b91505092915050565b611aff81611a93565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b3082611b05565b9050919050565b611b4081611b25565b82525050565b6000611b5182611b05565b9050919050565b611b6181611b46565b82525050565b6000819050919050565b611b7a81611b67565b82525050565b60008115159050919050565b611b9581611b80565b82525050565b600060e082019050611bb0600083018a611af6565b611bbd6020830189611af6565b611bca6040830188611b37565b611bd76060830187611b58565b611be46080830186611b58565b611bf160a0830185611b71565b611bfe60c0830184611b8c565b98975050505050505050565b611c1381611b80565b8114611c1e57600080fd5b50565b600081359050611c3081611c0a565b92915050565b60008060408385031215611c4d57611c4c611a89565b5b6000611c5b85828601611ab4565b9250506020611c6c85828601611c21565b9150509250929050565b611c7f81611b67565b8114611c8a57600080fd5b50565b600081359050611c9c81611c76565b92915050565b60008060408385031215611cb957611cb8611a89565b5b6000611cc785828601611c8d565b9250506020611cd885828601611c8d565b9150509250929050565b6000602082019050611cf76000830184611b71565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611d2257611d21611cfd565b5b8235905067ffffffffffffffff811115611d3f57611d3e611d02565b5b602083019150836020820283011115611d5b57611d5a611d07565b5b9250929050565b600080600060408486031215611d7b57611d7a611a89565b5b600084013567ffffffffffffffff811115611d9957611d98611a8e565b5b611da586828701611d0c565b93509350506020611db886828701611c21565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611e28578082015181840152602081019050611e0d565b60008484015250505050565b6000601f19601f8301169050919050565b6000611e5082611dee565b611e5a8185611df9565b9350611e6a818560208601611e0a565b611e7381611e34565b840191505092915050565b6000611e8a8383611e45565b905092915050565b6000602082019050919050565b6000611eaa82611dc2565b611eb48185611dcd565b935083602082028501611ec685611dde565b8060005b85811015611f025784840389528151611ee38582611e7e565b9450611eee83611e92565b925060208a01995050600181019050611eca565b50829750879550505050505092915050565b60006020820190508181036000830152611f2e8184611e9f565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611f6b81611a93565b82525050565b611f7a81611b25565b82525050565b611f8981611b46565b82525050565b611f9881611b67565b82525050565b611fa781611b80565b82525050565b60e082016000820151611fc36000850182611f62565b506020820151611fd66020850182611f62565b506040820151611fe96040850182611f71565b506060820151611ffc6060850182611f80565b50608082015161200f6080850182611f80565b5060a082015161202260a0850182611f8f565b5060c082015161203560c0850182611f9e565b50505050565b60006120478383611fad565b60e08301905092915050565b6000602082019050919050565b600061206b82611f36565b6120758185611f41565b935061208083611f52565b8060005b838110156120b1578151612098888261203b565b97506120a383612053565b925050600181019050612084565b5085935050505092915050565b600060208201905081810360008301526120d88184612060565b905092915050565b6000602082840312156120f6576120f5611a89565b5b600061210484828501611c21565b91505092915050565b61211681611b46565b811461212157600080fd5b50565b6000813590506121338161210d565b92915050565b600080604083850312156121505761214f611a89565b5b600061215e85828601612124565b925050602061216f85828601611c8d565b9150509250929050565b60008083601f84011261218f5761218e611cfd565b5b8235905067ffffffffffffffff8111156121ac576121ab611d02565b5b6020830191508360018202830111156121c8576121c7611d07565b5b9250929050565b6000806000806000608086880312156121eb576121ea611a89565b5b60006121f988828901611ab4565b955050602061220a88828901611c8d565b945050604061221b88828901612124565b935050606086013567ffffffffffffffff81111561223c5761223b611a8e565b5b61224888828901612179565b92509250509295509295909350565b60006020828403121561226d5761226c611a89565b5b600061227b84828501611c8d565b91505092915050565b60006020820190506122996000830184611af6565b92915050565b60006020820190506122b46000830184611b58565b92915050565b6000602082840312156122d0576122cf611a89565b5b60006122de84828501612124565b91505092915050565b6122f081611b25565b81146122fb57600080fd5b50565b60008135905061230d816122e7565b92915050565b60008060008060008060c087890312156123305761232f611a89565b5b600061233e89828a01611ab4565b965050602061234f89828a01611ab4565b955050604061236089828a016122fe565b945050606061237189828a01612124565b935050608061238289828a01612124565b92505060a061239389828a01611c21565b9150509295509295509295565b600082825260208201905092915050565b7f426f7446693a53776170456e67696e6523656e61626c65526f757465723a204960008201527f4e56414c49445f524f5554450000000000000000000000000000000000000000602082015250565b600061240d602c836123a0565b9150612418826123b1565b604082019050919050565b6000602082019050818103600083015261243c81612400565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061247d82611b67565b915061248883611b67565b925082820261249681611b67565b915082820484148315176124ad576124ac612443565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006124ee82611b67565b91506124f983611b67565b925082612509576125086124b4565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261259e5761259d612572565b5b80840192508235915067ffffffffffffffff8211156125c0576125bf612577565b5b6020830192506001820236038313156125dc576125db61257c565b5b509250929050565b600081905092915050565b82818337600083830152505050565b600061260a83856125e4565b93506126178385846125ef565b82840190509392505050565b60006126308284866125fe565b91508190509392505050565b600080fd5b61264a82611e34565b810181811067ffffffffffffffff8211171561266957612668612514565b5b80604052505050565b600061267c611a7f565b90506126888282612641565b919050565b600067ffffffffffffffff8211156126a8576126a7612514565b5b6126b182611e34565b9050602081019050919050565b60006126d16126cc8461268d565b612672565b9050828152602081018484840111156126ed576126ec61263c565b5b6126f8848285611e0a565b509392505050565b600082601f83011261271557612714611cfd565b5b81516127258482602086016126be565b91505092915050565b60006020828403121561274457612743611a89565b5b600082015167ffffffffffffffff81111561276257612761611a8e565b5b61276e84828501612700565b91505092915050565b600081519050919050565b600061278d82612777565b61279781856123a0565b93506127a7818560208601611e0a565b6127b081611e34565b840191505092915050565b600060208201905081810360008301526127d58184612782565b905092915050565b60006127e882611b67565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361281a57612819612443565b5b600182019050919050565b7f426f7446692353776170456e67696e652376616c6964617465526f757465723a60008201527f20554e4b4e4f574e5f524f555445525f49440000000000000000000000000000602082015250565b60006128816032836123a0565b915061288c82612825565b604082019050919050565b600060208201905081810360008301526128b081612874565b9050919050565b7f426f7446692353776170456e67696e652376616c6964617465526f757465723a60008201527f20524f555445525f4e4f545f454e41424c454400000000000000000000000000602082015250565b60006129136033836123a0565b915061291e826128b7565b604082019050919050565b6000602082019050818103600083015261294281612906565b9050919050565b7f426f74466923737761704e6f745061757365643a20535741505f504155534544600082015250565b600061297f6020836123a0565b915061298a82612949565b602082019050919050565b600060208201905081810360008301526129ae81612972565b9050919050565b7f426f74466923537761703a20554e535550504f525445445f4445580000000000600082015250565b60006129eb601b836123a0565b91506129f6826129b5565b602082019050919050565b60006020820190508181036000830152612a1a816129de565b9050919050565b7f426f74466923537761703a20444154415f4152475f5245515549524544000000600082015250565b6000612a57601d836123a0565b9150612a6282612a21565b602082019050919050565b60006020820190508181036000830152612a8681612a4a565b9050919050565b7f426f74466923537761703a205a45524f5f544f4b454e415f4144445200000000600082015250565b6000612ac3601c836123a0565b9150612ace82612a8d565b602082019050919050565b60006020820190508181036000830152612af281612ab6565b9050919050565b7f426f74466923537761703a20494e53554646494349454e545f42414c414e4345600082015250565b6000612b2f6020836123a0565b9150612b3a82612af9565b602082019050919050565b60006020820190508181036000830152612b5e81612b22565b9050919050565b6000612b7082611b67565b9150612b7b83611b67565b9250828203905081811115612b9357612b92612443565b5b92915050565b6000604082019050612bae6000830185611b58565b612bbb6020830184611b71565b9392505050565b600081519050612bd181611c0a565b92915050565b600060208284031215612bed57612bec611a89565b5b6000612bfb84828501612bc2565b91505092915050565b7f426f7446692353776170456e67696e653a20544f4b454e415f415050524f564160008201527f4c5f4641494c4544000000000000000000000000000000000000000000000000602082015250565b6000612c606028836123a0565b9150612c6b82612c04565b604082019050919050565b60006020820190508181036000830152612c8f81612c53565b9050919050565b600060a082019050612cab6000830188611af6565b612cb86020830187611b71565b612cc56040830186611b58565b612cd26060830185611b71565b612cdf6080830184611b58565b9695505050505050565b7f426f7446692353776170456e67696e6523616464526f757465723a205a45524f60008201527f5f524f555445525f414444524553530000000000000000000000000000000000602082015250565b6000612d45602f836123a0565b9150612d5082612ce9565b604082019050919050565b60006020820190508181036000830152612d7481612d38565b9050919050565b7f426f7446692353776170456e67696e6523616464526f757465723a20524f555460008201527f45525f4e4f545f415f434f4e5452414354000000000000000000000000000000602082015250565b6000612dd76031836123a0565b9150612de282612d7b565b604082019050919050565b60006020820190508181036000830152612e0681612dca565b9050919050565b7f426f7446692353776170456e67696e6523616464526f757465723a204641435460008201527f4f52595f4e4f545f415f434f4e54524143540000000000000000000000000000602082015250565b6000612e696032836123a0565b9150612e7482612e0d565b604082019050919050565b60006020820190508181036000830152612e9881612e5c565b9050919050565b7f426f7446692353776170456e67696e6523616464526f757465723a205745544860008201527f5f4e4f545f415f434f4e54524143540000000000000000000000000000000000602082015250565b6000612efb602f836123a0565b9150612f0682612e9f565b604082019050919050565b60006020820190508181036000830152612f2a81612eee565b9050919050565b6000612f3c82611dee565b612f4681856125e4565b9350612f56818560208601611e0a565b80840191505092915050565b6000612f6e8284612f31565b915081905092915050565b7f426f744669235472616e7366657248656c7065723a204554485f5452414e534660008201527f45525f4641494c45440000000000000000000000000000000000000000000000602082015250565b6000612fd56029836123a0565b9150612fe082612f79565b604082019050919050565b6000602082019050818103600083015261300481612fc8565b9050919050565b60006060820190506130206000830186611b58565b61302d6020830185611b58565b61303a6040830184611b71565b949350505050565b7f426f744669235472616e7366657248656c7065723a20544f4b454e5f5452414e60008201527f534645525f4641494c4544000000000000000000000000000000000000000000602082015250565b600061309e602b836123a0565b91506130a982613042565b604082019050919050565b600060208201905081810360008301526130cd81613091565b905091905056fea2646970667358221220ec2eb8588d4b65b32cc9c2ca686369687b79da24068cc625468679a208b900d264736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addRoute(bytes32,bytes32,address,address,address,bool)": {
        "details": "addRouter add a router params",
        "params": {
          "enabled": "is the router enabled or not",
          "factory": "the factory address",
          "group": "router group - uni_v2, uni_v3 ....",
          "id": "router id",
          "router": "the router address ",
          "weth": "wrapped ether or wrapped native token"
        }
      },
      "calPercentage(uint256,uint256)": {
        "details": "convert percentage in basis point of a value ",
        "params": {
          "amount": "the amount to be calculated on",
          "bps": "percentage value in basis point"
        }
      },
      "enableRoute(bytes32,bool)": {
        "details": "enable or disable a route",
        "params": {
          "id": "the router id",
          "opt": "true or false"
        }
      },
      "getAllRoutes()": {
        "details": "getAllRoutes get all the routers returns array "
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pauseSwap(bool)": {
        "details": "pause the swap operation for the contract",
        "params": {
          "opt": "true or false "
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setFeeWallet(address)": {
        "details": "set the address for taking the protocol fees",
        "params": {
          "addr": "the fee in percentage basis point"
        }
      },
      "setProtocolFee(uint256)": {
        "details": "protocol fee in basis point",
        "params": {
          "_feeBps": "the fee in percentage basis point"
        }
      },
      "swap(bytes32,uint256,address,bytes)": {
        "details": "perform a swap",
        "params": {
          "amount": "the total amount including the protocol fee for the swap",
          "payload": "the encoded swap data to foward to the router",
          "routeId": "the identifier of the router to use",
          "tokenA": "the token to swap into another token (tokenB)"
        }
      },
      "sweep(address,uint256)": {
        "details": "withdraw any stucked tokens in the contract",
        "params": {
          "amount": "the amount to move out",
          "token": "the token address to withdraw"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 693,
        "contract": "contracts/Factory.sol:Factory",
        "label": "PROTOCOL_FEE",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 695,
        "contract": "contracts/Factory.sol:Factory",
        "label": "FEE_WALLET",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 703,
        "contract": "contracts/Factory.sol:Factory",
        "label": "routes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(RouteParams)721_storage)"
      },
      {
        "astId": 706,
        "contract": "contracts/Factory.sol:Factory",
        "label": "routesIds",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 8,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 515,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_status",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3055,
        "contract": "contracts/Factory.sol:Factory",
        "label": "isPaused",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(RouteParams)721_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Defs.RouteParams)",
        "numberOfBytes": "32",
        "value": "t_struct(RouteParams)721_storage"
      },
      "t_struct(RouteParams)721_storage": {
        "encoding": "inplace",
        "label": "struct Defs.RouteParams",
        "members": [
          {
            "astId": 708,
            "contract": "contracts/Factory.sol:Factory",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 710,
            "contract": "contracts/Factory.sol:Factory",
            "label": "group",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 712,
            "contract": "contracts/Factory.sol:Factory",
            "label": "router",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 714,
            "contract": "contracts/Factory.sol:Factory",
            "label": "factory",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 716,
            "contract": "contracts/Factory.sol:Factory",
            "label": "weth",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 718,
            "contract": "contracts/Factory.sol:Factory",
            "label": "createdAt",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 720,
            "contract": "contracts/Factory.sol:Factory",
            "label": "enabled",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
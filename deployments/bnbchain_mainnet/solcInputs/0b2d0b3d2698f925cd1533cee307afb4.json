{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Multicall.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Multicall.sol)\n\npragma solidity ^0.8.20;\n\nimport {Address} from \"./Address.sol\";\n\n/**\n * @dev Provides a function to batch together multiple calls in a single external call.\n */\nabstract contract Multicall {\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\n        }\n        return results;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/base/Defs.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract Defs {\n\n    // the protocol fee \n    uint PROTOCOL_FEE;\n\n    // the fee address, for taking fees \n    address FEE_WALLET;\n\n    bytes32 UNI_V3 = bytes32(\"uni_v3\");\n\n    // native token \n    address constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n\n    // id  =>  RouteParams \n    mapping (bytes32 => RouteParams) public routes;\n    bytes32[] public routesIds;\n\n    struct RouteParams {\n        bytes32             id;\n        bytes32             group; //adapter name uni_v2, uni_v3 and 1inch, balancer\n        address   payable   router;\n        address             factory;\n        address             weth;\n        address             quoter;\n        uint256             createdAt;\n        bool                enabled; \n    }\n\n    /**\n     * @dev convert percentage in basis point of a value \n     * @param amount the amount to be calculated on\n     * @param bps percentage value in basis point\n     */\n    function calPercentage(uint amount, uint bps) \n        public \n        pure \n        returns (uint256)\n    {\n        require((amount * bps) >= 10_000);\n        return (amount * bps) / 10_000;\n    }\n\n}"
    },
    "contracts/base/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.0;\n\nimport \"./Defs.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\n\ncontract TransferHelper is Defs {\n\n    /**\n     * @dev safeTransfer eth or token \n     * @param token, the token contract\n     * @param from the sender's address \n     * @param to the recipient's address\n     * @param value the value to send\n    */\n    function transferAsset(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        \n        if(token == NATIVE_TOKEN){\n            safeTransferETH(to, value);\n        } else {\n            safeTransferFrom(token, from, to, value);\n        }\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'BotFi#TransferHelper: TOKEN_TRANSFER_FAILED');\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'BotFi#TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}"
    },
    "contracts/base/Utils.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.0;\n\nlibrary Utils {\n\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n}"
    },
    "contracts/ContractBase.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"./base/Utils.sol\";\nimport \"./base/Defs.sol\";\nimport \"@openzeppelin/contracts/utils/Multicall.sol\";\n\ncontract ContractBase is \n    Defs, \n    Context, \n    Ownable, \n    Multicall, \n    ReentrancyGuard \n{\n\n\n    event SetProtocolFee(uint256);\n    event SetFeeWallet(address addr);\n\n    constructor() Ownable(_msgSender()) {}\n\n    /**\n     * @dev protocol fee in basis point\n     * @param _feeBps the fee in percentage basis point\n     */\n    function __setProtocolFee (uint256 _feeBps)\n        internal\n    {\n        PROTOCOL_FEE = _feeBps;\n\n        emit SetProtocolFee(_feeBps);\n    }\n\n    /**\n     * @dev protocol fee in basis point\n     * @param _feeBps the fee in percentage basis point\n     */\n    function setProtocolFee(uint _feeBps)\n        public \n        onlyOwner \n    {\n        __setProtocolFee(_feeBps);\n    }\n\n    \n    function __setFeeWallet(address addr)\n        internal \n    {\n        FEE_WALLET = addr;\n        emit SetFeeWallet(addr);\n    }\n\n    /**\n     * @dev set the address for taking the protocol fees\n     * @param addr the fee in percentage basis point\n     */\n    function setFeeWallet(address addr)\n        public \n        onlyOwner \n    {\n        __setFeeWallet(addr);\n    }\n}\n"
    },
    "contracts/Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.0;\n\nimport \"./ContractBase.sol\";\nimport \"./swap/SwapEngine.sol\";\n\ncontract Factory is ContractBase, SwapEngine {\n\n    constructor(\n        uint    protocolFee,\n        address feeWallet\n    ) {     \n        __setProtocolFee(protocolFee);\n        __setFeeWallet(feeWallet);\n    }\n    \n}"
    },
    "contracts/interfaces/@uniswap/v3/v3-periphery/interfaces/external/IWETH9.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.6;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\n/// @title Interface for WETH9\ninterface IWETH9 is IERC20 {\n    /// @notice Deposit ether to get wrapped ether\n    function deposit() external payable;\n\n    /// @notice Withdraw wrapped ether to get ether\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/swap/SwapEngine.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.0;\n\nimport \"../ContractBase.sol\";\nimport \"../base/TransferHelper.sol\";\n//import \"hardhat/console.sol\";\nimport \"../interfaces/@uniswap/v3/v3-periphery/interfaces/external/IWETH9.sol\";\n\n\ncontract SwapEngine is \n    TransferHelper, \n    ContractBase\n{\n\n    event Swap(\n        bytes32 routerId, \n        uint256 amount,\n        address tokenA,\n        uint    feeBps,\n        address account  \n    );\n\n    using Address for address;\n    using Address for address payable;\n\n    bool private isPaused;\n\n    receive() external payable{}\n    fallback() external payable{}\n\n    modifier notPaused() {\n        require(!isPaused, \"BotFi#swapNotPaused: SWAP_PAUSED\");\n        _;\n    }\n\n    /**\n     * @dev addRouter add a router params\n     * @param id       router id\n     * @param group    router group - uni_v2, uni_v3 ....\n     * @param router   the router address \n     * @param factory  the factory address\n     * @param weth     wrapped ether or wrapped native token\n     * @param quoter  swap quoter \n     * @param enabled  is the router enabled or not\n     */\n    function addRoute(\n        bytes32             id,\n        bytes32             group, // uni_v2, uni_v3, 1inch, ...                  \n        address  payable    router, \n        address             factory,\n        address             weth,\n        address             quoter,\n        bool                enabled\n    ) \n        external \n        onlyOwner \n    {\n\n        require(router != address(0), \"BotFi#SwapEngine#addRouter: ZERO_ROUTER_ADDRESS\");\n\n        require(Utils.isContract(router), \"BotFi#SwapEngine#addRouter: ROUTER_NOT_A_CONTRACT\");\n        require(Utils.isContract(factory), \"BotFi#SwapEngine#addRouter: FACTORY_NOT_A_CONTRACT\");\n        require(Utils.isContract(weth), \"BotFi#SwapEngine#addRouter: WETH_NOT_A_CONTRACT\");\n\n        if(quoter != address(0)){\n            require(Utils.isContract(quoter), \"BotFi#SwapEngine#addRouter: QUOTER_NOT_A_CONTRACT\");\n        }\n\n        bool isNew = (routes[id].createdAt == 0);\n        uint createdAt = (isNew) ? block.timestamp : routes[id].createdAt;\n\n\n        routes[id] = RouteParams(\n            id,\n            group, \n            router,\n            factory,\n            weth,\n            quoter,\n            createdAt,\n            enabled\n        );\n\n        if(isNew) routesIds.push(id);\n    }\n\n    /**\n     * @dev enable or disable a route\n     * @param id the router id\n     * @param opt true or false\n     */\n    function enableRoute(bytes32 id, bool opt)\n        external\n    {\n        require(routes[id].createdAt > 0, \"BotFi:SwapEngine#enableRouter: INVALID_ROUTE\");\n\n        routes[id].enabled = opt;\n    }\n\n    /**\n     * @dev getAllRoutes get all the routers\n     * returns array \n     */\n    function getAllRoutes()\n        external\n        view \n        returns (RouteParams[] memory rp)\n    {\n       rp = new RouteParams[](routesIds.length); \n\n        for(uint i=0; i < routesIds.length; i++){\n            rp[i] = routes[routesIds[i]];\n        }\n    }\n\n    /**\n     * @dev pause the swap operation for the contract\n     * @param opt true or false \n     */\n    function pauseSwap(bool opt) \n        external\n        onlyOwner \n    {\n        isPaused = opt;\n    }\n\n    modifier validateRouter(bytes32 routeId) {\n        require(routes[routeId].createdAt > 0, \"BotFi#SwapEngine#validateRouter: UNKNOWN_ROUTER_ID\");\n\n        require(routes[routeId].enabled, \"BotFi#SwapEngine#validateRouter: ROUTER_NOT_ENABLED\");\n\n        _;\n    }\n\n\n    /**\n     * @dev perform a swap\n     * @param routeId the identifier of the router to use\n     * @param amount the total amount without the protocol fee for the swap\n     * @param tokenA the token to swap into another token (tokenB)\n     * @param payload the encoded swap data to foward to the router\n     */ \n    function swap(\n        bytes32 routeId,\n        uint256 amount, \n        address tokenA, \n        bytes calldata payload\n    ) \n        external \n        payable\n        validateRouter(routeId)\n        nonReentrant()\n        notPaused()\n    {   \n\n        RouteParams memory route = routes[routeId];\n\n        require(route.createdAt > 0,  \"BotFi#Swap:  UNSUPPORTED_DEX\");\n        require(payload.length > 0,   \"BotFi#Swap:  PAYLOAD_REQUIRED\");\n        require(tokenA != address(0), \"BotFi#Swap:  ZERO_TOKENA_ADDR\");\n\n        if(tokenA == NATIVE_TOKEN) {\n            //validate native token input\n            require(msg.value == amount, \"BotFi#Swap: INSUFFICIENT_BALANCE\");\n        } else {\n            \n            // lets transfer the tokens from the user\n            transferAsset(tokenA, _msgSender(), address(this), amount);\n        }\n\n        address swapRouter = route.router;\n\n        uint256 swapAmt;\n        uint  feeAmt;\n\n        // if protocol fee is set and greater then 0, lets now take the fee\n        if(PROTOCOL_FEE > 0) {\n\n            //get fee amt\n            feeAmt  = calPercentage(amount, PROTOCOL_FEE);\n\n            // now amt to swap\n            swapAmt = amount - feeAmt; \n\n            // lets transfer the fee to our fee wallet\n            transferAsset(tokenA, _msgSender(), FEE_WALLET, feeAmt);\n\n        } else {\n            //set swap amt to the whole amt if  protocol fees is 0\n            swapAmt = amount;\n        }\n\n        // if tokenA is native but not univ3 as in univ3, we need to \n        // wrap all native tokens first\n        if(tokenA == NATIVE_TOKEN && route.group != UNI_V3){\n            swapRouter.functionCallWithValue(payload, swapAmt);\n        } else {\n\n            address tokenAddr; \n\n            // wrap native token if its uni_v3 group\n            if(tokenA == NATIVE_TOKEN && route.group == UNI_V3){\n                IWETH9(route.weth).deposit{value: swapAmt}();\n                tokenAddr = route.weth;\n            } else {\n                tokenAddr = tokenA;\n            }\n\n            // lets approve token spend\n            require(IERC20(tokenAddr).approve(swapRouter, swapAmt), \n               \"BotFi#SwapEngine: TOKENA_APPROVAL_FAILED\"\n            );\n\n            // forward the payload to the main swap\n            swapRouter.functionCall(payload);\n        }\n\n        emit Swap(routeId, amount, tokenA, PROTOCOL_FEE, _msgSender());\n\n    }\n    \n    /**\n     * @dev withdraw any stucked tokens in the contract\n     * @param token the token address to withdraw\n     * @param amount the amount to move out\n     */\n    function sweep(address token, uint256 amount) \n        external \n        onlyOwner \n    {\n        transferAsset(token, address(this), _msgSender(), amount);\n    }\n\n}   "
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
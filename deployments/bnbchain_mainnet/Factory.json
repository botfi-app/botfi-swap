{
  "address": "0xeE74886eEbB57DB2A031c9D73894c485B02BfF92",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "feeWallet",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetFeeWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "SetProtocolFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "routerId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeBps",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "quoter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "addRoute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bps",
          "type": "uint256"
        }
      ],
      "name": "calPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "opt",
          "type": "bool"
        }
      ],
      "name": "enableRoute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRoutes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "group",
              "type": "bytes32"
            },
            {
              "internalType": "address payable",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "weth",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "quoter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            }
          ],
          "internalType": "struct Defs.RouteParams[]",
          "name": "rp",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "routeId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "getSwapGasInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "opt",
          "type": "bool"
        }
      ],
      "name": "pauseSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "routes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "quoter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "routesIds",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setFeeWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeBps",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "routeId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x64ef198cb21f5c988c208d89ea89e2eadcdbb738033ef02356f9a77a625c8e2d",
  "receipt": {
    "to": null,
    "from": "0xc3490a43FF5825F34f714fd52697f2Ed2c7D44F8",
    "contractAddress": "0xeE74886eEbB57DB2A031c9D73894c485B02BfF92",
    "transactionIndex": 75,
    "gasUsed": "3121259",
    "logsBloom": "0x
    "blockHash": "0x0e5df462ac03d93ae125ef8813d31ba9a8e4bfc323cf3a14a5d87269fb5c1144",
    "transactionHash": "0x64ef198cb21f5c988c208d89ea89e2eadcdbb738033ef02356f9a77a625c8e2d",
    "logs": [
      {
        "transactionIndex": 75,
        "blockNumber": 33889832,
        "transactionHash": "0x64ef198cb21f5c988c208d89ea89e2eadcdbb738033ef02356f9a77a625c8e2d",
        "address": "0xeE74886eEbB57DB2A031c9D73894c485B02BfF92",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c3490a43ff5825f34f714fd52697f2ed2c7d44f8"
        ],
        "data": "0x",
        "logIndex": 395,
        "blockHash": "0x0e5df462ac03d93ae125ef8813d31ba9a8e4bfc323cf3a14a5d87269fb5c1144"
      },
      {
        "transactionIndex": 75,
        "blockNumber": 33889832,
        "transactionHash": "0x64ef198cb21f5c988c208d89ea89e2eadcdbb738033ef02356f9a77a625c8e2d",
        "address": "0xeE74886eEbB57DB2A031c9D73894c485B02BfF92",
        "topics": [
          "0xdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b1"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000050",
        "logIndex": 396,
        "blockHash": "0x0e5df462ac03d93ae125ef8813d31ba9a8e4bfc323cf3a14a5d87269fb5c1144"
      },
      {
        "transactionIndex": 75,
        "blockNumber": 33889832,
        "transactionHash": "0x64ef198cb21f5c988c208d89ea89e2eadcdbb738033ef02356f9a77a625c8e2d",
        "address": "0xeE74886eEbB57DB2A031c9D73894c485B02BfF92",
        "topics": [
          "0x3d21e5a2b633291bd1ff5f9c654e402d063783c95759d2ea521b31fb30e4da41"
        ],
        "data": "0x00000000000000000000000092c9e17a2f02b2119350f3e90918bed3c6e24f3c",
        "logIndex": 397,
        "blockHash": "0x0e5df462ac03d93ae125ef8813d31ba9a8e4bfc323cf3a14a5d87269fb5c1144"
      }
    ],
    "blockNumber": 33889832,
    "cumulativeGasUsed": "13693040",
    "status": 1,
    "byzantium": true
  },
  "args": [
    80,
    "0x92c9E17a2f02b2119350F3E90918bEd3c6e24F3c"
  ],
  "numDeployments": 7,
  "solcInputHash": "4d150c6222c55686e03bd2875f69545d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetFeeWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SetProtocolFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"routerId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"addRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"calPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"opt\",\"type\":\"bool\"}],\"name\":\"enableRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRoutes\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"struct Defs.RouteParams[]\",\"name\":\"rp\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"routeId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"getSwapGasInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"opt\",\"type\":\"bool\"}],\"name\":\"pauseSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"routes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"routesIds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeBps\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"routeId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"addRoute(bytes32,bytes32,address,address,address,address,bool)\":{\"details\":\"addRouter add a router params\",\"params\":{\"enabled\":\"is the router enabled or not\",\"factory\":\"the factory address\",\"group\":\"router group - uni_v2, uni_v3 ....\",\"id\":\"router id\",\"quoter\":\"swap quoter \",\"router\":\"the router address \",\"weth\":\"wrapped ether or wrapped native token\"}},\"calPercentage(uint256,uint256)\":{\"details\":\"convert percentage in basis point of a value \",\"params\":{\"amount\":\"the amount to be calculated on\",\"bps\":\"percentage value in basis point\"}},\"enableRoute(bytes32,bool)\":{\"details\":\"enable or disable a route\",\"params\":{\"id\":\"the router id\",\"opt\":\"true or false\"}},\"getAllRoutes()\":{\"details\":\"getAllRoutes get all the routers returns array \"},\"multicall(bytes[])\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pauseSwap(bool)\":{\"details\":\"pause the swap operation for the contract\",\"params\":{\"opt\":\"true or false \"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setFeeWallet(address)\":{\"details\":\"set the address for taking the protocol fees\",\"params\":{\"addr\":\"the fee in percentage basis point\"}},\"setProtocolFee(uint256)\":{\"details\":\"protocol fee in basis point\",\"params\":{\"_feeBps\":\"the fee in percentage basis point\"}},\"swap(bytes32,uint256,address,bytes)\":{\"details\":\"perform a swap\",\"params\":{\"amount\":\"the total amount without the protocol fee for the swap\",\"payload\":\"the encoded swap data to foward to the router\",\"routeId\":\"the identifier of the router to use\",\"tokenA\":\"the token to swap into another token (tokenB)\"}},\"sweep(address,uint256)\":{\"details\":\"withdraw any stucked tokens in the contract\",\"params\":{\"amount\":\"the amount to move out\",\"token\":\"the token address to withdraw\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getSwapGasInfo(bytes32,uint256,address,bytes)\":{\"notice\":\"getSwapGasFee\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory.sol\":\"Factory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Address} from \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0xc5622e05d0cc837b2ab254c29566768e292847d05d230560d9886955cafe6c37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/ContractBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./base/Utils.sol\\\";\\nimport \\\"./base/Defs.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\n\\ncontract ContractBase is \\n    Defs, \\n    Context, \\n    Ownable, \\n    Multicall, \\n    ReentrancyGuard \\n{\\n\\n\\n    event SetProtocolFee(uint256);\\n    event SetFeeWallet(address addr);\\n\\n    constructor() Ownable(_msgSender()) {}\\n\\n    /**\\n     * @dev protocol fee in basis point\\n     * @param _feeBps the fee in percentage basis point\\n     */\\n    function __setProtocolFee (uint256 _feeBps)\\n        internal\\n    {\\n        PROTOCOL_FEE = _feeBps;\\n\\n        emit SetProtocolFee(_feeBps);\\n    }\\n\\n    /**\\n     * @dev protocol fee in basis point\\n     * @param _feeBps the fee in percentage basis point\\n     */\\n    function setProtocolFee(uint _feeBps)\\n        public \\n        onlyOwner \\n    {\\n        __setProtocolFee(_feeBps);\\n    }\\n\\n    \\n    function __setFeeWallet(address addr)\\n        internal \\n    {\\n        FEE_WALLET = addr;\\n        emit SetFeeWallet(addr);\\n    }\\n\\n    /**\\n     * @dev set the address for taking the protocol fees\\n     * @param addr the fee in percentage basis point\\n     */\\n    function setFeeWallet(address addr)\\n        public \\n        onlyOwner \\n    {\\n        __setFeeWallet(addr);\\n    }\\n}\\n\",\"keccak256\":\"0xef7b68c9430c0baae239ec4003845e0ad3a8738a78c96b45eaee32fcb6fd958c\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ContractBase.sol\\\";\\nimport \\\"./swap/SwapEngine.sol\\\";\\n\\ncontract Factory is ContractBase, SwapEngine {\\n\\n    constructor(\\n        uint    protocolFee,\\n        address feeWallet\\n    ) {     \\n        __setProtocolFee(protocolFee);\\n        __setFeeWallet(feeWallet);\\n    }\\n    \\n}\",\"keccak256\":\"0x394890b11ef8b34761951c491de6616cd029c0856ef14c01af97b0e27087d694\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/Defs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract Defs {\\n\\n    // the protocol fee \\n    uint PROTOCOL_FEE;\\n\\n    // the fee address, for taking fees \\n    address FEE_WALLET;\\n\\n    bytes32 UNI_V3 = bytes32(\\\"uni_v3\\\");\\n\\n    // native token \\n    address constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n\\n    // id  =>  RouteParams \\n    mapping (bytes32 => RouteParams) public routes;\\n    bytes32[] public routesIds;\\n\\n    struct RouteParams {\\n        bytes32             id;\\n        bytes32             group; //adapter name uni_v2, uni_v3 and 1inch, balancer\\n        address   payable   router;\\n        address             factory;\\n        address             weth;\\n        address             quoter;\\n        uint256             createdAt;\\n        bool                enabled; \\n    }\\n\\n    /**\\n     * @dev convert percentage in basis point of a value \\n     * @param amount the amount to be calculated on\\n     * @param bps percentage value in basis point\\n     */\\n    function calPercentage(uint amount, uint bps) \\n        public \\n        pure \\n        returns (uint256)\\n    {\\n        require((amount * bps) >= 10_000);\\n        return (amount * bps) / 10_000;\\n    }\\n\\n}\",\"keccak256\":\"0xe1335cc4f3ff1d348e277aab9c237c6470281a6d5f3e4ed27136c28aa354f54c\",\"license\":\"MIT\"},\"contracts/base/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Defs.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ncontract TransferHelper is Defs {\\n\\n    /**\\n     * @dev safeTransfer eth or token \\n     * @param token, the token contract\\n     * @param from the sender's address \\n     * @param to the recipient's address\\n     * @param value the value to send\\n    */\\n    function transferAsset(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        \\n        if(token == NATIVE_TOKEN){\\n            safeTransferETH(to, value);\\n        } else {\\n            safeTransferFrom(token, from, to, value);\\n        }\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'BotFi#TransferHelper: TOKEN_TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'BotFi#TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\",\"keccak256\":\"0x51b937555ca9f1a7622bf6c8172ee3e669fc613558d15997c9dbae4d46a552a2\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nlibrary Utils {\\n\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n}\",\"keccak256\":\"0xc362e2117b035f0117be46f04422be11297ece6ab03dcfde07db97f5cb2f9728\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/@uniswap/v3/v3-periphery/interfaces/external/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x690d65db6497ed2c20a8521d04d35033a8b7c404e97a059d2a03e05f6d5cc617\",\"license\":\"GPL-2.0-or-later\"},\"contracts/swap/SwapEngine.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ContractBase.sol\\\";\\nimport \\\"../base/TransferHelper.sol\\\";\\n//import \\\"hardhat/console.sol\\\";\\nimport \\\"../interfaces/@uniswap/v3/v3-periphery/interfaces/external/IWETH9.sol\\\";\\n\\n\\ncontract SwapEngine is \\n    TransferHelper, \\n    ContractBase\\n{\\n\\n    event Swap(\\n        bytes32 routerId, \\n        uint256 amount,\\n        address tokenA,\\n        uint    feeBps,\\n        address account  \\n    );\\n\\n    using Address for address;\\n    using Address for address payable;\\n\\n    bool private isPaused;\\n\\n    receive() external payable{}\\n    fallback() external payable{}\\n\\n    modifier notPaused() {\\n        require(!isPaused, \\\"BotFi#swapNotPaused: SWAP_PAUSED\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev addRouter add a router params\\n     * @param id       router id\\n     * @param group    router group - uni_v2, uni_v3 ....\\n     * @param router   the router address \\n     * @param factory  the factory address\\n     * @param weth     wrapped ether or wrapped native token\\n     * @param quoter  swap quoter \\n     * @param enabled  is the router enabled or not\\n     */\\n    function addRoute(\\n        bytes32             id,\\n        bytes32             group, // uni_v2, uni_v3, 1inch, ...                  \\n        address  payable    router, \\n        address             factory,\\n        address             weth,\\n        address             quoter,\\n        bool                enabled\\n    ) \\n        external \\n        onlyOwner \\n    {\\n\\n        require(router != address(0), \\\"BotFi#SwapEngine#addRouter: ZERO_ROUTER_ADDRESS\\\");\\n\\n        require(Utils.isContract(router), \\\"BotFi#SwapEngine#addRouter: ROUTER_NOT_A_CONTRACT\\\");\\n        require(Utils.isContract(factory), \\\"BotFi#SwapEngine#addRouter: FACTORY_NOT_A_CONTRACT\\\");\\n        require(Utils.isContract(weth), \\\"BotFi#SwapEngine#addRouter: WETH_NOT_A_CONTRACT\\\");\\n\\n        if(quoter != address(0)){\\n            require(Utils.isContract(quoter), \\\"BotFi#SwapEngine#addRouter: QUOTER_NOT_A_CONTRACT\\\");\\n        }\\n\\n        bool isNew = (routes[id].createdAt == 0);\\n        uint createdAt = (isNew) ? block.timestamp : routes[id].createdAt;\\n\\n\\n        routes[id] = RouteParams(\\n            id,\\n            group, \\n            router,\\n            factory,\\n            weth,\\n            quoter,\\n            createdAt,\\n            enabled\\n        );\\n\\n        if(isNew) routesIds.push(id);\\n    }\\n\\n    /**\\n     * @dev enable or disable a route\\n     * @param id the router id\\n     * @param opt true or false\\n     */\\n    function enableRoute(bytes32 id, bool opt)\\n        external\\n    {\\n        require(routes[id].createdAt > 0, \\\"BotFi:SwapEngine#enableRouter: INVALID_ROUTE\\\");\\n\\n        routes[id].enabled = opt;\\n    }\\n\\n    /**\\n     * @dev getAllRoutes get all the routers\\n     * returns array \\n     */\\n    function getAllRoutes()\\n        external\\n        view \\n        returns (RouteParams[] memory rp)\\n    {\\n       rp = new RouteParams[](routesIds.length); \\n\\n        for(uint i=0; i < routesIds.length; i++){\\n            rp[i] = routes[routesIds[i]];\\n        }\\n    }\\n\\n    /**\\n     * @dev pause the swap operation for the contract\\n     * @param opt true or false \\n     */\\n    function pauseSwap(bool opt) \\n        external\\n        onlyOwner \\n    {\\n        isPaused = opt;\\n    }\\n\\n    modifier validateRouter(bytes32 routeId) {\\n        require(routes[routeId].createdAt > 0, \\\"BotFi#SwapEngine#validateRouter: UNKNOWN_ROUTER_ID\\\");\\n\\n        require(routes[routeId].enabled, \\\"BotFi#SwapEngine#validateRouter: ROUTER_NOT_ENABLED\\\");\\n\\n        _;\\n    }\\n\\n\\n    /**\\n     * @dev perform a swap\\n     * @param routeId the identifier of the router to use\\n     * @param amount the total amount without the protocol fee for the swap\\n     * @param tokenA the token to swap into another token (tokenB)\\n     * @param payload the encoded swap data to foward to the router\\n     */ \\n    function swap(\\n        bytes32 routeId,\\n        uint256 amount, \\n        address tokenA, \\n        bytes calldata payload\\n    ) \\n        external \\n        payable\\n        validateRouter(routeId)\\n        nonReentrant()\\n        notPaused()\\n    {   \\n\\n        RouteParams memory route = routes[routeId];\\n\\n        require(route.createdAt > 0,  \\\"BotFi#Swap:  UNSUPPORTED_DEX\\\");\\n        require(payload.length > 0,   \\\"BotFi#Swap:  PAYLOAD_REQUIRED\\\");\\n        require(tokenA != address(0), \\\"BotFi#Swap:  ZERO_TOKENA_ADDR\\\");\\n\\n        if(tokenA == NATIVE_TOKEN) {\\n            //validate native token input\\n            require(msg.value == amount, \\\"BotFi#Swap: INSUFFICIENT_BALANCE\\\");\\n        } else {\\n            \\n            // lets transfer the tokens from the user\\n            transferAsset(tokenA, _msgSender(), address(this), amount);\\n        }\\n\\n        address swapRouter = route.router;\\n\\n        uint256 swapAmt;\\n        uint  feeAmt;\\n\\n        // if protocol fee is set and greater then 0, lets now take the fee\\n        if(PROTOCOL_FEE > 0) {\\n\\n            //get fee amt\\n            feeAmt  = calPercentage(amount, PROTOCOL_FEE);\\n\\n            // now amt to swap\\n            swapAmt = amount - feeAmt;\\n\\n            // lets transfer the fee to our fee wallet\\n            transferAsset(tokenA, _msgSender(), FEE_WALLET, feeAmt);\\n\\n        } else {\\n            //set swap amt to the whole amt if  protocol fees is 0\\n            swapAmt = amount;\\n        }\\n\\n        // if tokenA is native but not univ3 as in univ3, we need to \\n        // wrap all native tokens first\\n        if(tokenA == NATIVE_TOKEN && route.group != UNI_V3){\\n            swapRouter.functionCallWithValue(payload, swapAmt);\\n        } else {\\n\\n            address tokenAddr; \\n\\n            // wrap native token if its uni_v3 group\\n            if(tokenA == NATIVE_TOKEN && route.group == UNI_V3){\\n                IWETH9(route.weth).deposit{value: swapAmt}();\\n                tokenAddr = route.weth;\\n            } else {\\n                tokenAddr = tokenA;\\n            }\\n\\n            // lets approve token spend\\n            require(IERC20(tokenAddr).approve(swapRouter, swapAmt), \\n               \\\"BotFi#SwapEngine: TOKENA_APPROVAL_FAILED\\\"\\n            );\\n\\n            // forward the payload to the main swap\\n            swapRouter.functionCall(payload);\\n        }\\n\\n        emit Swap(routeId, amount, tokenA, PROTOCOL_FEE, _msgSender());\\n\\n    }\\n\\n    /**\\n     * getSwapGasFee\\n     */\\n    function getSwapGasInfo (\\n        bytes32 routeId,\\n        uint256 amount, \\n        address tokenA, \\n        bytes calldata payload\\n    ) \\n        external \\n        payable\\n        returns ( uint256, uint256, uint256 )\\n    {\\n        \\n        uint256 gasStart = gasleft();\\n\\n        //perform swap \\n        this.swap(routeId, amount, tokenA, payload);\\n\\n        uint256 gasUsed;\\n        \\n        unchecked { gasUsed = gasStart - gasleft(); } \\n\\n        return (gasUsed, tx.gasprice, block.gaslimit); \\n    }\\n    \\n    /**\\n     * @dev withdraw any stucked tokens in the contract\\n     * @param token the token address to withdraw\\n     * @param amount the amount to move out\\n     */\\n    function sweep(address token, uint256 amount) \\n        external \\n        onlyOwner \\n    {\\n        transferAsset(token, address(this), _msgSender(), amount);\\n    }\\n\\n}   \",\"keccak256\":\"0xe821f496b43f0fa1453390e5496007bfaf842e7881d320274b23e57392c9e76b\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040527f756e695f763300000000000000000000000000000000000000000000000000006002553480156200003557600080fd5b50604051620039653803806200396583398181016040528101906200005b919062000357565b6200006b6200012460201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000e05760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000d79190620003af565b60405180910390fd5b620000f1816200012c60201b60201c565b5060016006819055506200010b82620001f260201b60201c565b6200011c816200023560201b60201c565b5050620003fa565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b806000819055507fdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b1816040516200022a9190620003dd565b60405180910390a150565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3d21e5a2b633291bd1ff5f9c654e402d063783c95759d2ea521b31fb30e4da4181604051620002a79190620003af565b60405180910390a150565b600080fd5b6000819050919050565b620002cc81620002b7565b8114620002d857600080fd5b50565b600081519050620002ec81620002c1565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200031f82620002f2565b9050919050565b620003318162000312565b81146200033d57600080fd5b50565b600081519050620003518162000326565b92915050565b60008060408385031215620003715762000370620002b2565b5b60006200038185828601620002db565b9250506020620003948582860162000340565b9150509250929050565b620003a98162000312565b82525050565b6000602082019050620003c660008301846200039e565b92915050565b620003d781620002b7565b82525050565b6000602082019050620003f46000830184620003cc565b92915050565b61355b806200040a6000396000f3fe6080604052600436106100f75760003560e01c8063715018a61161008a5780638da5cb5b116100595780638da5cb5b1461031b57806390d49b9d14610346578063ac9650d81461036f578063f2fde38b146103ac576100fe565b8063715018a614610275578063787dce3d1461028c5780637c249d29146102b55780638ca78528146102f2576100fe565b806338395a9d116100c657806338395a9d146101d557806339691ed9146102075780636ea056a9146102305780636f8e617614610259576100fe565b8063066e9481146101005780630dd3ca83146101445780631b80b5101461016d5780631f696924146101aa576100fe565b366100fe57005b005b34801561010c57600080fd5b5061012760048036038101906101229190611f7e565b6103d5565b60405161013b989796959493929190612050565b60405180910390f35b34801561015057600080fd5b5061016b600480360381019061016691906120fa565b6104aa565b005b34801561017957600080fd5b50610194600480360381019061018f9190612166565b610535565b6040516101a191906121a6565b60405180910390f35b3480156101b657600080fd5b506101bf610572565b6040516101cc919061235e565b60405180910390f35b6101ef60048036038101906101ea9190612411565b6107e2565b6040516101fe93929190612499565b60405180910390f35b34801561021357600080fd5b5061022e600480360381019061022991906124d0565b61087b565b005b34801561023c57600080fd5b50610257600480360381019061025291906124fd565b6108a0565b005b610273600480360381019061026e9190612411565b6108bf565b005b34801561028157600080fd5b5061028a6110be565b005b34801561029857600080fd5b506102b360048036038101906102ae919061253d565b6110d2565b005b3480156102c157600080fd5b506102dc60048036038101906102d7919061253d565b6110e6565b6040516102e9919061256a565b60405180910390f35b3480156102fe57600080fd5b50610319600480360381019061031491906125b1565b61110a565b005b34801561032757600080fd5b50610330611559565b60405161033d9190612653565b60405180910390f35b34801561035257600080fd5b5061036d6004803603810190610368919061266e565b611583565b005b34801561037b57600080fd5b50610396600480360381019061039191906126f1565b611597565b6040516103a39190612890565b60405180910390f35b3480156103b857600080fd5b506103d360048036038101906103ce919061266e565b6116a3565b005b60036020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060154908060070160009054906101000a900460ff16905088565b6000600360008481526020019081526020016000206006015411610503576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fa90612935565b60405180910390fd5b806003600084815260200190815260200160002060070160006101000a81548160ff0219169083151502179055505050565b600061271082846105469190612984565b101561055157600080fd5b61271082846105609190612984565b61056a91906129f5565b905092915050565b606060048054905067ffffffffffffffff81111561059357610592612a26565b5b6040519080825280602002602001820160405280156105cc57816020015b6105b9611e99565b8152602001906001900390816105b15790505b50905060005b6004805490508110156107de5760036000600483815481106105f7576105f6612a55565b5b906000526020600020015481526020019081526020016000206040518061010001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682015481526020016007820160009054906101000a900460ff1615151515815250508282815181106107c0576107bf612a55565b5b602002602001018190525080806107d690612a84565b9150506105d2565b5090565b6000806000805a90503073ffffffffffffffffffffffffffffffffffffffff16636f8e61768a8a8a8a8a6040518663ffffffff1660e01b815260040161082c959493929190612b19565b600060405180830381600087803b15801561084657600080fd5b505af115801561085a573d6000803e3d6000fd5b5050505060005a82039050803a459450945094505050955095509592505050565b610883611729565b80600760006101000a81548160ff02191690831515021790555050565b6108a8611729565b6108bb82306108b56117b0565b846117b8565b5050565b846000600360008381526020019081526020016000206006015411610919576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091090612bd9565b60405180910390fd5b6003600082815260200190815260200160002060070160009054906101000a900460ff1661097c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097390612c6b565b60405180910390fd5b610984611821565b600760009054906101000a900460ff16156109d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cb90612cd7565b60405180910390fd5b6000600360008881526020019081526020016000206040518061010001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682015481526020016007820160009054906101000a900460ff161515151581525050905060008160c0015111610bcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc690612d43565b60405180910390fd5b60008484905011610c15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0c90612daf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610c84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7b90612e1b565b60405180910390fd5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610d1257853414610d0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0490612e87565b60405180910390fd5b610d26565b610d2585610d1e6117b0565b30896117b8565b5b600081604001519050600080600080541115610d9257610d4889600054610535565b90508089610d569190612ea7565b9150610d8d88610d646117b0565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846117b8565b610d96565b8891505b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16148015610deb5750600254846020015114155b15610e6557610e5f87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050838573ffffffffffffffffffffffffffffffffffffffff166118679092919063ffffffff16565b50611062565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16148015610ebb57506002548560200151145b15610f3157846080015173ffffffffffffffffffffffffffffffffffffffff1663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b158015610f0c57600080fd5b505af1158015610f20573d6000803e3d6000fd5b505050505084608001519050610f35565b8890505b8073ffffffffffffffffffffffffffffffffffffffff1663095ea7b385856040518363ffffffff1660e01b8152600401610f70929190612edb565b6020604051808303816000875af1158015610f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb39190612f19565b610ff2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe990612fb8565b60405180910390fd5b61105f88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508573ffffffffffffffffffffffffffffffffffffffff1661193490919063ffffffff16565b50505b7fa1cf747ad001476b442e3c9c4a2b2180fbc1b3a710b44c90e2f2d23d2f2710c28a8a8a6000546110916117b0565b6040516110a2959493929190612fd8565b60405180910390a1505050506110b661194a565b505050505050565b6110c6611729565b6110d06000611954565b565b6110da611729565b6110e381611a1a565b50565b600481815481106110f657600080fd5b906000526020600020016000915090505481565b611112611729565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603611181576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111789061309d565b60405180910390fd5b61118a85611a5b565b6111c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c09061312f565b60405180910390fd5b6111d284611a5b565b611211576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611208906131c1565b60405180910390fd5b61121a83611a5b565b611259576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125090613253565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146112d65761129682611a5b565b6112d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cc906132e5565b60405180910390fd5b5b600080600360008a81526020019081526020016000206006015414905060008161131657600360008a815260200190815260200160002060060154611318565b425b90506040518061010001604052808a81526020018981526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001828152602001841515815250600360008b8152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c0820151816006015560e08201518160070160006101000a81548160ff021916908315150217905550905050811561154e5760048990806001815401808255809150506001900390600052602060002001600090919091909150555b505050505050505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61158b611729565b61159481611a6e565b50565b60608282905067ffffffffffffffff8111156115b6576115b5612a26565b5b6040519080825280602002602001820160405280156115e957816020015b60608152602001906001900390816115d45790505b50905060005b8383905081101561169c5761166b3085858481811061161157611610612a55565b5b90506020028101906116239190613314565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611ae9565b82828151811061167e5761167d612a55565b5b6020026020010181905250808061169490612a84565b9150506115ef565b5092915050565b6116ab611729565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361171d5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016117149190612653565b60405180910390fd5b61172681611954565b50565b6117316117b0565b73ffffffffffffffffffffffffffffffffffffffff1661174f611559565b73ffffffffffffffffffffffffffffffffffffffff16146117ae576117726117b0565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016117a59190612653565b60405180910390fd5b565b600033905090565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361180e576118098282611b6d565b61181b565b61181a84848484611c6d565b5b50505050565b60026006540361185d576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600681905550565b6060814710156118ae57306040517fcd7860590000000000000000000000000000000000000000000000000000000081526004016118a59190612653565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1684866040516118d791906133b3565b60006040518083038185875af1925050503d8060008114611914576040519150601f19603f3d011682016040523d82523d6000602084013e611919565b606091505b5091509150611929868383611dc5565b925050509392505050565b606061194283836000611867565b905092915050565b6001600681905550565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b806000819055507fdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b181604051611a5091906121a6565b60405180910390a150565b600080823b905060008111915050919050565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3d21e5a2b633291bd1ff5f9c654e402d063783c95759d2ea521b31fb30e4da4181604051611ade9190612653565b60405180910390a150565b60606000808473ffffffffffffffffffffffffffffffffffffffff1684604051611b1391906133b3565b600060405180830381855af49150503d8060008114611b4e576040519150601f19603f3d011682016040523d82523d6000602084013e611b53565b606091505b5091509150611b63858383611dc5565b9250505092915050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811115611ba257611ba1612a26565b5b6040519080825280601f01601f191660200182016040528015611bd45781602001600182028036833780820191505090505b50604051611be291906133b3565b60006040518083038185875af1925050503d8060008114611c1f576040519150601f19603f3d011682016040523d82523d6000602084013e611c24565b606091505b5050905080611c68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5f9061343c565b60405180910390fd5b505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b868686604051602401611ca49392919061345c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611d0e91906133b3565b6000604051808303816000865af19150503d8060008114611d4b576040519150601f19603f3d011682016040523d82523d6000602084013e611d50565b606091505b5091509150818015611d7e5750600081511480611d7d575080806020019051810190611d7c9190612f19565b5b5b611dbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db490613505565b60405180910390fd5b505050505050565b606082611dda57611dd582611e54565b611e4c565b60008251148015611e02575060008473ffffffffffffffffffffffffffffffffffffffff163b145b15611e4457836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401611e3b9190612653565b60405180910390fd5b819050611e4d565b5b9392505050565b600081511115611e675780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518061010001604052806000801916815260200160008019168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b600080fd5b600080fd5b6000819050919050565b611f5b81611f48565b8114611f6657600080fd5b50565b600081359050611f7881611f52565b92915050565b600060208284031215611f9457611f93611f3e565b5b6000611fa284828501611f69565b91505092915050565b611fb481611f48565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611fe582611fba565b9050919050565b611ff581611fda565b82525050565b600061200682611fba565b9050919050565b61201681611ffb565b82525050565b6000819050919050565b61202f8161201c565b82525050565b60008115159050919050565b61204a81612035565b82525050565b600061010082019050612066600083018b611fab565b612073602083018a611fab565b6120806040830189611fec565b61208d606083018861200d565b61209a608083018761200d565b6120a760a083018661200d565b6120b460c0830185612026565b6120c160e0830184612041565b9998505050505050505050565b6120d781612035565b81146120e257600080fd5b50565b6000813590506120f4816120ce565b92915050565b6000806040838503121561211157612110611f3e565b5b600061211f85828601611f69565b9250506020612130858286016120e5565b9150509250929050565b6121438161201c565b811461214e57600080fd5b50565b6000813590506121608161213a565b92915050565b6000806040838503121561217d5761217c611f3e565b5b600061218b85828601612151565b925050602061219c85828601612151565b9150509250929050565b60006020820190506121bb6000830184612026565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6121f681611f48565b82525050565b61220581611fda565b82525050565b61221481611ffb565b82525050565b6122238161201c565b82525050565b61223281612035565b82525050565b6101008201600082015161224f60008501826121ed565b50602082015161226260208501826121ed565b50604082015161227560408501826121fc565b506060820151612288606085018261220b565b50608082015161229b608085018261220b565b5060a08201516122ae60a085018261220b565b5060c08201516122c160c085018261221a565b5060e08201516122d460e0850182612229565b50505050565b60006122e68383612238565b6101008301905092915050565b6000602082019050919050565b600061230b826121c1565b61231581856121cc565b9350612320836121dd565b8060005b8381101561235157815161233888826122da565b9750612343836122f3565b925050600181019050612324565b5085935050505092915050565b600060208201905081810360008301526123788184612300565b905092915050565b61238981611ffb565b811461239457600080fd5b50565b6000813590506123a681612380565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126123d1576123d06123ac565b5b8235905067ffffffffffffffff8111156123ee576123ed6123b1565b5b60208301915083600182028301111561240a576124096123b6565b5b9250929050565b60008060008060006080868803121561242d5761242c611f3e565b5b600061243b88828901611f69565b955050602061244c88828901612151565b945050604061245d88828901612397565b935050606086013567ffffffffffffffff81111561247e5761247d611f43565b5b61248a888289016123bb565b92509250509295509295909350565b60006060820190506124ae6000830186612026565b6124bb6020830185612026565b6124c86040830184612026565b949350505050565b6000602082840312156124e6576124e5611f3e565b5b60006124f4848285016120e5565b91505092915050565b6000806040838503121561251457612513611f3e565b5b600061252285828601612397565b925050602061253385828601612151565b9150509250929050565b60006020828403121561255357612552611f3e565b5b600061256184828501612151565b91505092915050565b600060208201905061257f6000830184611fab565b92915050565b61258e81611fda565b811461259957600080fd5b50565b6000813590506125ab81612585565b92915050565b600080600080600080600060e0888a0312156125d0576125cf611f3e565b5b60006125de8a828b01611f69565b97505060206125ef8a828b01611f69565b96505060406126008a828b0161259c565b95505060606126118a828b01612397565b94505060806126228a828b01612397565b93505060a06126338a828b01612397565b92505060c06126448a828b016120e5565b91505092959891949750929550565b6000602082019050612668600083018461200d565b92915050565b60006020828403121561268457612683611f3e565b5b600061269284828501612397565b91505092915050565b60008083601f8401126126b1576126b06123ac565b5b8235905067ffffffffffffffff8111156126ce576126cd6123b1565b5b6020830191508360208202830111156126ea576126e96123b6565b5b9250929050565b6000806020838503121561270857612707611f3e565b5b600083013567ffffffffffffffff81111561272657612725611f43565b5b6127328582860161269b565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156127a4578082015181840152602081019050612789565b60008484015250505050565b6000601f19601f8301169050919050565b60006127cc8261276a565b6127d68185612775565b93506127e6818560208601612786565b6127ef816127b0565b840191505092915050565b600061280683836127c1565b905092915050565b6000602082019050919050565b60006128268261273e565b6128308185612749565b9350836020820285016128428561275a565b8060005b8581101561287e578484038952815161285f85826127fa565b945061286a8361280e565b925060208a01995050600181019050612846565b50829750879550505050505092915050565b600060208201905081810360008301526128aa818461281b565b905092915050565b600082825260208201905092915050565b7f426f7446693a53776170456e67696e6523656e61626c65526f757465723a204960008201527f4e56414c49445f524f5554450000000000000000000000000000000000000000602082015250565b600061291f602c836128b2565b915061292a826128c3565b604082019050919050565b6000602082019050818103600083015261294e81612912565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061298f8261201c565b915061299a8361201c565b92508282026129a88161201c565b915082820484148315176129bf576129be612955565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612a008261201c565b9150612a0b8361201c565b925082612a1b57612a1a6129c6565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612a8f8261201c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612ac157612ac0612955565b5b600182019050919050565b600082825260208201905092915050565b82818337600083830152505050565b6000612af88385612acc565b9350612b05838584612add565b612b0e836127b0565b840190509392505050565b6000608082019050612b2e6000830188611fab565b612b3b6020830187612026565b612b48604083018661200d565b8181036060830152612b5b818486612aec565b90509695505050505050565b7f426f7446692353776170456e67696e652376616c6964617465526f757465723a60008201527f20554e4b4e4f574e5f524f555445525f49440000000000000000000000000000602082015250565b6000612bc36032836128b2565b9150612bce82612b67565b604082019050919050565b60006020820190508181036000830152612bf281612bb6565b9050919050565b7f426f7446692353776170456e67696e652376616c6964617465526f757465723a60008201527f20524f555445525f4e4f545f454e41424c454400000000000000000000000000602082015250565b6000612c556033836128b2565b9150612c6082612bf9565b604082019050919050565b60006020820190508181036000830152612c8481612c48565b9050919050565b7f426f74466923737761704e6f745061757365643a20535741505f504155534544600082015250565b6000612cc16020836128b2565b9150612ccc82612c8b565b602082019050919050565b60006020820190508181036000830152612cf081612cb4565b9050919050565b7f426f74466923537761703a2020554e535550504f525445445f44455800000000600082015250565b6000612d2d601c836128b2565b9150612d3882612cf7565b602082019050919050565b60006020820190508181036000830152612d5c81612d20565b9050919050565b7f426f74466923537761703a20205041594c4f41445f5245515549524544000000600082015250565b6000612d99601d836128b2565b9150612da482612d63565b602082019050919050565b60006020820190508181036000830152612dc881612d8c565b9050919050565b7f426f74466923537761703a20205a45524f5f544f4b454e415f41444452000000600082015250565b6000612e05601d836128b2565b9150612e1082612dcf565b602082019050919050565b60006020820190508181036000830152612e3481612df8565b9050919050565b7f426f74466923537761703a20494e53554646494349454e545f42414c414e4345600082015250565b6000612e716020836128b2565b9150612e7c82612e3b565b602082019050919050565b60006020820190508181036000830152612ea081612e64565b9050919050565b6000612eb28261201c565b9150612ebd8361201c565b9250828203905081811115612ed557612ed4612955565b5b92915050565b6000604082019050612ef0600083018561200d565b612efd6020830184612026565b9392505050565b600081519050612f13816120ce565b92915050565b600060208284031215612f2f57612f2e611f3e565b5b6000612f3d84828501612f04565b91505092915050565b7f426f7446692353776170456e67696e653a20544f4b454e415f415050524f564160008201527f4c5f4641494c4544000000000000000000000000000000000000000000000000602082015250565b6000612fa26028836128b2565b9150612fad82612f46565b604082019050919050565b60006020820190508181036000830152612fd181612f95565b9050919050565b600060a082019050612fed6000830188611fab565b612ffa6020830187612026565b613007604083018661200d565b6130146060830185612026565b613021608083018461200d565b9695505050505050565b7f426f7446692353776170456e67696e6523616464526f757465723a205a45524f60008201527f5f524f555445525f414444524553530000000000000000000000000000000000602082015250565b6000613087602f836128b2565b91506130928261302b565b604082019050919050565b600060208201905081810360008301526130b68161307a565b9050919050565b7f426f7446692353776170456e67696e6523616464526f757465723a20524f555460008201527f45525f4e4f545f415f434f4e5452414354000000000000000000000000000000602082015250565b60006131196031836128b2565b9150613124826130bd565b604082019050919050565b600060208201905081810360008301526131488161310c565b9050919050565b7f426f7446692353776170456e67696e6523616464526f757465723a204641435460008201527f4f52595f4e4f545f415f434f4e54524143540000000000000000000000000000602082015250565b60006131ab6032836128b2565b91506131b68261314f565b604082019050919050565b600060208201905081810360008301526131da8161319e565b9050919050565b7f426f7446692353776170456e67696e6523616464526f757465723a205745544860008201527f5f4e4f545f415f434f4e54524143540000000000000000000000000000000000602082015250565b600061323d602f836128b2565b9150613248826131e1565b604082019050919050565b6000602082019050818103600083015261326c81613230565b9050919050565b7f426f7446692353776170456e67696e6523616464526f757465723a2051554f5460008201527f45525f4e4f545f415f434f4e5452414354000000000000000000000000000000602082015250565b60006132cf6031836128b2565b91506132da82613273565b604082019050919050565b600060208201905081810360008301526132fe816132c2565b9050919050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261333157613330613305565b5b80840192508235915067ffffffffffffffff8211156133535761335261330a565b5b60208301925060018202360383131561336f5761336e61330f565b5b509250929050565b600081905092915050565b600061338d8261276a565b6133978185613377565b93506133a7818560208601612786565b80840191505092915050565b60006133bf8284613382565b915081905092915050565b7f426f744669235472616e7366657248656c7065723a204554485f5452414e534660008201527f45525f4641494c45440000000000000000000000000000000000000000000000602082015250565b60006134266029836128b2565b9150613431826133ca565b604082019050919050565b6000602082019050818103600083015261345581613419565b9050919050565b6000606082019050613471600083018661200d565b61347e602083018561200d565b61348b6040830184612026565b949350505050565b7f426f744669235472616e7366657248656c7065723a20544f4b454e5f5452414e60008201527f534645525f4641494c4544000000000000000000000000000000000000000000602082015250565b60006134ef602b836128b2565b91506134fa82613493565b604082019050919050565b6000602082019050818103600083015261351e816134e2565b905091905056fea26469706673582212202d4241c817967a8ce8111483a1015f8671416da87a06446c71ee1f888eed84a464736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100f75760003560e01c8063715018a61161008a5780638da5cb5b116100595780638da5cb5b1461031b57806390d49b9d14610346578063ac9650d81461036f578063f2fde38b146103ac576100fe565b8063715018a614610275578063787dce3d1461028c5780637c249d29146102b55780638ca78528146102f2576100fe565b806338395a9d116100c657806338395a9d146101d557806339691ed9146102075780636ea056a9146102305780636f8e617614610259576100fe565b8063066e9481146101005780630dd3ca83146101445780631b80b5101461016d5780631f696924146101aa576100fe565b366100fe57005b005b34801561010c57600080fd5b5061012760048036038101906101229190611f7e565b6103d5565b60405161013b989796959493929190612050565b60405180910390f35b34801561015057600080fd5b5061016b600480360381019061016691906120fa565b6104aa565b005b34801561017957600080fd5b50610194600480360381019061018f9190612166565b610535565b6040516101a191906121a6565b60405180910390f35b3480156101b657600080fd5b506101bf610572565b6040516101cc919061235e565b60405180910390f35b6101ef60048036038101906101ea9190612411565b6107e2565b6040516101fe93929190612499565b60405180910390f35b34801561021357600080fd5b5061022e600480360381019061022991906124d0565b61087b565b005b34801561023c57600080fd5b50610257600480360381019061025291906124fd565b6108a0565b005b610273600480360381019061026e9190612411565b6108bf565b005b34801561028157600080fd5b5061028a6110be565b005b34801561029857600080fd5b506102b360048036038101906102ae919061253d565b6110d2565b005b3480156102c157600080fd5b506102dc60048036038101906102d7919061253d565b6110e6565b6040516102e9919061256a565b60405180910390f35b3480156102fe57600080fd5b50610319600480360381019061031491906125b1565b61110a565b005b34801561032757600080fd5b50610330611559565b60405161033d9190612653565b60405180910390f35b34801561035257600080fd5b5061036d6004803603810190610368919061266e565b611583565b005b34801561037b57600080fd5b50610396600480360381019061039191906126f1565b611597565b6040516103a39190612890565b60405180910390f35b3480156103b857600080fd5b506103d360048036038101906103ce919061266e565b6116a3565b005b60036020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060154908060070160009054906101000a900460ff16905088565b6000600360008481526020019081526020016000206006015411610503576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fa90612935565b60405180910390fd5b806003600084815260200190815260200160002060070160006101000a81548160ff0219169083151502179055505050565b600061271082846105469190612984565b101561055157600080fd5b61271082846105609190612984565b61056a91906129f5565b905092915050565b606060048054905067ffffffffffffffff81111561059357610592612a26565b5b6040519080825280602002602001820160405280156105cc57816020015b6105b9611e99565b8152602001906001900390816105b15790505b50905060005b6004805490508110156107de5760036000600483815481106105f7576105f6612a55565b5b906000526020600020015481526020019081526020016000206040518061010001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682015481526020016007820160009054906101000a900460ff1615151515815250508282815181106107c0576107bf612a55565b5b602002602001018190525080806107d690612a84565b9150506105d2565b5090565b6000806000805a90503073ffffffffffffffffffffffffffffffffffffffff16636f8e61768a8a8a8a8a6040518663ffffffff1660e01b815260040161082c959493929190612b19565b600060405180830381600087803b15801561084657600080fd5b505af115801561085a573d6000803e3d6000fd5b5050505060005a82039050803a459450945094505050955095509592505050565b610883611729565b80600760006101000a81548160ff02191690831515021790555050565b6108a8611729565b6108bb82306108b56117b0565b846117b8565b5050565b846000600360008381526020019081526020016000206006015411610919576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091090612bd9565b60405180910390fd5b6003600082815260200190815260200160002060070160009054906101000a900460ff1661097c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097390612c6b565b60405180910390fd5b610984611821565b600760009054906101000a900460ff16156109d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cb90612cd7565b60405180910390fd5b6000600360008881526020019081526020016000206040518061010001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682015481526020016007820160009054906101000a900460ff161515151581525050905060008160c0015111610bcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc690612d43565b60405180910390fd5b60008484905011610c15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0c90612daf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610c84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7b90612e1b565b60405180910390fd5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610d1257853414610d0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0490612e87565b60405180910390fd5b610d26565b610d2585610d1e6117b0565b30896117b8565b5b600081604001519050600080600080541115610d9257610d4889600054610535565b90508089610d569190612ea7565b9150610d8d88610d646117b0565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846117b8565b610d96565b8891505b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16148015610deb5750600254846020015114155b15610e6557610e5f87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050838573ffffffffffffffffffffffffffffffffffffffff166118679092919063ffffffff16565b50611062565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16148015610ebb57506002548560200151145b15610f3157846080015173ffffffffffffffffffffffffffffffffffffffff1663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b158015610f0c57600080fd5b505af1158015610f20573d6000803e3d6000fd5b505050505084608001519050610f35565b8890505b8073ffffffffffffffffffffffffffffffffffffffff1663095ea7b385856040518363ffffffff1660e01b8152600401610f70929190612edb565b6020604051808303816000875af1158015610f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb39190612f19565b610ff2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe990612fb8565b60405180910390fd5b61105f88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508573ffffffffffffffffffffffffffffffffffffffff1661193490919063ffffffff16565b50505b7fa1cf747ad001476b442e3c9c4a2b2180fbc1b3a710b44c90e2f2d23d2f2710c28a8a8a6000546110916117b0565b6040516110a2959493929190612fd8565b60405180910390a1505050506110b661194a565b505050505050565b6110c6611729565b6110d06000611954565b565b6110da611729565b6110e381611a1a565b50565b600481815481106110f657600080fd5b906000526020600020016000915090505481565b611112611729565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603611181576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111789061309d565b60405180910390fd5b61118a85611a5b565b6111c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c09061312f565b60405180910390fd5b6111d284611a5b565b611211576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611208906131c1565b60405180910390fd5b61121a83611a5b565b611259576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125090613253565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146112d65761129682611a5b565b6112d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cc906132e5565b60405180910390fd5b5b600080600360008a81526020019081526020016000206006015414905060008161131657600360008a815260200190815260200160002060060154611318565b425b90506040518061010001604052808a81526020018981526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001828152602001841515815250600360008b8152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c0820151816006015560e08201518160070160006101000a81548160ff021916908315150217905550905050811561154e5760048990806001815401808255809150506001900390600052602060002001600090919091909150555b505050505050505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61158b611729565b61159481611a6e565b50565b60608282905067ffffffffffffffff8111156115b6576115b5612a26565b5b6040519080825280602002602001820160405280156115e957816020015b60608152602001906001900390816115d45790505b50905060005b8383905081101561169c5761166b3085858481811061161157611610612a55565b5b90506020028101906116239190613314565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611ae9565b82828151811061167e5761167d612a55565b5b6020026020010181905250808061169490612a84565b9150506115ef565b5092915050565b6116ab611729565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361171d5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016117149190612653565b60405180910390fd5b61172681611954565b50565b6117316117b0565b73ffffffffffffffffffffffffffffffffffffffff1661174f611559565b73ffffffffffffffffffffffffffffffffffffffff16146117ae576117726117b0565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016117a59190612653565b60405180910390fd5b565b600033905090565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361180e576118098282611b6d565b61181b565b61181a84848484611c6d565b5b50505050565b60026006540361185d576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600681905550565b6060814710156118ae57306040517fcd7860590000000000000000000000000000000000000000000000000000000081526004016118a59190612653565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1684866040516118d791906133b3565b60006040518083038185875af1925050503d8060008114611914576040519150601f19603f3d011682016040523d82523d6000602084013e611919565b606091505b5091509150611929868383611dc5565b925050509392505050565b606061194283836000611867565b905092915050565b6001600681905550565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b806000819055507fdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b181604051611a5091906121a6565b60405180910390a150565b600080823b905060008111915050919050565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3d21e5a2b633291bd1ff5f9c654e402d063783c95759d2ea521b31fb30e4da4181604051611ade9190612653565b60405180910390a150565b60606000808473ffffffffffffffffffffffffffffffffffffffff1684604051611b1391906133b3565b600060405180830381855af49150503d8060008114611b4e576040519150601f19603f3d011682016040523d82523d6000602084013e611b53565b606091505b5091509150611b63858383611dc5565b9250505092915050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811115611ba257611ba1612a26565b5b6040519080825280601f01601f191660200182016040528015611bd45781602001600182028036833780820191505090505b50604051611be291906133b3565b60006040518083038185875af1925050503d8060008114611c1f576040519150601f19603f3d011682016040523d82523d6000602084013e611c24565b606091505b5050905080611c68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5f9061343c565b60405180910390fd5b505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b868686604051602401611ca49392919061345c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611d0e91906133b3565b6000604051808303816000865af19150503d8060008114611d4b576040519150601f19603f3d011682016040523d82523d6000602084013e611d50565b606091505b5091509150818015611d7e5750600081511480611d7d575080806020019051810190611d7c9190612f19565b5b5b611dbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db490613505565b60405180910390fd5b505050505050565b606082611dda57611dd582611e54565b611e4c565b60008251148015611e02575060008473ffffffffffffffffffffffffffffffffffffffff163b145b15611e4457836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401611e3b9190612653565b60405180910390fd5b819050611e4d565b5b9392505050565b600081511115611e675780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518061010001604052806000801916815260200160008019168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b600080fd5b600080fd5b6000819050919050565b611f5b81611f48565b8114611f6657600080fd5b50565b600081359050611f7881611f52565b92915050565b600060208284031215611f9457611f93611f3e565b5b6000611fa284828501611f69565b91505092915050565b611fb481611f48565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611fe582611fba565b9050919050565b611ff581611fda565b82525050565b600061200682611fba565b9050919050565b61201681611ffb565b82525050565b6000819050919050565b61202f8161201c565b82525050565b60008115159050919050565b61204a81612035565b82525050565b600061010082019050612066600083018b611fab565b612073602083018a611fab565b6120806040830189611fec565b61208d606083018861200d565b61209a608083018761200d565b6120a760a083018661200d565b6120b460c0830185612026565b6120c160e0830184612041565b9998505050505050505050565b6120d781612035565b81146120e257600080fd5b50565b6000813590506120f4816120ce565b92915050565b6000806040838503121561211157612110611f3e565b5b600061211f85828601611f69565b9250506020612130858286016120e5565b9150509250929050565b6121438161201c565b811461214e57600080fd5b50565b6000813590506121608161213a565b92915050565b6000806040838503121561217d5761217c611f3e565b5b600061218b85828601612151565b925050602061219c85828601612151565b9150509250929050565b60006020820190506121bb6000830184612026565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6121f681611f48565b82525050565b61220581611fda565b82525050565b61221481611ffb565b82525050565b6122238161201c565b82525050565b61223281612035565b82525050565b6101008201600082015161224f60008501826121ed565b50602082015161226260208501826121ed565b50604082015161227560408501826121fc565b506060820151612288606085018261220b565b50608082015161229b608085018261220b565b5060a08201516122ae60a085018261220b565b5060c08201516122c160c085018261221a565b5060e08201516122d460e0850182612229565b50505050565b60006122e68383612238565b6101008301905092915050565b6000602082019050919050565b600061230b826121c1565b61231581856121cc565b9350612320836121dd565b8060005b8381101561235157815161233888826122da565b9750612343836122f3565b925050600181019050612324565b5085935050505092915050565b600060208201905081810360008301526123788184612300565b905092915050565b61238981611ffb565b811461239457600080fd5b50565b6000813590506123a681612380565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126123d1576123d06123ac565b5b8235905067ffffffffffffffff8111156123ee576123ed6123b1565b5b60208301915083600182028301111561240a576124096123b6565b5b9250929050565b60008060008060006080868803121561242d5761242c611f3e565b5b600061243b88828901611f69565b955050602061244c88828901612151565b945050604061245d88828901612397565b935050606086013567ffffffffffffffff81111561247e5761247d611f43565b5b61248a888289016123bb565b92509250509295509295909350565b60006060820190506124ae6000830186612026565b6124bb6020830185612026565b6124c86040830184612026565b949350505050565b6000602082840312156124e6576124e5611f3e565b5b60006124f4848285016120e5565b91505092915050565b6000806040838503121561251457612513611f3e565b5b600061252285828601612397565b925050602061253385828601612151565b9150509250929050565b60006020828403121561255357612552611f3e565b5b600061256184828501612151565b91505092915050565b600060208201905061257f6000830184611fab565b92915050565b61258e81611fda565b811461259957600080fd5b50565b6000813590506125ab81612585565b92915050565b600080600080600080600060e0888a0312156125d0576125cf611f3e565b5b60006125de8a828b01611f69565b97505060206125ef8a828b01611f69565b96505060406126008a828b0161259c565b95505060606126118a828b01612397565b94505060806126228a828b01612397565b93505060a06126338a828b01612397565b92505060c06126448a828b016120e5565b91505092959891949750929550565b6000602082019050612668600083018461200d565b92915050565b60006020828403121561268457612683611f3e565b5b600061269284828501612397565b91505092915050565b60008083601f8401126126b1576126b06123ac565b5b8235905067ffffffffffffffff8111156126ce576126cd6123b1565b5b6020830191508360208202830111156126ea576126e96123b6565b5b9250929050565b6000806020838503121561270857612707611f3e565b5b600083013567ffffffffffffffff81111561272657612725611f43565b5b6127328582860161269b565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156127a4578082015181840152602081019050612789565b60008484015250505050565b6000601f19601f8301169050919050565b60006127cc8261276a565b6127d68185612775565b93506127e6818560208601612786565b6127ef816127b0565b840191505092915050565b600061280683836127c1565b905092915050565b6000602082019050919050565b60006128268261273e565b6128308185612749565b9350836020820285016128428561275a565b8060005b8581101561287e578484038952815161285f85826127fa565b945061286a8361280e565b925060208a01995050600181019050612846565b50829750879550505050505092915050565b600060208201905081810360008301526128aa818461281b565b905092915050565b600082825260208201905092915050565b7f426f7446693a53776170456e67696e6523656e61626c65526f757465723a204960008201527f4e56414c49445f524f5554450000000000000000000000000000000000000000602082015250565b600061291f602c836128b2565b915061292a826128c3565b604082019050919050565b6000602082019050818103600083015261294e81612912565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061298f8261201c565b915061299a8361201c565b92508282026129a88161201c565b915082820484148315176129bf576129be612955565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612a008261201c565b9150612a0b8361201c565b925082612a1b57612a1a6129c6565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612a8f8261201c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612ac157612ac0612955565b5b600182019050919050565b600082825260208201905092915050565b82818337600083830152505050565b6000612af88385612acc565b9350612b05838584612add565b612b0e836127b0565b840190509392505050565b6000608082019050612b2e6000830188611fab565b612b3b6020830187612026565b612b48604083018661200d565b8181036060830152612b5b818486612aec565b90509695505050505050565b7f426f7446692353776170456e67696e652376616c6964617465526f757465723a60008201527f20554e4b4e4f574e5f524f555445525f49440000000000000000000000000000602082015250565b6000612bc36032836128b2565b9150612bce82612b67565b604082019050919050565b60006020820190508181036000830152612bf281612bb6565b9050919050565b7f426f7446692353776170456e67696e652376616c6964617465526f757465723a60008201527f20524f555445525f4e4f545f454e41424c454400000000000000000000000000602082015250565b6000612c556033836128b2565b9150612c6082612bf9565b604082019050919050565b60006020820190508181036000830152612c8481612c48565b9050919050565b7f426f74466923737761704e6f745061757365643a20535741505f504155534544600082015250565b6000612cc16020836128b2565b9150612ccc82612c8b565b602082019050919050565b60006020820190508181036000830152612cf081612cb4565b9050919050565b7f426f74466923537761703a2020554e535550504f525445445f44455800000000600082015250565b6000612d2d601c836128b2565b9150612d3882612cf7565b602082019050919050565b60006020820190508181036000830152612d5c81612d20565b9050919050565b7f426f74466923537761703a20205041594c4f41445f5245515549524544000000600082015250565b6000612d99601d836128b2565b9150612da482612d63565b602082019050919050565b60006020820190508181036000830152612dc881612d8c565b9050919050565b7f426f74466923537761703a20205a45524f5f544f4b454e415f41444452000000600082015250565b6000612e05601d836128b2565b9150612e1082612dcf565b602082019050919050565b60006020820190508181036000830152612e3481612df8565b9050919050565b7f426f74466923537761703a20494e53554646494349454e545f42414c414e4345600082015250565b6000612e716020836128b2565b9150612e7c82612e3b565b602082019050919050565b60006020820190508181036000830152612ea081612e64565b9050919050565b6000612eb28261201c565b9150612ebd8361201c565b9250828203905081811115612ed557612ed4612955565b5b92915050565b6000604082019050612ef0600083018561200d565b612efd6020830184612026565b9392505050565b600081519050612f13816120ce565b92915050565b600060208284031215612f2f57612f2e611f3e565b5b6000612f3d84828501612f04565b91505092915050565b7f426f7446692353776170456e67696e653a20544f4b454e415f415050524f564160008201527f4c5f4641494c4544000000000000000000000000000000000000000000000000602082015250565b6000612fa26028836128b2565b9150612fad82612f46565b604082019050919050565b60006020820190508181036000830152612fd181612f95565b9050919050565b600060a082019050612fed6000830188611fab565b612ffa6020830187612026565b613007604083018661200d565b6130146060830185612026565b613021608083018461200d565b9695505050505050565b7f426f7446692353776170456e67696e6523616464526f757465723a205a45524f60008201527f5f524f555445525f414444524553530000000000000000000000000000000000602082015250565b6000613087602f836128b2565b91506130928261302b565b604082019050919050565b600060208201905081810360008301526130b68161307a565b9050919050565b7f426f7446692353776170456e67696e6523616464526f757465723a20524f555460008201527f45525f4e4f545f415f434f4e5452414354000000000000000000000000000000602082015250565b60006131196031836128b2565b9150613124826130bd565b604082019050919050565b600060208201905081810360008301526131488161310c565b9050919050565b7f426f7446692353776170456e67696e6523616464526f757465723a204641435460008201527f4f52595f4e4f545f415f434f4e54524143540000000000000000000000000000602082015250565b60006131ab6032836128b2565b91506131b68261314f565b604082019050919050565b600060208201905081810360008301526131da8161319e565b9050919050565b7f426f7446692353776170456e67696e6523616464526f757465723a205745544860008201527f5f4e4f545f415f434f4e54524143540000000000000000000000000000000000602082015250565b600061323d602f836128b2565b9150613248826131e1565b604082019050919050565b6000602082019050818103600083015261326c81613230565b9050919050565b7f426f7446692353776170456e67696e6523616464526f757465723a2051554f5460008201527f45525f4e4f545f415f434f4e5452414354000000000000000000000000000000602082015250565b60006132cf6031836128b2565b91506132da82613273565b604082019050919050565b600060208201905081810360008301526132fe816132c2565b9050919050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261333157613330613305565b5b80840192508235915067ffffffffffffffff8211156133535761335261330a565b5b60208301925060018202360383131561336f5761336e61330f565b5b509250929050565b600081905092915050565b600061338d8261276a565b6133978185613377565b93506133a7818560208601612786565b80840191505092915050565b60006133bf8284613382565b915081905092915050565b7f426f744669235472616e7366657248656c7065723a204554485f5452414e534660008201527f45525f4641494c45440000000000000000000000000000000000000000000000602082015250565b60006134266029836128b2565b9150613431826133ca565b604082019050919050565b6000602082019050818103600083015261345581613419565b9050919050565b6000606082019050613471600083018661200d565b61347e602083018561200d565b61348b6040830184612026565b949350505050565b7f426f744669235472616e7366657248656c7065723a20544f4b454e5f5452414e60008201527f534645525f4641494c4544000000000000000000000000000000000000000000602082015250565b60006134ef602b836128b2565b91506134fa82613493565b604082019050919050565b6000602082019050818103600083015261351e816134e2565b905091905056fea26469706673582212202d4241c817967a8ce8111483a1015f8671416da87a06446c71ee1f888eed84a464736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addRoute(bytes32,bytes32,address,address,address,address,bool)": {
        "details": "addRouter add a router params",
        "params": {
          "enabled": "is the router enabled or not",
          "factory": "the factory address",
          "group": "router group - uni_v2, uni_v3 ....",
          "id": "router id",
          "quoter": "swap quoter ",
          "router": "the router address ",
          "weth": "wrapped ether or wrapped native token"
        }
      },
      "calPercentage(uint256,uint256)": {
        "details": "convert percentage in basis point of a value ",
        "params": {
          "amount": "the amount to be calculated on",
          "bps": "percentage value in basis point"
        }
      },
      "enableRoute(bytes32,bool)": {
        "details": "enable or disable a route",
        "params": {
          "id": "the router id",
          "opt": "true or false"
        }
      },
      "getAllRoutes()": {
        "details": "getAllRoutes get all the routers returns array "
      },
      "multicall(bytes[])": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pauseSwap(bool)": {
        "details": "pause the swap operation for the contract",
        "params": {
          "opt": "true or false "
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setFeeWallet(address)": {
        "details": "set the address for taking the protocol fees",
        "params": {
          "addr": "the fee in percentage basis point"
        }
      },
      "setProtocolFee(uint256)": {
        "details": "protocol fee in basis point",
        "params": {
          "_feeBps": "the fee in percentage basis point"
        }
      },
      "swap(bytes32,uint256,address,bytes)": {
        "details": "perform a swap",
        "params": {
          "amount": "the total amount without the protocol fee for the swap",
          "payload": "the encoded swap data to foward to the router",
          "routeId": "the identifier of the router to use",
          "tokenA": "the token to swap into another token (tokenB)"
        }
      },
      "sweep(address,uint256)": {
        "details": "withdraw any stucked tokens in the contract",
        "params": {
          "amount": "the amount to move out",
          "token": "the token address to withdraw"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getSwapGasInfo(bytes32,uint256,address,bytes)": {
        "notice": "getSwapGasFee"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 749,
        "contract": "contracts/Factory.sol:Factory",
        "label": "PROTOCOL_FEE",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 751,
        "contract": "contracts/Factory.sol:Factory",
        "label": "FEE_WALLET",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 757,
        "contract": "contracts/Factory.sol:Factory",
        "label": "UNI_V3",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 765,
        "contract": "contracts/Factory.sol:Factory",
        "label": "routes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(RouteParams)785_storage)"
      },
      {
        "astId": 768,
        "contract": "contracts/Factory.sol:Factory",
        "label": "routesIds",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 8,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 571,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_status",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 989,
        "contract": "contracts/Factory.sol:Factory",
        "label": "isPaused",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(RouteParams)785_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Defs.RouteParams)",
        "numberOfBytes": "32",
        "value": "t_struct(RouteParams)785_storage"
      },
      "t_struct(RouteParams)785_storage": {
        "encoding": "inplace",
        "label": "struct Defs.RouteParams",
        "members": [
          {
            "astId": 770,
            "contract": "contracts/Factory.sol:Factory",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 772,
            "contract": "contracts/Factory.sol:Factory",
            "label": "group",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 774,
            "contract": "contracts/Factory.sol:Factory",
            "label": "router",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 776,
            "contract": "contracts/Factory.sol:Factory",
            "label": "factory",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 778,
            "contract": "contracts/Factory.sol:Factory",
            "label": "weth",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 780,
            "contract": "contracts/Factory.sol:Factory",
            "label": "quoter",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 782,
            "contract": "contracts/Factory.sol:Factory",
            "label": "createdAt",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 784,
            "contract": "contracts/Factory.sol:Factory",
            "label": "enabled",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
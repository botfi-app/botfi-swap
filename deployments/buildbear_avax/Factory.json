{
  "address": "0xc9402e0A0c4C1fC9756B29C4bdE9670462e03e99",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "feeWallet",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetFeeWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "SetProtocolFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "routerId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeBps",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "quoter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "addRoute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bps",
          "type": "uint256"
        }
      ],
      "name": "calPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "opt",
          "type": "bool"
        }
      ],
      "name": "enableRoute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRoutes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "group",
              "type": "bytes32"
            },
            {
              "internalType": "address payable",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "weth",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "quoter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            }
          ],
          "internalType": "struct Defs.RouteParams[]",
          "name": "rp",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "opt",
          "type": "bool"
        }
      ],
      "name": "pauseSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "routes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "quoter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "routesIds",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setFeeWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeBps",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "routeId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x35816edaa167aadc9b2b5d8e836f4d91d53bd20f0c05a9357d504d4941b3a040",
  "receipt": {
    "to": null,
    "from": "0xc3490a43FF5825F34f714fd52697f2Ed2c7D44F8",
    "contractAddress": "0xc9402e0A0c4C1fC9756B29C4bdE9670462e03e99",
    "transactionIndex": 0,
    "gasUsed": "3043355",
    "logsBloom": "0x
    "blockHash": "0x9acbdf46e0f57dd249d850dbe1966a8ca1ed7ace6cca6869ef823e81a9d39be5",
    "transactionHash": "0x35816edaa167aadc9b2b5d8e836f4d91d53bd20f0c05a9357d504d4941b3a040",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 38034265,
        "transactionHash": "0x35816edaa167aadc9b2b5d8e836f4d91d53bd20f0c05a9357d504d4941b3a040",
        "address": "0xc9402e0A0c4C1fC9756B29C4bdE9670462e03e99",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c3490a43ff5825f34f714fd52697f2ed2c7d44f8"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9acbdf46e0f57dd249d850dbe1966a8ca1ed7ace6cca6869ef823e81a9d39be5"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 38034265,
        "transactionHash": "0x35816edaa167aadc9b2b5d8e836f4d91d53bd20f0c05a9357d504d4941b3a040",
        "address": "0xc9402e0A0c4C1fC9756B29C4bdE9670462e03e99",
        "topics": [
          "0xdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b1"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000050",
        "logIndex": 1,
        "blockHash": "0x9acbdf46e0f57dd249d850dbe1966a8ca1ed7ace6cca6869ef823e81a9d39be5"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 38034265,
        "transactionHash": "0x35816edaa167aadc9b2b5d8e836f4d91d53bd20f0c05a9357d504d4941b3a040",
        "address": "0xc9402e0A0c4C1fC9756B29C4bdE9670462e03e99",
        "topics": [
          "0x3d21e5a2b633291bd1ff5f9c654e402d063783c95759d2ea521b31fb30e4da41"
        ],
        "data": "0x00000000000000000000000092c9e17a2f02b2119350f3e90918bed3c6e24f3c",
        "logIndex": 2,
        "blockHash": "0x9acbdf46e0f57dd249d850dbe1966a8ca1ed7ace6cca6869ef823e81a9d39be5"
      }
    ],
    "blockNumber": 38034265,
    "cumulativeGasUsed": "3043355",
    "status": 1,
    "byzantium": true
  },
  "args": [
    80,
    "0x92c9E17a2f02b2119350F3E90918bEd3c6e24F3c"
  ],
  "numDeployments": 1,
  "solcInputHash": "564de3a184eab57a84762566d68a14b7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetFeeWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SetProtocolFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"routerId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"addRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"calPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"opt\",\"type\":\"bool\"}],\"name\":\"enableRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRoutes\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"struct Defs.RouteParams[]\",\"name\":\"rp\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"opt\",\"type\":\"bool\"}],\"name\":\"pauseSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"routes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"routesIds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeBps\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"routeId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"addRoute(bytes32,bytes32,address,address,address,address,bool)\":{\"details\":\"addRouter add a router params\",\"params\":{\"enabled\":\"is the router enabled or not\",\"factory\":\"the factory address\",\"group\":\"router group - uni_v2, uni_v3 ....\",\"id\":\"router id\",\"quoter\":\"swap quoter \",\"router\":\"the router address \",\"weth\":\"wrapped ether or wrapped native token\"}},\"calPercentage(uint256,uint256)\":{\"details\":\"convert percentage in basis point of a value \",\"params\":{\"amount\":\"the amount to be calculated on\",\"bps\":\"percentage value in basis point\"}},\"enableRoute(bytes32,bool)\":{\"details\":\"enable or disable a route\",\"params\":{\"id\":\"the router id\",\"opt\":\"true or false\"}},\"getAllRoutes()\":{\"details\":\"getAllRoutes get all the routers returns array \"},\"multicall(bytes[])\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pauseSwap(bool)\":{\"details\":\"pause the swap operation for the contract\",\"params\":{\"opt\":\"true or false \"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setFeeWallet(address)\":{\"details\":\"set the address for taking the protocol fees\",\"params\":{\"addr\":\"the fee in percentage basis point\"}},\"setProtocolFee(uint256)\":{\"details\":\"protocol fee in basis point\",\"params\":{\"_feeBps\":\"the fee in percentage basis point\"}},\"swap(bytes32,uint256,address,bytes)\":{\"details\":\"perform a swap\",\"params\":{\"amount\":\"the total amount including the protocol fee for the swap\",\"payload\":\"the encoded swap data to foward to the router\",\"routeId\":\"the identifier of the router to use\",\"tokenA\":\"the token to swap into another token (tokenB)\"}},\"sweep(address,uint256)\":{\"details\":\"withdraw any stucked tokens in the contract\",\"params\":{\"amount\":\"the amount to move out\",\"token\":\"the token address to withdraw\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory.sol\":\"Factory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Address} from \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0xc5622e05d0cc837b2ab254c29566768e292847d05d230560d9886955cafe6c37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/ContractBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./base/Utils.sol\\\";\\nimport \\\"./base/Defs.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\n\\ncontract ContractBase is \\n    Defs, \\n    Context, \\n    Ownable, \\n    Multicall, \\n    ReentrancyGuard \\n{\\n\\n\\n    event SetProtocolFee(uint256);\\n    event SetFeeWallet(address addr);\\n\\n    constructor() Ownable(_msgSender()) {}\\n\\n    /**\\n     * @dev protocol fee in basis point\\n     * @param _feeBps the fee in percentage basis point\\n     */\\n    function __setProtocolFee (uint256 _feeBps)\\n        internal\\n    {\\n        PROTOCOL_FEE = _feeBps;\\n\\n        emit SetProtocolFee(_feeBps);\\n    }\\n\\n    /**\\n     * @dev protocol fee in basis point\\n     * @param _feeBps the fee in percentage basis point\\n     */\\n    function setProtocolFee(uint _feeBps)\\n        public \\n        onlyOwner \\n    {\\n        __setProtocolFee(_feeBps);\\n    }\\n\\n    \\n    function __setFeeWallet(address addr)\\n        internal \\n    {\\n        FEE_WALLET = addr;\\n        emit SetFeeWallet(addr);\\n    }\\n\\n    /**\\n     * @dev set the address for taking the protocol fees\\n     * @param addr the fee in percentage basis point\\n     */\\n    function setFeeWallet(address addr)\\n        public \\n        onlyOwner \\n    {\\n        __setFeeWallet(addr);\\n    }\\n}\\n\",\"keccak256\":\"0xef7b68c9430c0baae239ec4003845e0ad3a8738a78c96b45eaee32fcb6fd958c\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ContractBase.sol\\\";\\nimport \\\"./swap/SwapEngine.sol\\\";\\n\\ncontract Factory is ContractBase, SwapEngine {\\n\\n    constructor(\\n        uint    protocolFee,\\n        address feeWallet\\n    ) {     \\n        __setProtocolFee(protocolFee);\\n        __setFeeWallet(feeWallet);\\n    }\\n    \\n}\",\"keccak256\":\"0x394890b11ef8b34761951c491de6616cd029c0856ef14c01af97b0e27087d694\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/Defs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract Defs {\\n\\n    // the protocol fee \\n    uint PROTOCOL_FEE;\\n\\n    // the fee address, for taking fees \\n    address FEE_WALLET;\\n\\n    bytes32 UNI_V3 = bytes32(\\\"uni_v3\\\");\\n\\n    // native token \\n    address constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n\\n    // id  =>  RouteParams \\n    mapping (bytes32 => RouteParams) public routes;\\n    bytes32[] public routesIds;\\n\\n    struct RouteParams {\\n        bytes32             id;\\n        bytes32             group; //adapter name uni_v2, uni_v3 and 1inch, balancer\\n        address   payable   router;\\n        address             factory;\\n        address             weth;\\n        address             quoter;\\n        uint256             createdAt;\\n        bool                enabled; \\n    }\\n\\n    /**\\n     * @dev convert percentage in basis point of a value \\n     * @param amount the amount to be calculated on\\n     * @param bps percentage value in basis point\\n     */\\n    function calPercentage(uint amount, uint bps) \\n        public \\n        pure \\n        returns (uint256)\\n    {\\n        require((amount * bps) >= 10_000);\\n        return (amount * bps) / 10_000;\\n    }\\n\\n}\",\"keccak256\":\"0xe1335cc4f3ff1d348e277aab9c237c6470281a6d5f3e4ed27136c28aa354f54c\",\"license\":\"MIT\"},\"contracts/base/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Defs.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ncontract TransferHelper is Defs {\\n\\n    /**\\n     * @dev safeTransfer eth or token \\n     * @param token, the token contract\\n     * @param from the sender's address \\n     * @param to the recipient's address\\n     * @param value the value to send\\n    */\\n    function transferAsset(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        \\n        if(token == NATIVE_TOKEN){\\n            safeTransferETH(to, value);\\n        } else {\\n            safeTransferFrom(token, from, to, value);\\n        }\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'BotFi#TransferHelper: TOKEN_TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'BotFi#TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\",\"keccak256\":\"0x51b937555ca9f1a7622bf6c8172ee3e669fc613558d15997c9dbae4d46a552a2\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nlibrary Utils {\\n\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n}\",\"keccak256\":\"0xc362e2117b035f0117be46f04422be11297ece6ab03dcfde07db97f5cb2f9728\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/@uniswap/v3/v3-periphery/interfaces/external/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x690d65db6497ed2c20a8521d04d35033a8b7c404e97a059d2a03e05f6d5cc617\",\"license\":\"GPL-2.0-or-later\"},\"contracts/swap/SwapEngine.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ContractBase.sol\\\";\\nimport \\\"../base/TransferHelper.sol\\\";\\n//import \\\"hardhat/console.sol\\\";\\nimport \\\"../interfaces/@uniswap/v3/v3-periphery/interfaces/external/IWETH9.sol\\\";\\n\\n\\ncontract SwapEngine is \\n    TransferHelper, \\n    ContractBase\\n{\\n\\n    event Swap(\\n        bytes32 routerId, \\n        uint256 amount,\\n        address tokenA,\\n        uint    feeBps,\\n        address account  \\n    );\\n\\n    using Address for address;\\n    using Address for address payable;\\n\\n    bool private isPaused;\\n\\n    receive() external payable{}\\n    fallback() external payable{}\\n\\n    modifier notPaused() {\\n        require(!isPaused, \\\"BotFi#swapNotPaused: SWAP_PAUSED\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev addRouter add a router params\\n     * @param id       router id\\n     * @param group    router group - uni_v2, uni_v3 ....\\n     * @param router   the router address \\n     * @param factory  the factory address\\n     * @param weth     wrapped ether or wrapped native token\\n     * @param quoter  swap quoter \\n     * @param enabled  is the router enabled or not\\n     */\\n    function addRoute(\\n        bytes32             id,\\n        bytes32             group, // uni_v2, uni_v3, 1inch, ...                  \\n        address  payable    router, \\n        address             factory,\\n        address             weth,\\n        address             quoter,\\n        bool                enabled\\n    ) \\n        external \\n        onlyOwner \\n    {\\n\\n        require(router != address(0), \\\"BotFi#SwapEngine#addRouter: ZERO_ROUTER_ADDRESS\\\");\\n\\n        require(Utils.isContract(router), \\\"BotFi#SwapEngine#addRouter: ROUTER_NOT_A_CONTRACT\\\");\\n        require(Utils.isContract(factory), \\\"BotFi#SwapEngine#addRouter: FACTORY_NOT_A_CONTRACT\\\");\\n        require(Utils.isContract(weth), \\\"BotFi#SwapEngine#addRouter: WETH_NOT_A_CONTRACT\\\");\\n\\n        if(quoter != address(0)){\\n            require(Utils.isContract(quoter), \\\"BotFi#SwapEngine#addRouter: QUOTER_NOT_A_CONTRACT\\\");\\n        }\\n\\n        bool isNew = (routes[id].createdAt == 0);\\n        uint createdAt = (isNew) ? block.timestamp : routes[id].createdAt;\\n\\n\\n        routes[id] = RouteParams(\\n            id,\\n            group, \\n            router,\\n            factory,\\n            weth,\\n            quoter,\\n            createdAt,\\n            enabled\\n        );\\n\\n        if(isNew) routesIds.push(id);\\n    }\\n\\n    /**\\n     * @dev enable or disable a route\\n     * @param id the router id\\n     * @param opt true or false\\n     */\\n    function enableRoute(bytes32 id, bool opt)\\n        external\\n    {\\n        require(routes[id].createdAt > 0, \\\"BotFi:SwapEngine#enableRouter: INVALID_ROUTE\\\");\\n\\n        routes[id].enabled = opt;\\n    }\\n\\n    /**\\n     * @dev getAllRoutes get all the routers\\n     * returns array \\n     */\\n    function getAllRoutes()\\n        external\\n        view \\n        returns (RouteParams[] memory rp)\\n    {\\n       rp = new RouteParams[](routesIds.length); \\n\\n        for(uint i=0; i < routesIds.length; i++){\\n            rp[i] = routes[routesIds[i]];\\n        }\\n    }\\n\\n    /**\\n     * @dev pause the swap operation for the contract\\n     * @param opt true or false \\n     */\\n    function pauseSwap(bool opt) \\n        external\\n        onlyOwner \\n    {\\n        isPaused = opt;\\n    }\\n\\n    modifier validateRouter(bytes32 routeId) {\\n        require(routes[routeId].createdAt > 0, \\\"BotFi#SwapEngine#validateRouter: UNKNOWN_ROUTER_ID\\\");\\n\\n        require(routes[routeId].enabled, \\\"BotFi#SwapEngine#validateRouter: ROUTER_NOT_ENABLED\\\");\\n\\n        _;\\n    }\\n\\n\\n    /**\\n     * @dev perform a swap\\n     * @param routeId the identifier of the router to use\\n     * @param amount the total amount including the protocol fee for the swap\\n     * @param tokenA the token to swap into another token (tokenB)\\n     * @param payload the encoded swap data to foward to the router\\n     */ \\n    function swap(\\n        bytes32 routeId,\\n        uint256 amount, \\n        address tokenA, \\n        bytes calldata payload\\n    ) \\n        external \\n        payable\\n        validateRouter(routeId)\\n        nonReentrant()\\n        notPaused()\\n    {   \\n\\n        RouteParams memory route = routes[routeId];\\n\\n        require(route.createdAt > 0, \\\"BotFi#Swap: UNSUPPORTED_DEX\\\");\\n        require(payload.length > 0, \\\"BotFi#Swap: DATA_ARG_REQUIRED\\\");\\n        require(tokenA != address(0), \\\"BotFi#Swap: ZERO_TOKENA_ADDR\\\");\\n\\n        if(tokenA == NATIVE_TOKEN) {\\n            //validate native token input\\n            require(msg.value == amount, \\\"BotFi#Swap: INSUFFICIENT_BALANCE\\\");\\n        } else {\\n            \\n            // lets transfer the tokens from the user\\n            transferAsset(tokenA, _msgSender(), address(this), amount);\\n        }\\n\\n        address swapRouter = route.router;\\n\\n        //get fee amt\\n        uint feeAmt = amount - calPercentage(amount, PROTOCOL_FEE);\\n\\n        // lets perform fee transfer \\n        transferAsset(tokenA, _msgSender(), FEE_WALLET, feeAmt);\\n\\n        uint256 swapAmt = amount - feeAmt;\\n\\n        if(tokenA == NATIVE_TOKEN && route.group == UNI_V3){\\n            IWETH9(route.weth).deposit{value: swapAmt}();\\n        }\\n\\n        if(tokenA == NATIVE_TOKEN && route.group != UNI_V3){\\n            swapRouter.functionCallWithValue(payload, swapAmt);\\n        } else {\\n\\n            address tokenAddr = (tokenA == NATIVE_TOKEN) ? route.weth : tokenA;\\n\\n            require(IERC20(tokenAddr).approve(swapRouter, swapAmt), \\n                \\\"BotFi#SwapEngine: TOKENA_APPROVAL_FAILED\\\"\\n            );\\n\\n            swapRouter.functionCall(payload);\\n        }\\n\\n        emit Swap(routeId, amount, tokenA, PROTOCOL_FEE, _msgSender());\\n    }\\n    \\n    /**\\n     * @dev withdraw any stucked tokens in the contract\\n     * @param token the token address to withdraw\\n     * @param amount the amount to move out\\n     */\\n    function sweep(address token, uint256 amount) \\n        external \\n        onlyOwner \\n    {\\n        transferAsset(token, address(this), _msgSender(), amount);\\n    }\\n\\n}   \",\"keccak256\":\"0x8e0843499cc92d81912700bc7baf6d83188dd85a11fb80aab8a67c3d273577c5\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100ec5760003560e01c8063715018a61161008a5780638da5cb5b116100595780638da5cb5b146102de57806390d49b9d14610309578063ac9650d814610332578063f2fde38b1461036f576100f3565b8063715018a614610238578063787dce3d1461024f5780637c249d29146102785780638ca78528146102b5576100f3565b80631f696924116100c65780631f6969241461019f57806339691ed9146101ca5780636ea056a9146101f35780636f8e61761461021c576100f3565b8063066e9481146100f55780630dd3ca83146101395780631b80b51014610162576100f3565b366100f357005b005b34801561010157600080fd5b5061011c60048036038101906101179190611ee7565b610398565b604051610130989796959493929190611fb9565b60405180910390f35b34801561014557600080fd5b50610160600480360381019061015b9190612063565b61046d565b005b34801561016e57600080fd5b50610189600480360381019061018491906120cf565b6104f8565b604051610196919061210f565b60405180910390f35b3480156101ab57600080fd5b506101b4610535565b6040516101c191906122c7565b60405180910390f35b3480156101d657600080fd5b506101f160048036038101906101ec91906122e9565b6107a5565b005b3480156101ff57600080fd5b5061021a60048036038101906102159190612342565b6107ca565b005b610236600480360381019061023191906123e7565b6107e9565b005b34801561024457600080fd5b5061024d611027565b005b34801561025b57600080fd5b506102766004803603810190610271919061246f565b61103b565b005b34801561028457600080fd5b5061029f600480360381019061029a919061246f565b61104f565b6040516102ac919061249c565b60405180910390f35b3480156102c157600080fd5b506102dc60048036038101906102d791906124e3565b611073565b005b3480156102ea57600080fd5b506102f36114c2565b6040516103009190612585565b60405180910390f35b34801561031557600080fd5b50610330600480360381019061032b91906125a0565b6114ec565b005b34801561033e57600080fd5b5061035960048036038101906103549190612623565b611500565b60405161036691906127c2565b60405180910390f35b34801561037b57600080fd5b50610396600480360381019061039191906125a0565b61160c565b005b60036020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060154908060070160009054906101000a900460ff16905088565b60006003600084815260200190815260200160002060060154116104c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612867565b60405180910390fd5b806003600084815260200190815260200160002060070160006101000a81548160ff0219169083151502179055505050565b6000612710828461050991906128b6565b101561051457600080fd5b612710828461052391906128b6565b61052d9190612927565b905092915050565b606060048054905067ffffffffffffffff81111561055657610555612958565b5b60405190808252806020026020018201604052801561058f57816020015b61057c611e02565b8152602001906001900390816105745790505b50905060005b6004805490508110156107a15760036000600483815481106105ba576105b9612987565b5b906000526020600020015481526020019081526020016000206040518061010001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682015481526020016007820160009054906101000a900460ff16151515158152505082828151811061078357610782612987565b5b60200260200101819052508080610799906129b6565b915050610595565b5090565b6107ad611692565b80600760006101000a81548160ff02191690831515021790555050565b6107d2611692565b6107e582306107df611719565b84611721565b5050565b846000600360008381526020019081526020016000206006015411610843576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083a90612a70565b60405180910390fd5b6003600082815260200190815260200160002060070160009054906101000a900460ff166108a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089d90612b02565b60405180910390fd5b6108ae61178a565b600760009054906101000a900460ff16156108fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f590612b6e565b60405180910390fd5b6000600360008881526020019081526020016000206040518061010001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682015481526020016007820160009054906101000a900460ff161515151581525050905060008160c0015111610af9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af090612bda565b60405180910390fd5b60008484905011610b3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3690612c46565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610bae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba590612cb2565b60405180910390fd5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610c3c57853414610c37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2e90612d1e565b60405180910390fd5b610c50565b610c4f85610c48611719565b3089611721565b5b6000816040015190506000610c67886000546104f8565b88610c729190612d3e565b9050610ca987610c80611719565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684611721565b60008189610cb79190612d3e565b905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16148015610d0d57506002548460200151145b15610d7857836080015173ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015610d5e57600080fd5b505af1158015610d72573d6000803e3d6000fd5b50505050505b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16148015610dcd5750600254846020015114155b15610e4757610e4187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050828573ffffffffffffffffffffffffffffffffffffffff166117d09092919063ffffffff16565b50610fcb565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614610e965788610e9c565b84608001515b90508073ffffffffffffffffffffffffffffffffffffffff1663095ea7b385846040518363ffffffff1660e01b8152600401610ed9929190612d72565b6020604051808303816000875af1158015610ef8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1c9190612db0565b610f5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5290612e4f565b60405180910390fd5b610fc888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508573ffffffffffffffffffffffffffffffffffffffff1661189d90919063ffffffff16565b50505b7fa1cf747ad001476b442e3c9c4a2b2180fbc1b3a710b44c90e2f2d23d2f2710c28a8a8a600054610ffa611719565b60405161100b959493929190612e6f565b60405180910390a15050505061101f6118b3565b505050505050565b61102f611692565b61103960006118bd565b565b611043611692565b61104c81611983565b50565b6004818154811061105f57600080fd5b906000526020600020016000915090505481565b61107b611692565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036110ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e190612f34565b60405180910390fd5b6110f3856119c4565b611132576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112990612fc6565b60405180910390fd5b61113b846119c4565b61117a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117190613058565b60405180910390fd5b611183836119c4565b6111c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b9906130ea565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461123f576111ff826119c4565b61123e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112359061317c565b60405180910390fd5b5b600080600360008a81526020019081526020016000206006015414905060008161127f57600360008a815260200190815260200160002060060154611281565b425b90506040518061010001604052808a81526020018981526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001828152602001841515815250600360008b8152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c0820151816006015560e08201518160070160006101000a81548160ff02191690831515021790555090505081156114b75760048990806001815401808255809150506001900390600052602060002001600090919091909150555b505050505050505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6114f4611692565b6114fd816119d7565b50565b60608282905067ffffffffffffffff81111561151f5761151e612958565b5b60405190808252806020026020018201604052801561155257816020015b606081526020019060019003908161153d5790505b50905060005b83839050811015611605576115d43085858481811061157a57611579612987565b5b905060200281019061158c91906131ab565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611a52565b8282815181106115e7576115e6612987565b5b602002602001018190525080806115fd906129b6565b915050611558565b5092915050565b611614611692565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036116865760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161167d9190612585565b60405180910390fd5b61168f816118bd565b50565b61169a611719565b73ffffffffffffffffffffffffffffffffffffffff166116b86114c2565b73ffffffffffffffffffffffffffffffffffffffff1614611717576116db611719565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161170e9190612585565b60405180910390fd5b565b600033905090565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611777576117728282611ad6565b611784565b61178384848484611bd6565b5b50505050565b6002600654036117c6576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600681905550565b60608147101561181757306040517fcd78605900000000000000000000000000000000000000000000000000000000815260040161180e9190612585565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051611840919061324a565b60006040518083038185875af1925050503d806000811461187d576040519150601f19603f3d011682016040523d82523d6000602084013e611882565b606091505b5091509150611892868383611d2e565b925050509392505050565b60606118ab838360006117d0565b905092915050565b6001600681905550565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b806000819055507fdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b1816040516119b9919061210f565b60405180910390a150565b600080823b905060008111915050919050565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3d21e5a2b633291bd1ff5f9c654e402d063783c95759d2ea521b31fb30e4da4181604051611a479190612585565b60405180910390a150565b60606000808473ffffffffffffffffffffffffffffffffffffffff1684604051611a7c919061324a565b600060405180830381855af49150503d8060008114611ab7576040519150601f19603f3d011682016040523d82523d6000602084013e611abc565b606091505b5091509150611acc858383611d2e565b9250505092915050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811115611b0b57611b0a612958565b5b6040519080825280601f01601f191660200182016040528015611b3d5781602001600182028036833780820191505090505b50604051611b4b919061324a565b60006040518083038185875af1925050503d8060008114611b88576040519150601f19603f3d011682016040523d82523d6000602084013e611b8d565b606091505b5050905080611bd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc8906132d3565b60405180910390fd5b505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b868686604051602401611c0d939291906132f3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611c77919061324a565b6000604051808303816000865af19150503d8060008114611cb4576040519150601f19603f3d011682016040523d82523d6000602084013e611cb9565b606091505b5091509150818015611ce75750600081511480611ce6575080806020019051810190611ce59190612db0565b5b5b611d26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1d9061339c565b60405180910390fd5b505050505050565b606082611d4357611d3e82611dbd565b611db5565b60008251148015611d6b575060008473ffffffffffffffffffffffffffffffffffffffff163b145b15611dad57836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401611da49190612585565b60405180910390fd5b819050611db6565b5b9392505050565b600081511115611dd05780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518061010001604052806000801916815260200160008019168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b600080fd5b600080fd5b6000819050919050565b611ec481611eb1565b8114611ecf57600080fd5b50565b600081359050611ee181611ebb565b92915050565b600060208284031215611efd57611efc611ea7565b5b6000611f0b84828501611ed2565b91505092915050565b611f1d81611eb1565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f4e82611f23565b9050919050565b611f5e81611f43565b82525050565b6000611f6f82611f23565b9050919050565b611f7f81611f64565b82525050565b6000819050919050565b611f9881611f85565b82525050565b60008115159050919050565b611fb381611f9e565b82525050565b600061010082019050611fcf600083018b611f14565b611fdc602083018a611f14565b611fe96040830189611f55565b611ff66060830188611f76565b6120036080830187611f76565b61201060a0830186611f76565b61201d60c0830185611f8f565b61202a60e0830184611faa565b9998505050505050505050565b61204081611f9e565b811461204b57600080fd5b50565b60008135905061205d81612037565b92915050565b6000806040838503121561207a57612079611ea7565b5b600061208885828601611ed2565b92505060206120998582860161204e565b9150509250929050565b6120ac81611f85565b81146120b757600080fd5b50565b6000813590506120c9816120a3565b92915050565b600080604083850312156120e6576120e5611ea7565b5b60006120f4858286016120ba565b9250506020612105858286016120ba565b9150509250929050565b60006020820190506121246000830184611f8f565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61215f81611eb1565b82525050565b61216e81611f43565b82525050565b61217d81611f64565b82525050565b61218c81611f85565b82525050565b61219b81611f9e565b82525050565b610100820160008201516121b86000850182612156565b5060208201516121cb6020850182612156565b5060408201516121de6040850182612165565b5060608201516121f16060850182612174565b5060808201516122046080850182612174565b5060a082015161221760a0850182612174565b5060c082015161222a60c0850182612183565b5060e082015161223d60e0850182612192565b50505050565b600061224f83836121a1565b6101008301905092915050565b6000602082019050919050565b60006122748261212a565b61227e8185612135565b935061228983612146565b8060005b838110156122ba5781516122a18882612243565b97506122ac8361225c565b92505060018101905061228d565b5085935050505092915050565b600060208201905081810360008301526122e18184612269565b905092915050565b6000602082840312156122ff576122fe611ea7565b5b600061230d8482850161204e565b91505092915050565b61231f81611f64565b811461232a57600080fd5b50565b60008135905061233c81612316565b92915050565b6000806040838503121561235957612358611ea7565b5b60006123678582860161232d565b9250506020612378858286016120ba565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f8401126123a7576123a6612382565b5b8235905067ffffffffffffffff8111156123c4576123c3612387565b5b6020830191508360018202830111156123e0576123df61238c565b5b9250929050565b60008060008060006080868803121561240357612402611ea7565b5b600061241188828901611ed2565b9550506020612422888289016120ba565b94505060406124338882890161232d565b935050606086013567ffffffffffffffff81111561245457612453611eac565b5b61246088828901612391565b92509250509295509295909350565b60006020828403121561248557612484611ea7565b5b6000612493848285016120ba565b91505092915050565b60006020820190506124b16000830184611f14565b92915050565b6124c081611f43565b81146124cb57600080fd5b50565b6000813590506124dd816124b7565b92915050565b600080600080600080600060e0888a03121561250257612501611ea7565b5b60006125108a828b01611ed2565b97505060206125218a828b01611ed2565b96505060406125328a828b016124ce565b95505060606125438a828b0161232d565b94505060806125548a828b0161232d565b93505060a06125658a828b0161232d565b92505060c06125768a828b0161204e565b91505092959891949750929550565b600060208201905061259a6000830184611f76565b92915050565b6000602082840312156125b6576125b5611ea7565b5b60006125c48482850161232d565b91505092915050565b60008083601f8401126125e3576125e2612382565b5b8235905067ffffffffffffffff811115612600576125ff612387565b5b60208301915083602082028301111561261c5761261b61238c565b5b9250929050565b6000806020838503121561263a57612639611ea7565b5b600083013567ffffffffffffffff81111561265857612657611eac565b5b612664858286016125cd565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156126d65780820151818401526020810190506126bb565b60008484015250505050565b6000601f19601f8301169050919050565b60006126fe8261269c565b61270881856126a7565b93506127188185602086016126b8565b612721816126e2565b840191505092915050565b600061273883836126f3565b905092915050565b6000602082019050919050565b600061275882612670565b612762818561267b565b9350836020820285016127748561268c565b8060005b858110156127b05784840389528151612791858261272c565b945061279c83612740565b925060208a01995050600181019050612778565b50829750879550505050505092915050565b600060208201905081810360008301526127dc818461274d565b905092915050565b600082825260208201905092915050565b7f426f7446693a53776170456e67696e6523656e61626c65526f757465723a204960008201527f4e56414c49445f524f5554450000000000000000000000000000000000000000602082015250565b6000612851602c836127e4565b915061285c826127f5565b604082019050919050565b6000602082019050818103600083015261288081612844565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006128c182611f85565b91506128cc83611f85565b92508282026128da81611f85565b915082820484148315176128f1576128f0612887565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061293282611f85565b915061293d83611f85565b92508261294d5761294c6128f8565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006129c182611f85565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036129f3576129f2612887565b5b600182019050919050565b7f426f7446692353776170456e67696e652376616c6964617465526f757465723a60008201527f20554e4b4e4f574e5f524f555445525f49440000000000000000000000000000602082015250565b6000612a5a6032836127e4565b9150612a65826129fe565b604082019050919050565b60006020820190508181036000830152612a8981612a4d565b9050919050565b7f426f7446692353776170456e67696e652376616c6964617465526f757465723a60008201527f20524f555445525f4e4f545f454e41424c454400000000000000000000000000602082015250565b6000612aec6033836127e4565b9150612af782612a90565b604082019050919050565b60006020820190508181036000830152612b1b81612adf565b9050919050565b7f426f74466923737761704e6f745061757365643a20535741505f504155534544600082015250565b6000612b586020836127e4565b9150612b6382612b22565b602082019050919050565b60006020820190508181036000830152612b8781612b4b565b9050919050565b7f426f74466923537761703a20554e535550504f525445445f4445580000000000600082015250565b6000612bc4601b836127e4565b9150612bcf82612b8e565b602082019050919050565b60006020820190508181036000830152612bf381612bb7565b9050919050565b7f426f74466923537761703a20444154415f4152475f5245515549524544000000600082015250565b6000612c30601d836127e4565b9150612c3b82612bfa565b602082019050919050565b60006020820190508181036000830152612c5f81612c23565b9050919050565b7f426f74466923537761703a205a45524f5f544f4b454e415f4144445200000000600082015250565b6000612c9c601c836127e4565b9150612ca782612c66565b602082019050919050565b60006020820190508181036000830152612ccb81612c8f565b9050919050565b7f426f74466923537761703a20494e53554646494349454e545f42414c414e4345600082015250565b6000612d086020836127e4565b9150612d1382612cd2565b602082019050919050565b60006020820190508181036000830152612d3781612cfb565b9050919050565b6000612d4982611f85565b9150612d5483611f85565b9250828203905081811115612d6c57612d6b612887565b5b92915050565b6000604082019050612d876000830185611f76565b612d946020830184611f8f565b9392505050565b600081519050612daa81612037565b92915050565b600060208284031215612dc657612dc5611ea7565b5b6000612dd484828501612d9b565b91505092915050565b7f426f7446692353776170456e67696e653a20544f4b454e415f415050524f564160008201527f4c5f4641494c4544000000000000000000000000000000000000000000000000602082015250565b6000612e396028836127e4565b9150612e4482612ddd565b604082019050919050565b60006020820190508181036000830152612e6881612e2c565b9050919050565b600060a082019050612e846000830188611f14565b612e916020830187611f8f565b612e9e6040830186611f76565b612eab6060830185611f8f565b612eb86080830184611f76565b9695505050505050565b7f426f7446692353776170456e67696e6523616464526f757465723a205a45524f60008201527f5f524f555445525f414444524553530000000000000000000000000000000000602082015250565b6000612f1e602f836127e4565b9150612f2982612ec2565b604082019050919050565b60006020820190508181036000830152612f4d81612f11565b9050919050565b7f426f7446692353776170456e67696e6523616464526f757465723a20524f555460008201527f45525f4e4f545f415f434f4e5452414354000000000000000000000000000000602082015250565b6000612fb06031836127e4565b9150612fbb82612f54565b604082019050919050565b60006020820190508181036000830152612fdf81612fa3565b9050919050565b7f426f7446692353776170456e67696e6523616464526f757465723a204641435460008201527f4f52595f4e4f545f415f434f4e54524143540000000000000000000000000000602082015250565b60006130426032836127e4565b915061304d82612fe6565b604082019050919050565b6000602082019050818103600083015261307181613035565b9050919050565b7f426f7446692353776170456e67696e6523616464526f757465723a205745544860008201527f5f4e4f545f415f434f4e54524143540000000000000000000000000000000000602082015250565b60006130d4602f836127e4565b91506130df82613078565b604082019050919050565b60006020820190508181036000830152613103816130c7565b9050919050565b7f426f7446692353776170456e67696e6523616464526f757465723a2051554f5460008201527f45525f4e4f545f415f434f4e5452414354000000000000000000000000000000602082015250565b60006131666031836127e4565b91506131718261310a565b604082019050919050565b6000602082019050818103600083015261319581613159565b9050919050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126131c8576131c761319c565b5b80840192508235915067ffffffffffffffff8211156131ea576131e96131a1565b5b602083019250600182023603831315613206576132056131a6565b5b509250929050565b600081905092915050565b60006132248261269c565b61322e818561320e565b935061323e8185602086016126b8565b80840191505092915050565b60006132568284613219565b915081905092915050565b7f426f744669235472616e7366657248656c7065723a204554485f5452414e534660008201527f45525f4641494c45440000000000000000000000000000000000000000000000602082015250565b60006132bd6029836127e4565b91506132c882613261565b604082019050919050565b600060208201905081810360008301526132ec816132b0565b9050919050565b60006060820190506133086000830186611f76565b6133156020830185611f76565b6133226040830184611f8f565b949350505050565b7f426f744669235472616e7366657248656c7065723a20544f4b454e5f5452414e60008201527f534645525f4641494c4544000000000000000000000000000000000000000000602082015250565b6000613386602b836127e4565b91506133918261332a565b604082019050919050565b600060208201905081810360008301526133b581613379565b905091905056fea264697066735822122027f24f73a3d2472e7e46ac1dc396984c5bb1533fe4c5d809f0428fc009168a4164736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addRoute(bytes32,bytes32,address,address,address,address,bool)": {
        "details": "addRouter add a router params",
        "params": {
          "enabled": "is the router enabled or not",
          "factory": "the factory address",
          "group": "router group - uni_v2, uni_v3 ....",
          "id": "router id",
          "quoter": "swap quoter ",
          "router": "the router address ",
          "weth": "wrapped ether or wrapped native token"
        }
      },
      "calPercentage(uint256,uint256)": {
        "details": "convert percentage in basis point of a value ",
        "params": {
          "amount": "the amount to be calculated on",
          "bps": "percentage value in basis point"
        }
      },
      "enableRoute(bytes32,bool)": {
        "details": "enable or disable a route",
        "params": {
          "id": "the router id",
          "opt": "true or false"
        }
      },
      "getAllRoutes()": {
        "details": "getAllRoutes get all the routers returns array "
      },
      "multicall(bytes[])": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pauseSwap(bool)": {
        "details": "pause the swap operation for the contract",
        "params": {
          "opt": "true or false "
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setFeeWallet(address)": {
        "details": "set the address for taking the protocol fees",
        "params": {
          "addr": "the fee in percentage basis point"
        }
      },
      "setProtocolFee(uint256)": {
        "details": "protocol fee in basis point",
        "params": {
          "_feeBps": "the fee in percentage basis point"
        }
      },
      "swap(bytes32,uint256,address,bytes)": {
        "details": "perform a swap",
        "params": {
          "amount": "the total amount including the protocol fee for the swap",
          "payload": "the encoded swap data to foward to the router",
          "routeId": "the identifier of the router to use",
          "tokenA": "the token to swap into another token (tokenB)"
        }
      },
      "sweep(address,uint256)": {
        "details": "withdraw any stucked tokens in the contract",
        "params": {
          "amount": "the amount to move out",
          "token": "the token address to withdraw"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 749,
        "contract": "contracts/Factory.sol:Factory",
        "label": "PROTOCOL_FEE",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 751,
        "contract": "contracts/Factory.sol:Factory",
        "label": "FEE_WALLET",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 757,
        "contract": "contracts/Factory.sol:Factory",
        "label": "UNI_V3",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 765,
        "contract": "contracts/Factory.sol:Factory",
        "label": "routes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(RouteParams)785_storage)"
      },
      {
        "astId": 768,
        "contract": "contracts/Factory.sol:Factory",
        "label": "routesIds",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 8,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 571,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_status",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3586,
        "contract": "contracts/Factory.sol:Factory",
        "label": "isPaused",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(RouteParams)785_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Defs.RouteParams)",
        "numberOfBytes": "32",
        "value": "t_struct(RouteParams)785_storage"
      },
      "t_struct(RouteParams)785_storage": {
        "encoding": "inplace",
        "label": "struct Defs.RouteParams",
        "members": [
          {
            "astId": 770,
            "contract": "contracts/Factory.sol:Factory",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 772,
            "contract": "contracts/Factory.sol:Factory",
            "label": "group",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 774,
            "contract": "contracts/Factory.sol:Factory",
            "label": "router",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 776,
            "contract": "contracts/Factory.sol:Factory",
            "label": "factory",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 778,
            "contract": "contracts/Factory.sol:Factory",
            "label": "weth",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 780,
            "contract": "contracts/Factory.sol:Factory",
            "label": "quoter",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 782,
            "contract": "contracts/Factory.sol:Factory",
            "label": "createdAt",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 784,
            "contract": "contracts/Factory.sol:Factory",
            "label": "enabled",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
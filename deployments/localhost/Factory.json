{
  "address": "0x3bc5E1004E8778Cb5FBE0358Da40b0B9938Ddc07",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "feeWallet",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetFeeWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "SetProtocolFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "routerId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeBps",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "adapter",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "route",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "addRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bps",
          "type": "uint256"
        }
      ],
      "name": "calPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "opt",
          "type": "bool"
        }
      ],
      "name": "pauseSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "routers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "adapter",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "route",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "routersIds",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setFeeWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeBps",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "routerId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5c1f7b996bf2ff9e5d376eb26a94928c1983bcc622852f686cc684a9892671ce",
  "receipt": {
    "to": null,
    "from": "0x20551033FD467b8Ee59357a818911F6a6A01Ac96",
    "contractAddress": "0x3bc5E1004E8778Cb5FBE0358Da40b0B9938Ddc07",
    "transactionIndex": 0,
    "gasUsed": "2258344",
    "logsBloom": "0x
    "blockHash": "0xc134d802d130d98951a0b013858bfda348b95e62d8c1dd32bce4511172badcfa",
    "transactionHash": "0x5c1f7b996bf2ff9e5d376eb26a94928c1983bcc622852f686cc684a9892671ce",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 18531791,
        "transactionHash": "0x5c1f7b996bf2ff9e5d376eb26a94928c1983bcc622852f686cc684a9892671ce",
        "address": "0x3bc5E1004E8778Cb5FBE0358Da40b0B9938Ddc07",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000020551033fd467b8ee59357a818911f6a6a01ac96"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc134d802d130d98951a0b013858bfda348b95e62d8c1dd32bce4511172badcfa"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18531791,
        "transactionHash": "0x5c1f7b996bf2ff9e5d376eb26a94928c1983bcc622852f686cc684a9892671ce",
        "address": "0x3bc5E1004E8778Cb5FBE0358Da40b0B9938Ddc07",
        "topics": [
          "0xdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b1"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000064",
        "logIndex": 1,
        "blockHash": "0xc134d802d130d98951a0b013858bfda348b95e62d8c1dd32bce4511172badcfa"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18531791,
        "transactionHash": "0x5c1f7b996bf2ff9e5d376eb26a94928c1983bcc622852f686cc684a9892671ce",
        "address": "0x3bc5E1004E8778Cb5FBE0358Da40b0B9938Ddc07",
        "topics": [
          "0x3d21e5a2b633291bd1ff5f9c654e402d063783c95759d2ea521b31fb30e4da41"
        ],
        "data": "0x00000000000000000000000092c9e17a2f02b2119350f3e90918bed3c6e24f3c",
        "logIndex": 2,
        "blockHash": "0xc134d802d130d98951a0b013858bfda348b95e62d8c1dd32bce4511172badcfa"
      }
    ],
    "blockNumber": 18531791,
    "cumulativeGasUsed": "2258344",
    "status": 1,
    "byzantium": true
  },
  "args": [
    100,
    "0x92c9E17a2f02b2119350F3E90918bEd3c6e24F3c"
  ],
  "numDeployments": 1,
  "solcInputHash": "cb4ea6a0ef7a2842b9c59b01f8862aae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetFeeWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SetProtocolFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"routerId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"adapter\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"route\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"addRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"calPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"opt\",\"type\":\"bool\"}],\"name\":\"pauseSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"routers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"adapter\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"route\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"routersIds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeBps\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"routerId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"calPercentage(uint256,uint256)\":{\"details\":\"convert percentage in basis point of a value \",\"params\":{\"amount\":\"the amount to be calculated on\",\"bps\":\"percentage value in basis point\"}},\"multicall(bytes[])\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pauseSwap(bool)\":{\"details\":\"pause the swap operation for the contract\",\"params\":{\"opt\":\"true or false \"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setFeeWallet(address)\":{\"details\":\"set the address for taking the protocol fees\",\"params\":{\"addr\":\"the fee in percentage basis point\"}},\"setProtocolFee(uint256)\":{\"details\":\"protocol fee in basis point\",\"params\":{\"_feeBps\":\"the fee in percentage basis point\"}},\"swap(bytes32,uint256,address,bytes)\":{\"details\":\"perform a swap\",\"params\":{\"amount\":\"the total amount including the protocol fee for the swap\",\"payload\":\"the encoded swap data to foward to the router\",\"routerId\":\"the identifier of the router to use\",\"tokenA\":\"the token to swap into another token (tokenB)\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address,uint256)\":{\"details\":\"withdraw any stucked tokens in the contract\",\"params\":{\"amount\":\"the amount to move out\",\"token\":\"the token address to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory.sol\":\"Factory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Address} from \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0xc5622e05d0cc837b2ab254c29566768e292847d05d230560d9886955cafe6c37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/ContractBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/@uniswap/v2/v2-periphery/interfaces/IWETH.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./base/Globals.sol\\\";\\n\\ncontract ContractBase is \\n    Globals, \\n    Context, \\n    Ownable, \\n    Multicall, \\n    ReentrancyGuard \\n{\\n\\n\\n    event SetProtocolFee(uint256);\\n    event SetFeeWallet(address addr);\\n\\n    constructor() Ownable(_msgSender()) {}\\n\\n    /**\\n     * @dev protocol fee in basis point\\n     * @param _feeBps the fee in percentage basis point\\n     */\\n    function __setProtocolFee (uint256 _feeBps)\\n        internal\\n    {\\n        PROTOCOL_FEE = _feeBps;\\n\\n        emit SetProtocolFee(_feeBps);\\n    }\\n\\n    /**\\n     * @dev protocol fee in basis point\\n     * @param _feeBps the fee in percentage basis point\\n     */\\n    function setProtocolFee(uint _feeBps)\\n        public \\n        onlyOwner \\n    {\\n        __setProtocolFee(_feeBps);\\n    }\\n\\n    \\n    function __setFeeWallet(address addr)\\n        internal \\n    {\\n        FEE_WALLET = addr;\\n        emit SetFeeWallet(addr);\\n    }\\n\\n    /**\\n     * @dev set the address for taking the protocol fees\\n     * @param addr the fee in percentage basis point\\n     */\\n    function setFeeWallet(address addr)\\n        public \\n        onlyOwner \\n    {\\n        __setFeeWallet(addr);\\n    }\\n}\\n\",\"keccak256\":\"0xd9318c354d1aa75733985aefac82b4538af99c3eb0dac330bce35aa4e751e0c2\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ContractBase.sol\\\";\\nimport \\\"./swap/SwapEngine.sol\\\";\\n\\ncontract Factory is ContractBase, SwapEngine {\\n\\n    constructor(\\n        uint    protocolFee,\\n        address feeWallet\\n    ) {     \\n        __setProtocolFee(protocolFee);\\n        __setFeeWallet(feeWallet);\\n    }\\n    \\n}\",\"keccak256\":\"0x394890b11ef8b34761951c491de6616cd029c0856ef14c01af97b0e27087d694\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/Globals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/@uniswap/v2/v2-periphery/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"../interfaces/@uniswap/v2/v2-core/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"../interfaces/@uniswap/v3/v3-core/interfaces/IUniswapV3Factory.sol\\\";\\nimport \\\"../interfaces/@uniswap/v3/v3-periphery/interfaces/ISwapRouter.sol\\\";\\nimport \\\"../interfaces/@uniswap/v2/v2-core/interfaces/IUniswapV2Pair.sol\\\";\\n\\n\\ncontract Globals {\\n\\n    // the protocol fee \\n    uint PROTOCOL_FEE;\\n\\n    // the fee address, for taking fees \\n    address FEE_WALLET;\\n\\n    // native token \\n    address NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n\\n    // id  =>  RouteParams \\n    mapping (bytes32 => RouterParams) public routers;\\n    bytes32[] public routersIds;\\n\\n    struct RouterParams {\\n        bytes32             id;\\n        bytes32             adapter; //adapter name uni_v2, uni_v3 and 1inch, balancer\\n        address   payable   route;\\n        address             factory;\\n        address             weth;\\n        uint256             createdAt;\\n        bool                enabled; \\n    }\\n\\n    /**\\n     * @dev convert percentage in basis point of a value \\n     * @param amount the amount to be calculated on\\n     * @param bps percentage value in basis point\\n     */\\n    function calPercentage(uint amount, uint bps) \\n        public \\n        pure \\n        returns (uint256)\\n    {\\n        require((amount * bps) >= 10_000);\\n        return (amount * bps) / 10_000;\\n    }\\n\\n}\",\"keccak256\":\"0x0d797ff7020cddfa0f123c45f407cc65fddf55091e4feaf7714120243910ea26\",\"license\":\"MIT\"},\"contracts/base/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Globals.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ncontract TransferHelper is Globals {\\n\\n    /**\\n     * @dev safeTransfer eth or token \\n     * @param token, the token contract\\n     * @param from the sender's address \\n     * @param to the recipient's address\\n     * @param value the value to send\\n    */\\n    function transferAsset(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        \\n        if(token == NATIVE_TOKEN){\\n            safeTransferETH(to, value);\\n        } else {\\n            safeTransferFrom(token, from, to, value);\\n        }\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'BotFi#TransferHelper: TOKEN_TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'BotFi#TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\",\"keccak256\":\"0x82c55ca4c448a4e4d098be8268645725defd6f0e0549a695e60d6155c06719ec\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/@uniswap/v2/v2-core/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x9765707d6827034615237b4bd51ffeb707b5839e35745532f7267199def9b4f9\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/@uniswap/v2/v2-core/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x656353978597dd1076850b0a01474dd679ad0c73774cac62f7003240b1514e83\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/@uniswap/v2/v2-periphery/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0xdf8ffd93dc03d216333bd9f57f93ebe44166eaa325f9dbc6f8aec382c164f0df\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/@uniswap/v2/v2-periphery/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x68c8299de0e30dc22e9192e860fdbc000a7e84ae887c6cedc40a70ac7ea240bb\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/@uniswap/v2/v2-periphery/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\",\"keccak256\":\"0x1c6a6da9db7c94d7c6311ecea417368f99c3f9ba63d71a37394ce83abbb1fcba\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/@uniswap/v3/v3-core/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/@uniswap/v3/v3-core/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/@uniswap/v3/v3-periphery/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '../../v3-core/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x6f2c489584424694a4ca59b37f1a8d30301d034fd78a1a6f8250cf3b36909693\",\"license\":\"GPL-2.0-or-later\"},\"contracts/swap/SwapEngine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ContractBase.sol\\\";\\nimport \\\"../base/TransferHelper.sol\\\";\\n\\ncontract SwapEngine is TransferHelper, ContractBase {\\n\\n    event Swap(\\n        bytes32 routerId, \\n        uint256 amount,\\n        address tokenA,\\n        uint    feeBps,\\n        address account  \\n    );\\n\\n    using Address for address;\\n    using Address for address payable;\\n\\n    bool swapPaused;\\n\\n    receive() external payable{}\\n    fallback() external payable{}\\n\\n    modifier swapNotPaused() {\\n        require(!swapPaused, \\\"BotFi#swapNotPaused: SWAP_PAUSED\\\");\\n        _;\\n    }\\n\\n    function addRouter(\\n        bytes32             id,\\n        bytes32             adapter, // uni_v2, uni_v3, 1inch, ...                  \\n        address  payable    route, \\n        address             factory,\\n        address             weth,\\n        bool                enabled\\n    ) \\n        public \\n        onlyOwner \\n    {\\n\\n        require(route != address(0), \\\"BotFi: ZERO_ROUTER_ADDRESS\\\");\\n\\n        bool isNew = (routers[id].createdAt == 0);\\n        uint createdAt = (isNew) ? block.timestamp : routers[id].createdAt;\\n\\n        if(adapter == bytes32(\\\"uni_v2\\\")){\\n            factory = IUniswapV2Router02(route).factory();\\n            weth    = IUniswapV2Router02(route).WETH();\\n        }\\n\\n        routers[id] = RouterParams(\\n            id,\\n            adapter, \\n            route,\\n            factory,\\n            weth,\\n            createdAt,\\n            enabled\\n        );\\n\\n        if(isNew) routersIds.push(id);\\n    }\\n\\n    /**\\n     * @dev pause the swap operation for the contract\\n     * @param opt true or false \\n     */\\n    function pauseSwap(bool opt) \\n        external\\n        onlyOwner \\n    {\\n        swapPaused = opt;\\n    }\\n\\n    /**\\n     * @dev perform a swap\\n     * @param routerId the identifier of the router to use\\n     * @param amount the total amount including the protocol fee for the swap\\n     * @param tokenA the token to swap into another token (tokenB)\\n     * @param payload the encoded swap data to foward to the router\\n     */ \\n    function swap(\\n        bytes32 routerId,\\n        uint256 amount, \\n        address tokenA, \\n        bytes calldata payload\\n    ) \\n        external \\n        payable\\n        nonReentrant()\\n        swapNotPaused()\\n    {   \\n\\n        require(routers[routerId].createdAt > 0, \\\"BotFi#Swap: UNSUPPORTED_DEX\\\");\\n        require(payload.length > 0, \\\"BotFi#Swap: DATA_ARG_REQUIRED\\\");\\n        require(tokenA != address(0), \\\"BotFi#Swap: ZERO_TOKENA_ADDR\\\");\\n\\n        if(tokenA == NATIVE_TOKEN) {\\n            //validate native token input\\n            require(msg.value == amount, \\\"BotFi#Swap: INSUFFICIENT_BALANCE\\\");\\n        } else {\\n            \\n            // lets transfer the tokens from the user\\n            transferAsset(tokenA, _msgSender(), address(this), amount);\\n        }\\n\\n        //get fee amt\\n        uint feeAmt = amount - calPercentage(amount, PROTOCOL_FEE);\\n\\n        // lets perform fee transfer \\n        transferAsset(tokenA, _msgSender(), FEE_WALLET, feeAmt);\\n\\n        address route = routers[routerId].route;\\n        uint256 swapAmt = amount - feeAmt;\\n\\n        if(tokenA == NATIVE_TOKEN){\\n            route.functionCallWithValue(payload, swapAmt);\\n        } else {\\n\\n            require(IERC20(tokenA).approve(route, swapAmt), \\\"BotFi#Swap: TOKENA_APPROVAL_FAILED\\\");\\n\\n            route.functionCallWithValue(payload, msg.value);\\n        }\\n\\n        emit Swap(routerId, amount, tokenA, PROTOCOL_FEE, _msgSender());\\n    }\\n    \\n    /**\\n     * @dev withdraw any stucked tokens in the contract\\n     * @param token the token address to withdraw\\n     * @param amount the amount to move out\\n     */\\n    function withdraw(address token, uint256 amount) \\n        external \\n        onlyOwner \\n    {\\n        transferAsset(token, address(this), _msgSender(), amount);\\n    }\\n\\n}   \",\"keccak256\":\"0x815acfcbf49b75761ec357a5b0389c6d8ef99a336ce6a79e3f3e26071aef0302\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200006657600080fd5b50604051620029e1380380620029e183398181016040528101906200008c919062000388565b6200009c6200015560201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620001115760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620001089190620003e0565b60405180910390fd5b62000122816200015d60201b60201c565b5060016006819055506200013c826200022360201b60201c565b6200014d816200026660201b60201c565b50506200042b565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b806000819055507fdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b1816040516200025b91906200040e565b60405180910390a150565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3d21e5a2b633291bd1ff5f9c654e402d063783c95759d2ea521b31fb30e4da4181604051620002d89190620003e0565b60405180910390a150565b600080fd5b6000819050919050565b620002fd81620002e8565b81146200030957600080fd5b50565b6000815190506200031d81620002f2565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003508262000323565b9050919050565b620003628162000343565b81146200036e57600080fd5b50565b600081519050620003828162000357565b92915050565b60008060408385031215620003a257620003a1620002e3565b5b6000620003b2858286016200030c565b9250506020620003c58582860162000371565b9150509250929050565b620003da8162000343565b82525050565b6000602082019050620003f76000830184620003cf565b92915050565b6200040881620002e8565b82525050565b6000602082019050620004256000830184620003fd565b92915050565b6125a6806200043b6000396000f3fe6080604052600436106100c65760003560e01c80638da5cb5b1161007f578063aa1fce6911610059578063aa1fce691461024b578063ac9650d81461028e578063f2fde38b146102cb578063f3fef3a3146102f4576100cd565b80638da5cb5b146101ce57806390d49b9d146101f95780639d63042114610222576100cd565b80631b80b510146100cf57806328b70aea1461010c57806339691ed9146101495780636f8e617614610172578063715018a61461018e578063787dce3d146101a5576100cd565b366100cd57005b005b3480156100db57600080fd5b506100f660048036038101906100f191906116a0565b61031d565b60405161010391906116ef565b60405180910390f35b34801561011857600080fd5b50610133600480360381019061012e919061170a565b61035a565b6040516101409190611750565b60405180910390f35b34801561015557600080fd5b50610170600480360381019061016b91906117a3565b61037e565b005b61018c600480360381019061018791906118bf565b6103a3565b005b34801561019a57600080fd5b506101a36108a6565b005b3480156101b157600080fd5b506101cc60048036038101906101c7919061170a565b6108ba565b005b3480156101da57600080fd5b506101e36108ce565b6040516101f09190611956565b60405180910390f35b34801561020557600080fd5b50610220600480360381019061021b9190611971565b6108f8565b005b34801561022e57600080fd5b50610249600480360381019061024491906119dc565b61090c565b005b34801561025757600080fd5b50610272600480360381019061026d9190611a69565b610cab565b6040516102859796959493929190611ab4565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190611b79565b610d5a565b6040516102c29190611d18565b60405180910390f35b3480156102d757600080fd5b506102f260048036038101906102ed9190611971565b610e66565b005b34801561030057600080fd5b5061031b60048036038101906103169190611d3a565b610eec565b005b6000612710828461032e9190611da9565b101561033957600080fd5b61271082846103489190611da9565b6103529190611e1a565b905092915050565b6004818154811061036a57600080fd5b906000526020600020016000915090505481565b610386610f0b565b80600760006101000a81548160ff02191690831515021790555050565b6103ab610f92565b600760009054906101000a900460ff16156103fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f290611ea8565b60405180910390fd5b6000600360008781526020019081526020016000206005015411610454576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044b90611f14565b60405180910390fd5b6000828290501161049a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049190611f80565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610509576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050090611fec565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105a5578334146105a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059790612058565b60405180910390fd5b6105b9565b6105b8836105b1610fd8565b3087610fe0565b5b60006105c78560005461031d565b856105d29190612078565b9050610609846105e0610fd8565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684610fe0565b60006003600088815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600082876106529190612078565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff160361071e5761071885858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050828473ffffffffffffffffffffffffffffffffffffffff166110579092919063ffffffff16565b5061084c565b8573ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b81526004016107599291906120ac565b6020604051808303816000875af1158015610778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079c91906120ea565b6107db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d290612189565b60405180910390fd5b61084a85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050348473ffffffffffffffffffffffffffffffffffffffff166110579092919063ffffffff16565b505b7fa1cf747ad001476b442e3c9c4a2b2180fbc1b3a710b44c90e2f2d23d2f2710c288888860005461087b610fd8565b60405161088c9594939291906121a9565b60405180910390a150505061089f611124565b5050505050565b6108ae610f0b565b6108b8600061112e565b565b6108c2610f0b565b6108cb816111f4565b50565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610900610f0b565b61090981611235565b50565b610914610f0b565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097a90612248565b60405180910390fd5b60008060036000898152602001908152602001600020600501541490506000816109c35760036000898152602001908152602001600020600501546109c5565b425b90507f756e695f763200000000000000000000000000000000000000000000000000008703610ad1578573ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5d919061227d565b94508573ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ace919061227d565b93505b6040518060e001604052808981526020018881526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001828152602001841515815250600360008a8152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015560c08201518160060160006101000a81548160ff0219169083151502179055509050508115610ca15760048890806001815401808255809150506001900390600052602060002001600090919091909150555b5050505050505050565b60036020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050154908060060160009054906101000a900460ff16905087565b60608282905067ffffffffffffffff811115610d7957610d786122aa565b5b604051908082528060200260200182016040528015610dac57816020015b6060815260200190600190039081610d975790505b50905060005b83839050811015610e5f57610e2e30858584818110610dd457610dd36122d9565b5b9050602002810190610de69190612317565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506112b0565b828281518110610e4157610e406122d9565b5b60200260200101819052508080610e579061237a565b915050610db2565b5092915050565b610e6e610f0b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ee05760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610ed79190611956565b60405180910390fd5b610ee98161112e565b50565b610ef4610f0b565b610f078230610f01610fd8565b84610fe0565b5050565b610f13610fd8565b73ffffffffffffffffffffffffffffffffffffffff16610f316108ce565b73ffffffffffffffffffffffffffffffffffffffff1614610f9057610f54610fd8565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610f879190611956565b60405180910390fd5b565b600260065403610fce576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600681905550565b600033905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036110445761103f8282611334565b611051565b61105084848484611434565b5b50505050565b60608147101561109e57306040517fcd7860590000000000000000000000000000000000000000000000000000000081526004016110959190611956565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1684866040516110c791906123fe565b60006040518083038185875af1925050503d8060008114611104576040519150601f19603f3d011682016040523d82523d6000602084013e611109565b606091505b509150915061111986838361158c565b925050509392505050565b6001600681905550565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b806000819055507fdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b18160405161122a91906116ef565b60405180910390a150565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3d21e5a2b633291bd1ff5f9c654e402d063783c95759d2ea521b31fb30e4da41816040516112a59190611956565b60405180910390a150565b60606000808473ffffffffffffffffffffffffffffffffffffffff16846040516112da91906123fe565b600060405180830381855af49150503d8060008114611315576040519150601f19603f3d011682016040523d82523d6000602084013e61131a565b606091505b509150915061132a85838361158c565b9250505092915050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811115611369576113686122aa565b5b6040519080825280601f01601f19166020018201604052801561139b5781602001600182028036833780820191505090505b506040516113a991906123fe565b60006040518083038185875af1925050503d80600081146113e6576040519150601f19603f3d011682016040523d82523d6000602084013e6113eb565b606091505b505090508061142f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142690612487565b60405180910390fd5b505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b86868660405160240161146b939291906124a7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516114d591906123fe565b6000604051808303816000865af19150503d8060008114611512576040519150601f19603f3d011682016040523d82523d6000602084013e611517565b606091505b5091509150818015611545575060008151148061154457508080602001905181019061154391906120ea565b5b5b611584576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157b90612550565b60405180910390fd5b505050505050565b6060826115a15761159c8261161b565b611613565b600082511480156115c9575060008473ffffffffffffffffffffffffffffffffffffffff163b145b1561160b57836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016116029190611956565b60405180910390fd5b819050611614565b5b9392505050565b60008151111561162e5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080fd5b600080fd5b6000819050919050565b61167d8161166a565b811461168857600080fd5b50565b60008135905061169a81611674565b92915050565b600080604083850312156116b7576116b6611660565b5b60006116c58582860161168b565b92505060206116d68582860161168b565b9150509250929050565b6116e98161166a565b82525050565b600060208201905061170460008301846116e0565b92915050565b6000602082840312156117205761171f611660565b5b600061172e8482850161168b565b91505092915050565b6000819050919050565b61174a81611737565b82525050565b60006020820190506117656000830184611741565b92915050565b60008115159050919050565b6117808161176b565b811461178b57600080fd5b50565b60008135905061179d81611777565b92915050565b6000602082840312156117b9576117b8611660565b5b60006117c78482850161178e565b91505092915050565b6117d981611737565b81146117e457600080fd5b50565b6000813590506117f6816117d0565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611827826117fc565b9050919050565b6118378161181c565b811461184257600080fd5b50565b6000813590506118548161182e565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261187f5761187e61185a565b5b8235905067ffffffffffffffff81111561189c5761189b61185f565b5b6020830191508360018202830111156118b8576118b7611864565b5b9250929050565b6000806000806000608086880312156118db576118da611660565b5b60006118e9888289016117e7565b95505060206118fa8882890161168b565b945050604061190b88828901611845565b935050606086013567ffffffffffffffff81111561192c5761192b611665565b5b61193888828901611869565b92509250509295509295909350565b6119508161181c565b82525050565b600060208201905061196b6000830184611947565b92915050565b60006020828403121561198757611986611660565b5b600061199584828501611845565b91505092915050565b60006119a9826117fc565b9050919050565b6119b98161199e565b81146119c457600080fd5b50565b6000813590506119d6816119b0565b92915050565b60008060008060008060c087890312156119f9576119f8611660565b5b6000611a0789828a016117e7565b9650506020611a1889828a016117e7565b9550506040611a2989828a016119c7565b9450506060611a3a89828a01611845565b9350506080611a4b89828a01611845565b92505060a0611a5c89828a0161178e565b9150509295509295509295565b600060208284031215611a7f57611a7e611660565b5b6000611a8d848285016117e7565b91505092915050565b611a9f8161199e565b82525050565b611aae8161176b565b82525050565b600060e082019050611ac9600083018a611741565b611ad66020830189611741565b611ae36040830188611a96565b611af06060830187611947565b611afd6080830186611947565b611b0a60a08301856116e0565b611b1760c0830184611aa5565b98975050505050505050565b60008083601f840112611b3957611b3861185a565b5b8235905067ffffffffffffffff811115611b5657611b5561185f565b5b602083019150836020820283011115611b7257611b71611864565b5b9250929050565b60008060208385031215611b9057611b8f611660565b5b600083013567ffffffffffffffff811115611bae57611bad611665565b5b611bba85828601611b23565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611c2c578082015181840152602081019050611c11565b60008484015250505050565b6000601f19601f8301169050919050565b6000611c5482611bf2565b611c5e8185611bfd565b9350611c6e818560208601611c0e565b611c7781611c38565b840191505092915050565b6000611c8e8383611c49565b905092915050565b6000602082019050919050565b6000611cae82611bc6565b611cb88185611bd1565b935083602082028501611cca85611be2565b8060005b85811015611d065784840389528151611ce78582611c82565b9450611cf283611c96565b925060208a01995050600181019050611cce565b50829750879550505050505092915050565b60006020820190508181036000830152611d328184611ca3565b905092915050565b60008060408385031215611d5157611d50611660565b5b6000611d5f85828601611845565b9250506020611d708582860161168b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611db48261166a565b9150611dbf8361166a565b9250828202611dcd8161166a565b91508282048414831517611de457611de3611d7a565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611e258261166a565b9150611e308361166a565b925082611e4057611e3f611deb565b5b828204905092915050565b600082825260208201905092915050565b7f426f74466923737761704e6f745061757365643a20535741505f504155534544600082015250565b6000611e92602083611e4b565b9150611e9d82611e5c565b602082019050919050565b60006020820190508181036000830152611ec181611e85565b9050919050565b7f426f74466923537761703a20554e535550504f525445445f4445580000000000600082015250565b6000611efe601b83611e4b565b9150611f0982611ec8565b602082019050919050565b60006020820190508181036000830152611f2d81611ef1565b9050919050565b7f426f74466923537761703a20444154415f4152475f5245515549524544000000600082015250565b6000611f6a601d83611e4b565b9150611f7582611f34565b602082019050919050565b60006020820190508181036000830152611f9981611f5d565b9050919050565b7f426f74466923537761703a205a45524f5f544f4b454e415f4144445200000000600082015250565b6000611fd6601c83611e4b565b9150611fe182611fa0565b602082019050919050565b6000602082019050818103600083015261200581611fc9565b9050919050565b7f426f74466923537761703a20494e53554646494349454e545f42414c414e4345600082015250565b6000612042602083611e4b565b915061204d8261200c565b602082019050919050565b6000602082019050818103600083015261207181612035565b9050919050565b60006120838261166a565b915061208e8361166a565b92508282039050818111156120a6576120a5611d7a565b5b92915050565b60006040820190506120c16000830185611947565b6120ce60208301846116e0565b9392505050565b6000815190506120e481611777565b92915050565b600060208284031215612100576120ff611660565b5b600061210e848285016120d5565b91505092915050565b7f426f74466923537761703a20544f4b454e415f415050524f56414c5f4641494c60008201527f4544000000000000000000000000000000000000000000000000000000000000602082015250565b6000612173602283611e4b565b915061217e82612117565b604082019050919050565b600060208201905081810360008301526121a281612166565b9050919050565b600060a0820190506121be6000830188611741565b6121cb60208301876116e0565b6121d86040830186611947565b6121e560608301856116e0565b6121f26080830184611947565b9695505050505050565b7f426f7446693a205a45524f5f524f555445525f41444452455353000000000000600082015250565b6000612232601a83611e4b565b915061223d826121fc565b602082019050919050565b6000602082019050818103600083015261226181612225565b9050919050565b6000815190506122778161182e565b92915050565b60006020828403121561229357612292611660565b5b60006122a184828501612268565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261233457612333612308565b5b80840192508235915067ffffffffffffffff8211156123565761235561230d565b5b60208301925060018202360383131561237257612371612312565b5b509250929050565b60006123858261166a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036123b7576123b6611d7a565b5b600182019050919050565b600081905092915050565b60006123d882611bf2565b6123e281856123c2565b93506123f2818560208601611c0e565b80840191505092915050565b600061240a82846123cd565b915081905092915050565b7f426f744669235472616e7366657248656c7065723a204554485f5452414e534660008201527f45525f4641494c45440000000000000000000000000000000000000000000000602082015250565b6000612471602983611e4b565b915061247c82612415565b604082019050919050565b600060208201905081810360008301526124a081612464565b9050919050565b60006060820190506124bc6000830186611947565b6124c96020830185611947565b6124d660408301846116e0565b949350505050565b7f426f744669235472616e7366657248656c7065723a20544f4b454e5f5452414e60008201527f534645525f4641494c4544000000000000000000000000000000000000000000602082015250565b600061253a602b83611e4b565b9150612545826124de565b604082019050919050565b600060208201905081810360008301526125698161252d565b905091905056fea2646970667358221220cdf38750ba43d7eaa93c4ed7eba895612ca154c5ac2106d83a67105bd10832e764736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100c65760003560e01c80638da5cb5b1161007f578063aa1fce6911610059578063aa1fce691461024b578063ac9650d81461028e578063f2fde38b146102cb578063f3fef3a3146102f4576100cd565b80638da5cb5b146101ce57806390d49b9d146101f95780639d63042114610222576100cd565b80631b80b510146100cf57806328b70aea1461010c57806339691ed9146101495780636f8e617614610172578063715018a61461018e578063787dce3d146101a5576100cd565b366100cd57005b005b3480156100db57600080fd5b506100f660048036038101906100f191906116a0565b61031d565b60405161010391906116ef565b60405180910390f35b34801561011857600080fd5b50610133600480360381019061012e919061170a565b61035a565b6040516101409190611750565b60405180910390f35b34801561015557600080fd5b50610170600480360381019061016b91906117a3565b61037e565b005b61018c600480360381019061018791906118bf565b6103a3565b005b34801561019a57600080fd5b506101a36108a6565b005b3480156101b157600080fd5b506101cc60048036038101906101c7919061170a565b6108ba565b005b3480156101da57600080fd5b506101e36108ce565b6040516101f09190611956565b60405180910390f35b34801561020557600080fd5b50610220600480360381019061021b9190611971565b6108f8565b005b34801561022e57600080fd5b50610249600480360381019061024491906119dc565b61090c565b005b34801561025757600080fd5b50610272600480360381019061026d9190611a69565b610cab565b6040516102859796959493929190611ab4565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190611b79565b610d5a565b6040516102c29190611d18565b60405180910390f35b3480156102d757600080fd5b506102f260048036038101906102ed9190611971565b610e66565b005b34801561030057600080fd5b5061031b60048036038101906103169190611d3a565b610eec565b005b6000612710828461032e9190611da9565b101561033957600080fd5b61271082846103489190611da9565b6103529190611e1a565b905092915050565b6004818154811061036a57600080fd5b906000526020600020016000915090505481565b610386610f0b565b80600760006101000a81548160ff02191690831515021790555050565b6103ab610f92565b600760009054906101000a900460ff16156103fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f290611ea8565b60405180910390fd5b6000600360008781526020019081526020016000206005015411610454576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044b90611f14565b60405180910390fd5b6000828290501161049a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049190611f80565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610509576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050090611fec565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105a5578334146105a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059790612058565b60405180910390fd5b6105b9565b6105b8836105b1610fd8565b3087610fe0565b5b60006105c78560005461031d565b856105d29190612078565b9050610609846105e0610fd8565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684610fe0565b60006003600088815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600082876106529190612078565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff160361071e5761071885858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050828473ffffffffffffffffffffffffffffffffffffffff166110579092919063ffffffff16565b5061084c565b8573ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b81526004016107599291906120ac565b6020604051808303816000875af1158015610778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079c91906120ea565b6107db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d290612189565b60405180910390fd5b61084a85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050348473ffffffffffffffffffffffffffffffffffffffff166110579092919063ffffffff16565b505b7fa1cf747ad001476b442e3c9c4a2b2180fbc1b3a710b44c90e2f2d23d2f2710c288888860005461087b610fd8565b60405161088c9594939291906121a9565b60405180910390a150505061089f611124565b5050505050565b6108ae610f0b565b6108b8600061112e565b565b6108c2610f0b565b6108cb816111f4565b50565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610900610f0b565b61090981611235565b50565b610914610f0b565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097a90612248565b60405180910390fd5b60008060036000898152602001908152602001600020600501541490506000816109c35760036000898152602001908152602001600020600501546109c5565b425b90507f756e695f763200000000000000000000000000000000000000000000000000008703610ad1578573ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5d919061227d565b94508573ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ace919061227d565b93505b6040518060e001604052808981526020018881526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001828152602001841515815250600360008a8152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015560c08201518160060160006101000a81548160ff0219169083151502179055509050508115610ca15760048890806001815401808255809150506001900390600052602060002001600090919091909150555b5050505050505050565b60036020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050154908060060160009054906101000a900460ff16905087565b60608282905067ffffffffffffffff811115610d7957610d786122aa565b5b604051908082528060200260200182016040528015610dac57816020015b6060815260200190600190039081610d975790505b50905060005b83839050811015610e5f57610e2e30858584818110610dd457610dd36122d9565b5b9050602002810190610de69190612317565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506112b0565b828281518110610e4157610e406122d9565b5b60200260200101819052508080610e579061237a565b915050610db2565b5092915050565b610e6e610f0b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ee05760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610ed79190611956565b60405180910390fd5b610ee98161112e565b50565b610ef4610f0b565b610f078230610f01610fd8565b84610fe0565b5050565b610f13610fd8565b73ffffffffffffffffffffffffffffffffffffffff16610f316108ce565b73ffffffffffffffffffffffffffffffffffffffff1614610f9057610f54610fd8565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610f879190611956565b60405180910390fd5b565b600260065403610fce576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600681905550565b600033905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036110445761103f8282611334565b611051565b61105084848484611434565b5b50505050565b60608147101561109e57306040517fcd7860590000000000000000000000000000000000000000000000000000000081526004016110959190611956565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1684866040516110c791906123fe565b60006040518083038185875af1925050503d8060008114611104576040519150601f19603f3d011682016040523d82523d6000602084013e611109565b606091505b509150915061111986838361158c565b925050509392505050565b6001600681905550565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b806000819055507fdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b18160405161122a91906116ef565b60405180910390a150565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3d21e5a2b633291bd1ff5f9c654e402d063783c95759d2ea521b31fb30e4da41816040516112a59190611956565b60405180910390a150565b60606000808473ffffffffffffffffffffffffffffffffffffffff16846040516112da91906123fe565b600060405180830381855af49150503d8060008114611315576040519150601f19603f3d011682016040523d82523d6000602084013e61131a565b606091505b509150915061132a85838361158c565b9250505092915050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811115611369576113686122aa565b5b6040519080825280601f01601f19166020018201604052801561139b5781602001600182028036833780820191505090505b506040516113a991906123fe565b60006040518083038185875af1925050503d80600081146113e6576040519150601f19603f3d011682016040523d82523d6000602084013e6113eb565b606091505b505090508061142f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142690612487565b60405180910390fd5b505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b86868660405160240161146b939291906124a7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516114d591906123fe565b6000604051808303816000865af19150503d8060008114611512576040519150601f19603f3d011682016040523d82523d6000602084013e611517565b606091505b5091509150818015611545575060008151148061154457508080602001905181019061154391906120ea565b5b5b611584576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157b90612550565b60405180910390fd5b505050505050565b6060826115a15761159c8261161b565b611613565b600082511480156115c9575060008473ffffffffffffffffffffffffffffffffffffffff163b145b1561160b57836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016116029190611956565b60405180910390fd5b819050611614565b5b9392505050565b60008151111561162e5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080fd5b600080fd5b6000819050919050565b61167d8161166a565b811461168857600080fd5b50565b60008135905061169a81611674565b92915050565b600080604083850312156116b7576116b6611660565b5b60006116c58582860161168b565b92505060206116d68582860161168b565b9150509250929050565b6116e98161166a565b82525050565b600060208201905061170460008301846116e0565b92915050565b6000602082840312156117205761171f611660565b5b600061172e8482850161168b565b91505092915050565b6000819050919050565b61174a81611737565b82525050565b60006020820190506117656000830184611741565b92915050565b60008115159050919050565b6117808161176b565b811461178b57600080fd5b50565b60008135905061179d81611777565b92915050565b6000602082840312156117b9576117b8611660565b5b60006117c78482850161178e565b91505092915050565b6117d981611737565b81146117e457600080fd5b50565b6000813590506117f6816117d0565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611827826117fc565b9050919050565b6118378161181c565b811461184257600080fd5b50565b6000813590506118548161182e565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261187f5761187e61185a565b5b8235905067ffffffffffffffff81111561189c5761189b61185f565b5b6020830191508360018202830111156118b8576118b7611864565b5b9250929050565b6000806000806000608086880312156118db576118da611660565b5b60006118e9888289016117e7565b95505060206118fa8882890161168b565b945050604061190b88828901611845565b935050606086013567ffffffffffffffff81111561192c5761192b611665565b5b61193888828901611869565b92509250509295509295909350565b6119508161181c565b82525050565b600060208201905061196b6000830184611947565b92915050565b60006020828403121561198757611986611660565b5b600061199584828501611845565b91505092915050565b60006119a9826117fc565b9050919050565b6119b98161199e565b81146119c457600080fd5b50565b6000813590506119d6816119b0565b92915050565b60008060008060008060c087890312156119f9576119f8611660565b5b6000611a0789828a016117e7565b9650506020611a1889828a016117e7565b9550506040611a2989828a016119c7565b9450506060611a3a89828a01611845565b9350506080611a4b89828a01611845565b92505060a0611a5c89828a0161178e565b9150509295509295509295565b600060208284031215611a7f57611a7e611660565b5b6000611a8d848285016117e7565b91505092915050565b611a9f8161199e565b82525050565b611aae8161176b565b82525050565b600060e082019050611ac9600083018a611741565b611ad66020830189611741565b611ae36040830188611a96565b611af06060830187611947565b611afd6080830186611947565b611b0a60a08301856116e0565b611b1760c0830184611aa5565b98975050505050505050565b60008083601f840112611b3957611b3861185a565b5b8235905067ffffffffffffffff811115611b5657611b5561185f565b5b602083019150836020820283011115611b7257611b71611864565b5b9250929050565b60008060208385031215611b9057611b8f611660565b5b600083013567ffffffffffffffff811115611bae57611bad611665565b5b611bba85828601611b23565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611c2c578082015181840152602081019050611c11565b60008484015250505050565b6000601f19601f8301169050919050565b6000611c5482611bf2565b611c5e8185611bfd565b9350611c6e818560208601611c0e565b611c7781611c38565b840191505092915050565b6000611c8e8383611c49565b905092915050565b6000602082019050919050565b6000611cae82611bc6565b611cb88185611bd1565b935083602082028501611cca85611be2565b8060005b85811015611d065784840389528151611ce78582611c82565b9450611cf283611c96565b925060208a01995050600181019050611cce565b50829750879550505050505092915050565b60006020820190508181036000830152611d328184611ca3565b905092915050565b60008060408385031215611d5157611d50611660565b5b6000611d5f85828601611845565b9250506020611d708582860161168b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611db48261166a565b9150611dbf8361166a565b9250828202611dcd8161166a565b91508282048414831517611de457611de3611d7a565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611e258261166a565b9150611e308361166a565b925082611e4057611e3f611deb565b5b828204905092915050565b600082825260208201905092915050565b7f426f74466923737761704e6f745061757365643a20535741505f504155534544600082015250565b6000611e92602083611e4b565b9150611e9d82611e5c565b602082019050919050565b60006020820190508181036000830152611ec181611e85565b9050919050565b7f426f74466923537761703a20554e535550504f525445445f4445580000000000600082015250565b6000611efe601b83611e4b565b9150611f0982611ec8565b602082019050919050565b60006020820190508181036000830152611f2d81611ef1565b9050919050565b7f426f74466923537761703a20444154415f4152475f5245515549524544000000600082015250565b6000611f6a601d83611e4b565b9150611f7582611f34565b602082019050919050565b60006020820190508181036000830152611f9981611f5d565b9050919050565b7f426f74466923537761703a205a45524f5f544f4b454e415f4144445200000000600082015250565b6000611fd6601c83611e4b565b9150611fe182611fa0565b602082019050919050565b6000602082019050818103600083015261200581611fc9565b9050919050565b7f426f74466923537761703a20494e53554646494349454e545f42414c414e4345600082015250565b6000612042602083611e4b565b915061204d8261200c565b602082019050919050565b6000602082019050818103600083015261207181612035565b9050919050565b60006120838261166a565b915061208e8361166a565b92508282039050818111156120a6576120a5611d7a565b5b92915050565b60006040820190506120c16000830185611947565b6120ce60208301846116e0565b9392505050565b6000815190506120e481611777565b92915050565b600060208284031215612100576120ff611660565b5b600061210e848285016120d5565b91505092915050565b7f426f74466923537761703a20544f4b454e415f415050524f56414c5f4641494c60008201527f4544000000000000000000000000000000000000000000000000000000000000602082015250565b6000612173602283611e4b565b915061217e82612117565b604082019050919050565b600060208201905081810360008301526121a281612166565b9050919050565b600060a0820190506121be6000830188611741565b6121cb60208301876116e0565b6121d86040830186611947565b6121e560608301856116e0565b6121f26080830184611947565b9695505050505050565b7f426f7446693a205a45524f5f524f555445525f41444452455353000000000000600082015250565b6000612232601a83611e4b565b915061223d826121fc565b602082019050919050565b6000602082019050818103600083015261226181612225565b9050919050565b6000815190506122778161182e565b92915050565b60006020828403121561229357612292611660565b5b60006122a184828501612268565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261233457612333612308565b5b80840192508235915067ffffffffffffffff8211156123565761235561230d565b5b60208301925060018202360383131561237257612371612312565b5b509250929050565b60006123858261166a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036123b7576123b6611d7a565b5b600182019050919050565b600081905092915050565b60006123d882611bf2565b6123e281856123c2565b93506123f2818560208601611c0e565b80840191505092915050565b600061240a82846123cd565b915081905092915050565b7f426f744669235472616e7366657248656c7065723a204554485f5452414e534660008201527f45525f4641494c45440000000000000000000000000000000000000000000000602082015250565b6000612471602983611e4b565b915061247c82612415565b604082019050919050565b600060208201905081810360008301526124a081612464565b9050919050565b60006060820190506124bc6000830186611947565b6124c96020830185611947565b6124d660408301846116e0565b949350505050565b7f426f744669235472616e7366657248656c7065723a20544f4b454e5f5452414e60008201527f534645525f4641494c4544000000000000000000000000000000000000000000602082015250565b600061253a602b83611e4b565b9150612545826124de565b604082019050919050565b600060208201905081810360008301526125698161252d565b905091905056fea2646970667358221220cdf38750ba43d7eaa93c4ed7eba895612ca154c5ac2106d83a67105bd10832e764736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "calPercentage(uint256,uint256)": {
        "details": "convert percentage in basis point of a value ",
        "params": {
          "amount": "the amount to be calculated on",
          "bps": "percentage value in basis point"
        }
      },
      "multicall(bytes[])": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pauseSwap(bool)": {
        "details": "pause the swap operation for the contract",
        "params": {
          "opt": "true or false "
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setFeeWallet(address)": {
        "details": "set the address for taking the protocol fees",
        "params": {
          "addr": "the fee in percentage basis point"
        }
      },
      "setProtocolFee(uint256)": {
        "details": "protocol fee in basis point",
        "params": {
          "_feeBps": "the fee in percentage basis point"
        }
      },
      "swap(bytes32,uint256,address,bytes)": {
        "details": "perform a swap",
        "params": {
          "amount": "the total amount including the protocol fee for the swap",
          "payload": "the encoded swap data to foward to the router",
          "routerId": "the identifier of the router to use",
          "tokenA": "the token to swap into another token (tokenB)"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address,uint256)": {
        "details": "withdraw any stucked tokens in the contract",
        "params": {
          "amount": "the amount to move out",
          "token": "the token address to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 755,
        "contract": "contracts/Factory.sol:Factory",
        "label": "PROTOCOL_FEE",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 757,
        "contract": "contracts/Factory.sol:Factory",
        "label": "FEE_WALLET",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 760,
        "contract": "contracts/Factory.sol:Factory",
        "label": "NATIVE_TOKEN",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 765,
        "contract": "contracts/Factory.sol:Factory",
        "label": "routers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(RouterParams)783_storage)"
      },
      {
        "astId": 768,
        "contract": "contracts/Factory.sol:Factory",
        "label": "routersIds",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 8,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 571,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_status",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3015,
        "contract": "contracts/Factory.sol:Factory",
        "label": "swapPaused",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(RouterParams)783_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Globals.RouterParams)",
        "numberOfBytes": "32",
        "value": "t_struct(RouterParams)783_storage"
      },
      "t_struct(RouterParams)783_storage": {
        "encoding": "inplace",
        "label": "struct Globals.RouterParams",
        "members": [
          {
            "astId": 770,
            "contract": "contracts/Factory.sol:Factory",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 772,
            "contract": "contracts/Factory.sol:Factory",
            "label": "adapter",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 774,
            "contract": "contracts/Factory.sol:Factory",
            "label": "route",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 776,
            "contract": "contracts/Factory.sol:Factory",
            "label": "factory",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 778,
            "contract": "contracts/Factory.sol:Factory",
            "label": "weth",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 780,
            "contract": "contracts/Factory.sol:Factory",
            "label": "createdAt",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 782,
            "contract": "contracts/Factory.sol:Factory",
            "label": "enabled",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
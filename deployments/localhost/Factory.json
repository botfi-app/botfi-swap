{
  "address": "0x142D18FaA1322CdEaA7fBD9d985312303B71163a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "feeWallet",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetFeeWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "SetProtocolFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "routerId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeBps",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "quoter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "addRoute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bps",
          "type": "uint256"
        }
      ],
      "name": "calPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "opt",
          "type": "bool"
        }
      ],
      "name": "enableRoute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRoutes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "group",
              "type": "bytes32"
            },
            {
              "internalType": "address payable",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "weth",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "quoter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            }
          ],
          "internalType": "struct Defs.RouteParams[]",
          "name": "rp",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall.Call[]",
          "name": "calls",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "revertOnError",
          "type": "bool"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall.Result[]",
          "name": "results",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "opt",
          "type": "bool"
        }
      ],
      "name": "pauseSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "routes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "quoter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "routesIds",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setFeeWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeBps",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "routeId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xcfe84f70ba528718b8fb6396dc50486bd9d9906b4050df4ac68d2832f3046d5e",
  "receipt": {
    "to": null,
    "from": "0xc3490a43FF5825F34f714fd52697f2Ed2c7D44F8",
    "contractAddress": "0x142D18FaA1322CdEaA7fBD9d985312303B71163a",
    "transactionIndex": 0,
    "gasUsed": "3045645",
    "logsBloom": "0x
    "blockHash": "0x00e91f964da4e7a0af638562c52cf5de14beb9d10b89f5aa722c25aab1b00b2c",
    "transactionHash": "0xcfe84f70ba528718b8fb6396dc50486bd9d9906b4050df4ac68d2832f3046d5e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 18541153,
        "transactionHash": "0xcfe84f70ba528718b8fb6396dc50486bd9d9906b4050df4ac68d2832f3046d5e",
        "address": "0x142D18FaA1322CdEaA7fBD9d985312303B71163a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c3490a43ff5825f34f714fd52697f2ed2c7d44f8"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x00e91f964da4e7a0af638562c52cf5de14beb9d10b89f5aa722c25aab1b00b2c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18541153,
        "transactionHash": "0xcfe84f70ba528718b8fb6396dc50486bd9d9906b4050df4ac68d2832f3046d5e",
        "address": "0x142D18FaA1322CdEaA7fBD9d985312303B71163a",
        "topics": [
          "0xdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b1"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000064",
        "logIndex": 1,
        "blockHash": "0x00e91f964da4e7a0af638562c52cf5de14beb9d10b89f5aa722c25aab1b00b2c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18541153,
        "transactionHash": "0xcfe84f70ba528718b8fb6396dc50486bd9d9906b4050df4ac68d2832f3046d5e",
        "address": "0x142D18FaA1322CdEaA7fBD9d985312303B71163a",
        "topics": [
          "0x3d21e5a2b633291bd1ff5f9c654e402d063783c95759d2ea521b31fb30e4da41"
        ],
        "data": "0x00000000000000000000000092c9e17a2f02b2119350f3e90918bed3c6e24f3c",
        "logIndex": 2,
        "blockHash": "0x00e91f964da4e7a0af638562c52cf5de14beb9d10b89f5aa722c25aab1b00b2c"
      }
    ],
    "blockNumber": 18541153,
    "cumulativeGasUsed": "3045645",
    "status": 1,
    "byzantium": true
  },
  "args": [
    100,
    "0x92c9E17a2f02b2119350F3E90918bEd3c6e24F3c"
  ],
  "numDeployments": 1,
  "solcInputHash": "e02e4d2896fabc25bd0afd1278c33495",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetFeeWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SetProtocolFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"routerId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"addRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"calPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"opt\",\"type\":\"bool\"}],\"name\":\"enableRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRoutes\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"struct Defs.RouteParams[]\",\"name\":\"rp\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"revertOnError\",\"type\":\"bool\"}],\"name\":\"multicall\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall.Result[]\",\"name\":\"results\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"opt\",\"type\":\"bool\"}],\"name\":\"pauseSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"routes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"routesIds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeBps\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"routeId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"addRoute(bytes32,bytes32,address,address,address,address,bool)\":{\"details\":\"addRouter add a router params\",\"params\":{\"enabled\":\"is the router enabled or not\",\"factory\":\"the factory address\",\"group\":\"router group - uni_v2, uni_v3 ....\",\"id\":\"router id\",\"quoter\":\"swap quoter \",\"router\":\"the router address \",\"weth\":\"wrapped ether or wrapped native token\"}},\"calPercentage(uint256,uint256)\":{\"details\":\"convert percentage in basis point of a value \",\"params\":{\"amount\":\"the amount to be calculated on\",\"bps\":\"percentage value in basis point\"}},\"enableRoute(bytes32,bool)\":{\"details\":\"enable or disable a route\",\"params\":{\"id\":\"the router id\",\"opt\":\"true or false\"}},\"getAllRoutes()\":{\"details\":\"getAllRoutes get all the routers returns array \"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pauseSwap(bool)\":{\"details\":\"pause the swap operation for the contract\",\"params\":{\"opt\":\"true or false \"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setFeeWallet(address)\":{\"details\":\"set the address for taking the protocol fees\",\"params\":{\"addr\":\"the fee in percentage basis point\"}},\"setProtocolFee(uint256)\":{\"details\":\"protocol fee in basis point\",\"params\":{\"_feeBps\":\"the fee in percentage basis point\"}},\"swap(bytes32,uint256,address,bytes)\":{\"details\":\"perform a swap\",\"params\":{\"amount\":\"the total amount including the protocol fee for the swap\",\"payload\":\"the encoded swap data to foward to the router\",\"routeId\":\"the identifier of the router to use\",\"tokenA\":\"the token to swap into another token (tokenB)\"}},\"sweep(address,uint256)\":{\"details\":\"withdraw any stucked tokens in the contract\",\"params\":{\"amount\":\"the amount to move out\",\"token\":\"the token address to withdraw\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory.sol\":\"Factory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/ContractBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./base/Utils.sol\\\";\\nimport \\\"./base/Defs.sol\\\";\\nimport \\\"./base/Multicall.sol\\\";\\n\\ncontract ContractBase is \\n    Defs, \\n    Context, \\n    Ownable, \\n    Multicall, \\n    ReentrancyGuard \\n{\\n\\n\\n    event SetProtocolFee(uint256);\\n    event SetFeeWallet(address addr);\\n\\n    constructor() Ownable(_msgSender()) {}\\n\\n    /**\\n     * @dev protocol fee in basis point\\n     * @param _feeBps the fee in percentage basis point\\n     */\\n    function __setProtocolFee (uint256 _feeBps)\\n        internal\\n    {\\n        PROTOCOL_FEE = _feeBps;\\n\\n        emit SetProtocolFee(_feeBps);\\n    }\\n\\n    /**\\n     * @dev protocol fee in basis point\\n     * @param _feeBps the fee in percentage basis point\\n     */\\n    function setProtocolFee(uint _feeBps)\\n        public \\n        onlyOwner \\n    {\\n        __setProtocolFee(_feeBps);\\n    }\\n\\n    \\n    function __setFeeWallet(address addr)\\n        internal \\n    {\\n        FEE_WALLET = addr;\\n        emit SetFeeWallet(addr);\\n    }\\n\\n    /**\\n     * @dev set the address for taking the protocol fees\\n     * @param addr the fee in percentage basis point\\n     */\\n    function setFeeWallet(address addr)\\n        public \\n        onlyOwner \\n    {\\n        __setFeeWallet(addr);\\n    }\\n}\\n\",\"keccak256\":\"0x00120ff28de189dfe40c7272807f0055e9b38f88cd2a5de45601873a22c0d128\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ContractBase.sol\\\";\\nimport \\\"./swap/SwapEngine.sol\\\";\\n\\ncontract Factory is ContractBase, SwapEngine {\\n\\n    constructor(\\n        uint    protocolFee,\\n        address feeWallet\\n    ) {     \\n        __setProtocolFee(protocolFee);\\n        __setFeeWallet(feeWallet);\\n    }\\n    \\n}\",\"keccak256\":\"0x394890b11ef8b34761951c491de6616cd029c0856ef14c01af97b0e27087d694\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/Defs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract Defs {\\n\\n    // the protocol fee \\n    uint PROTOCOL_FEE;\\n\\n    // the fee address, for taking fees \\n    address FEE_WALLET;\\n\\n    // native token \\n    address constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n\\n    // id  =>  RouteParams \\n    mapping (bytes32 => RouteParams) public routes;\\n    bytes32[] public routesIds;\\n\\n    struct RouteParams {\\n        bytes32             id;\\n        bytes32             group; //adapter name uni_v2, uni_v3 and 1inch, balancer\\n        address   payable   router;\\n        address             factory;\\n        address             weth;\\n        address             quoter;\\n        uint256             createdAt;\\n        bool                enabled; \\n    }\\n\\n    /**\\n     * @dev convert percentage in basis point of a value \\n     * @param amount the amount to be calculated on\\n     * @param bps percentage value in basis point\\n     */\\n    function calPercentage(uint amount, uint bps) \\n        public \\n        pure \\n        returns (uint256)\\n    {\\n        require((amount * bps) >= 10_000);\\n        return (amount * bps) / 10_000;\\n    }\\n\\n}\",\"keccak256\":\"0x4232d7de094cc2623a72cbe1efbd0629432dac53dcc8d540395b9f549f6089f5\",\"license\":\"MIT\"},\"contracts/base/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\ncontract Multicall {\\n\\n    struct Call {\\n        address payable target;\\n        bytes   data; \\n    }\\n\\n    struct Result {\\n        bool   success;\\n        bytes  data;\\n    }\\n\\n    function multicall(Call[] calldata calls, bool revertOnError) \\n        public \\n        payable  \\n        returns \\n        (Result[] memory results) \\n    {\\n\\n        results = new Result[](calls.length);\\n\\n        for (uint256 i = 0; i < calls.length; i++) {\\n\\n            (bool success, bytes memory result) = calls[i].target.delegatecall(calls[i].data);\\n\\n            if (!success) {\\n               \\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n                if (result.length < 68) revert();\\n\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n\\n                if(revertOnError) {\\n                    revert(abi.decode(result, (string)));\\n                }\\n            }\\n\\n            results[i] = Result (\\n                success,\\n                result\\n            );\\n        }\\n    }\\n}\",\"keccak256\":\"0xdc69fb815cbaf8cfac5c89aafbbeb6b593af31f044850301ae1cc1ff1e95654f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Defs.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ncontract TransferHelper is Defs {\\n\\n    /**\\n     * @dev safeTransfer eth or token \\n     * @param token, the token contract\\n     * @param from the sender's address \\n     * @param to the recipient's address\\n     * @param value the value to send\\n    */\\n    function transferAsset(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        \\n        if(token == NATIVE_TOKEN){\\n            safeTransferETH(to, value);\\n        } else {\\n            safeTransferFrom(token, from, to, value);\\n        }\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'BotFi#TransferHelper: TOKEN_TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'BotFi#TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\",\"keccak256\":\"0x51b937555ca9f1a7622bf6c8172ee3e669fc613558d15997c9dbae4d46a552a2\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nlibrary Utils {\\n\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n}\",\"keccak256\":\"0xc362e2117b035f0117be46f04422be11297ece6ab03dcfde07db97f5cb2f9728\",\"license\":\"GPL-2.0-or-later\"},\"contracts/swap/SwapEngine.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ContractBase.sol\\\";\\nimport \\\"../base/TransferHelper.sol\\\";\\n//import \\\"hardhat/console.sol\\\";\\n\\n\\ncontract SwapEngine is TransferHelper, ContractBase {\\n\\n    event Swap(\\n        bytes32 routerId, \\n        uint256 amount,\\n        address tokenA,\\n        uint    feeBps,\\n        address account  \\n    );\\n\\n    using Address for address;\\n    using Address for address payable;\\n\\n    bool private isPaused;\\n\\n    receive() external payable{}\\n    fallback() external payable{}\\n\\n    modifier notPaused() {\\n        require(!isPaused, \\\"BotFi#swapNotPaused: SWAP_PAUSED\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev addRouter add a router params\\n     * @param id       router id\\n     * @param group    router group - uni_v2, uni_v3 ....\\n     * @param router   the router address \\n     * @param factory  the factory address\\n     * @param weth     wrapped ether or wrapped native token\\n     * @param quoter  swap quoter \\n     * @param enabled  is the router enabled or not\\n     */\\n    function addRoute(\\n        bytes32             id,\\n        bytes32             group, // uni_v2, uni_v3, 1inch, ...                  \\n        address  payable    router, \\n        address             factory,\\n        address             weth,\\n        address             quoter,\\n        bool                enabled\\n    ) \\n        external \\n        onlyOwner \\n    {\\n\\n        require(router != address(0), \\\"BotFi#SwapEngine#addRouter: ZERO_ROUTER_ADDRESS\\\");\\n\\n        require(Utils.isContract(router), \\\"BotFi#SwapEngine#addRouter: ROUTER_NOT_A_CONTRACT\\\");\\n        require(Utils.isContract(factory), \\\"BotFi#SwapEngine#addRouter: FACTORY_NOT_A_CONTRACT\\\");\\n        require(Utils.isContract(weth), \\\"BotFi#SwapEngine#addRouter: WETH_NOT_A_CONTRACT\\\");\\n\\n        if(quoter != address(0)){\\n            require(Utils.isContract(quoter), \\\"BotFi#SwapEngine#addRouter: QUOTER_NOT_A_CONTRACT\\\");\\n        }\\n\\n        bool isNew = (routes[id].createdAt == 0);\\n        uint createdAt = (isNew) ? block.timestamp : routes[id].createdAt;\\n\\n\\n        routes[id] = RouteParams(\\n            id,\\n            group, \\n            router,\\n            factory,\\n            weth,\\n            quoter,\\n            createdAt,\\n            enabled\\n        );\\n\\n        if(isNew) routesIds.push(id);\\n    }\\n\\n    /**\\n     * @dev enable or disable a route\\n     * @param id the router id\\n     * @param opt true or false\\n     */\\n    function enableRoute(bytes32 id, bool opt)\\n        external\\n    {\\n        require(routes[id].createdAt > 0, \\\"BotFi:SwapEngine#enableRouter: INVALID_ROUTE\\\");\\n\\n        routes[id].enabled = opt;\\n    }\\n\\n    /**\\n     * @dev getAllRoutes get all the routers\\n     * returns array \\n     */\\n    function getAllRoutes()\\n        external\\n        view \\n        returns (RouteParams[] memory rp)\\n    {\\n       rp = new RouteParams[](routesIds.length); \\n\\n        for(uint i=0; i < routesIds.length; i++){\\n            rp[i] = routes[routesIds[i]];\\n        }\\n    }\\n\\n    /**\\n     * @dev pause the swap operation for the contract\\n     * @param opt true or false \\n     */\\n    function pauseSwap(bool opt) \\n        external\\n        onlyOwner \\n    {\\n        isPaused = opt;\\n    }\\n\\n    modifier validateRouter(bytes32 routeId) {\\n        require(routes[routeId].createdAt > 0, \\\"BotFi#SwapEngine#validateRouter: UNKNOWN_ROUTER_ID\\\");\\n\\n        require(routes[routeId].enabled, \\\"BotFi#SwapEngine#validateRouter: ROUTER_NOT_ENABLED\\\");\\n\\n        _;\\n    }\\n\\n\\n    /**\\n     * @dev perform a swap\\n     * @param routeId the identifier of the router to use\\n     * @param amount the total amount including the protocol fee for the swap\\n     * @param tokenA the token to swap into another token (tokenB)\\n     * @param payload the encoded swap data to foward to the router\\n     */ \\n    function swap(\\n        bytes32 routeId,\\n        uint256 amount, \\n        address tokenA, \\n        bytes calldata payload\\n    ) \\n        external \\n        payable\\n        validateRouter(routeId)\\n        nonReentrant()\\n        notPaused()\\n    {   \\n\\n        require(routes[routeId].createdAt > 0, \\\"BotFi#Swap: UNSUPPORTED_DEX\\\");\\n        require(payload.length > 0, \\\"BotFi#Swap: DATA_ARG_REQUIRED\\\");\\n        require(tokenA != address(0), \\\"BotFi#Swap: ZERO_TOKENA_ADDR\\\");\\n\\n        if(tokenA == NATIVE_TOKEN) {\\n            //validate native token input\\n            require(msg.value == amount, \\\"BotFi#Swap: INSUFFICIENT_BALANCE\\\");\\n        } else {\\n            \\n            // lets transfer the tokens from the user\\n            transferAsset(tokenA, _msgSender(), address(this), amount);\\n        }\\n\\n        //get fee amt\\n        uint feeAmt = amount - calPercentage(amount, PROTOCOL_FEE);\\n\\n        // lets perform fee transfer \\n        transferAsset(tokenA, _msgSender(), FEE_WALLET, feeAmt);\\n\\n        address router = routes[routeId].router;\\n        uint256 swapAmt = amount - feeAmt;\\n\\n\\n        if(tokenA == NATIVE_TOKEN){\\n            router.functionCallWithValue(payload, swapAmt);\\n        } else {\\n\\n            require(IERC20(tokenA).approve(router, swapAmt), \\\"BotFi#SwapEngine: TOKENA_APPROVAL_FAILED\\\");\\n\\n            router.functionCallWithValue(payload, msg.value);\\n        }\\n\\n        emit Swap(routeId, amount, tokenA, PROTOCOL_FEE, _msgSender());\\n    }\\n    \\n    /**\\n     * @dev withdraw any stucked tokens in the contract\\n     * @param token the token address to withdraw\\n     * @param amount the amount to move out\\n     */\\n    function sweep(address token, uint256 amount) \\n        external \\n        onlyOwner \\n    {\\n        transferAsset(token, address(this), _msgSender(), amount);\\n    }\\n\\n}   \",\"keccak256\":\"0x0f91455310020d42b6ac7f8962aac41161deed95e57f0c4be19ad540f3d07092\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200384838038062003848833981810160405281019062000037919062000333565b620000476200010060201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000bc5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000b391906200038b565b60405180910390fd5b620000cd816200010860201b60201c565b506001600581905550620000e782620001ce60201b60201c565b620000f8816200021160201b60201c565b5050620003d6565b600033905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b806000819055507fdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b181604051620002069190620003b9565b60405180910390a150565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3d21e5a2b633291bd1ff5f9c654e402d063783c95759d2ea521b31fb30e4da41816040516200028391906200038b565b60405180910390a150565b600080fd5b6000819050919050565b620002a88162000293565b8114620002b457600080fd5b50565b600081519050620002c8816200029d565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002fb82620002ce565b9050919050565b6200030d81620002ee565b81146200031957600080fd5b50565b6000815190506200032d8162000302565b92915050565b600080604083850312156200034d576200034c6200028e565b5b60006200035d85828601620002b7565b925050602062000370858286016200031c565b9150509250929050565b6200038581620002ee565b82525050565b6000602082019050620003a260008301846200037a565b92915050565b620003b38162000293565b82525050565b6000602082019050620003d06000830184620003a8565b92915050565b61346280620003e66000396000f3fe6080604052600436106100ec5760003560e01c80636f8e61761161008a5780638ca78528116100595780638ca78528146102e55780638da5cb5b1461030e57806390d49b9d14610339578063f2fde38b14610362576100f3565b80636f8e61761461024c578063715018a614610268578063787dce3d1461027f5780637c249d29146102a8576100f3565b80631f696924116100c65780631f6969241461019f57806330f27cac146101ca57806339691ed9146101fa5780636ea056a914610223576100f3565b8063066e9481146100f55780630dd3ca83146101395780631b80b51014610162576100f3565b366100f357005b005b34801561010157600080fd5b5061011c60048036038101906101179190611cc4565b61038b565b604051610130989796959493929190611d96565b60405180910390f35b34801561014557600080fd5b50610160600480360381019061015b9190611e40565b610460565b005b34801561016e57600080fd5b5061018960048036038101906101849190611eac565b6104eb565b6040516101969190611eec565b60405180910390f35b3480156101ab57600080fd5b506101b4610528565b6040516101c191906120a4565b60405180910390f35b6101e460048036038101906101df919061212b565b610798565b6040516101f1919061231a565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c919061233c565b61099b565b005b34801561022f57600080fd5b5061024a60048036038101906102459190612395565b6109c0565b005b6102666004803603810190610261919061242b565b6109df565b005b34801561027457600080fd5b5061027d610f84565b005b34801561028b57600080fd5b506102a660048036038101906102a191906124b3565b610f98565b005b3480156102b457600080fd5b506102cf60048036038101906102ca91906124b3565b610fac565b6040516102dc91906124e0565b60405180910390f35b3480156102f157600080fd5b5061030c60048036038101906103079190612527565b610fd0565b005b34801561031a57600080fd5b5061032361141f565b60405161033091906125c9565b60405180910390f35b34801561034557600080fd5b50610360600480360381019061035b91906125e4565b611449565b005b34801561036e57600080fd5b50610389600480360381019061038491906125e4565b61145d565b005b60026020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060154908060070160009054906101000a900460ff16905088565b60006002600084815260200190815260200160002060060154116104b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b090612694565b60405180910390fd5b806002600084815260200190815260200160002060070160006101000a81548160ff0219169083151502179055505050565b600061271082846104fc91906126e3565b101561050757600080fd5b612710828461051691906126e3565b6105209190612754565b905092915050565b606060038054905067ffffffffffffffff81111561054957610548612785565b5b60405190808252806020026020018201604052801561058257816020015b61056f611bb9565b8152602001906001900390816105675790505b50905060005b6003805490508110156107945760026000600383815481106105ad576105ac6127b4565b5b906000526020600020015481526020019081526020016000206040518061010001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682015481526020016007820160009054906101000a900460ff161515151581525050828281518110610776576107756127b4565b5b6020026020010181905250808061078c906127e3565b915050610588565b5090565b60608383905067ffffffffffffffff8111156107b7576107b6612785565b5b6040519080825280602002602001820160405280156107f057816020015b6107dd611c5e565b8152602001906001900390816107d55790505b50905060005b8484905081101561099357600080868684818110610817576108166127b4565b5b9050602002810190610829919061283a565b600001602081019061083b9190612862565b73ffffffffffffffffffffffffffffffffffffffff16878785818110610864576108636127b4565b5b9050602002810190610876919061283a565b8060200190610885919061288f565b604051610893929190612931565b600060405180830381855af49150503d80600081146108ce576040519150601f19603f3d011682016040523d82523d6000602084013e6108d3565b606091505b509150915081610949576044815110156108ec57600080fd5b6004810190508415610948578080602001905181019061090c9190612a3c565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093f9190612ac9565b60405180910390fd5b5b6040518060400160405280831515815260200182815250848481518110610973576109726127b4565b5b60200260200101819052505050808061098b906127e3565b9150506107f6565b509392505050565b6109a36114e3565b80600660006101000a81548160ff02191690831515021790555050565b6109c86114e3565b6109db82306109d561156a565b84611572565b5050565b846000600260008381526020019081526020016000206006015411610a39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3090612b5d565b60405180910390fd5b6002600082815260200190815260200160002060070160009054906101000a900460ff16610a9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9390612bef565b60405180910390fd5b610aa46115db565b600660009054906101000a900460ff1615610af4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aeb90612c5b565b60405180910390fd5b6000600260008881526020019081526020016000206006015411610b4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4490612cc7565b60405180910390fd5b60008383905011610b93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8a90612d33565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610c02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf990612d9f565b60405180910390fd5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610c9057843414610c8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8290612e0b565b60405180910390fd5b610ca4565b610ca384610c9c61156a565b3088611572565b5b6000610cb2866000546104eb565b86610cbd9190612e2b565b9050610cf485610ccb61156a565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684611572565b60006002600089815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008288610d3d9190612e2b565b905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1603610dfb57610df586868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050828473ffffffffffffffffffffffffffffffffffffffff166116219092919063ffffffff16565b50610f29565b8673ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b8152600401610e36929190612e5f565b6020604051808303816000875af1158015610e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e799190612e9d565b610eb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eaf90612f3c565b60405180910390fd5b610f2786868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050348473ffffffffffffffffffffffffffffffffffffffff166116219092919063ffffffff16565b505b7fa1cf747ad001476b442e3c9c4a2b2180fbc1b3a710b44c90e2f2d23d2f2710c2898989600054610f5861156a565b604051610f69959493929190612f5c565b60405180910390a1505050610f7c6116ee565b505050505050565b610f8c6114e3565b610f9660006116f8565b565b610fa06114e3565b610fa9816117be565b50565b60038181548110610fbc57600080fd5b906000526020600020016000915090505481565b610fd86114e3565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603611047576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103e90613021565b60405180910390fd5b611050856117ff565b61108f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611086906130b3565b60405180910390fd5b611098846117ff565b6110d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ce90613145565b60405180910390fd5b6110e0836117ff565b61111f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611116906131d7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461119c5761115c826117ff565b61119b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119290613269565b60405180910390fd5b5b600080600260008a8152602001908152602001600020600601541490506000816111dc57600260008a8152602001908152602001600020600601546111de565b425b90506040518061010001604052808a81526020018981526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001828152602001841515815250600260008b8152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c0820151816006015560e08201518160070160006101000a81548160ff02191690831515021790555090505081156114145760038990806001815401808255809150506001900390600052602060002001600090919091909150555b505050505050505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6114516114e3565b61145a81611812565b50565b6114656114e3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036114d75760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016114ce91906125c9565b60405180910390fd5b6114e0816116f8565b50565b6114eb61156a565b73ffffffffffffffffffffffffffffffffffffffff1661150961141f565b73ffffffffffffffffffffffffffffffffffffffff16146115685761152c61156a565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161155f91906125c9565b60405180910390fd5b565b600033905090565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036115c8576115c3828261188d565b6115d5565b6115d48484848461198d565b5b50505050565b600260055403611617576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600581905550565b60608147101561166857306040517fcd78605900000000000000000000000000000000000000000000000000000000815260040161165f91906125c9565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16848660405161169191906132ba565b60006040518083038185875af1925050503d80600081146116ce576040519150601f19603f3d011682016040523d82523d6000602084013e6116d3565b606091505b50915091506116e3868383611ae5565b925050509392505050565b6001600581905550565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b806000819055507fdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b1816040516117f49190611eec565b60405180910390a150565b600080823b905060008111915050919050565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3d21e5a2b633291bd1ff5f9c654e402d063783c95759d2ea521b31fb30e4da418160405161188291906125c9565b60405180910390a150565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff8111156118c2576118c1612785565b5b6040519080825280601f01601f1916602001820160405280156118f45781602001600182028036833780820191505090505b5060405161190291906132ba565b60006040518083038185875af1925050503d806000811461193f576040519150601f19603f3d011682016040523d82523d6000602084013e611944565b606091505b5050905080611988576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197f90613343565b60405180910390fd5b505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b8686866040516024016119c493929190613363565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611a2e91906132ba565b6000604051808303816000865af19150503d8060008114611a6b576040519150601f19603f3d011682016040523d82523d6000602084013e611a70565b606091505b5091509150818015611a9e5750600081511480611a9d575080806020019051810190611a9c9190612e9d565b5b5b611add576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad49061340c565b60405180910390fd5b505050505050565b606082611afa57611af582611b74565b611b6c565b60008251148015611b22575060008473ffffffffffffffffffffffffffffffffffffffff163b145b15611b6457836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401611b5b91906125c9565b60405180910390fd5b819050611b6d565b5b9392505050565b600081511115611b875780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518061010001604052806000801916815260200160008019168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b6040518060400160405280600015158152602001606081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611ca181611c8e565b8114611cac57600080fd5b50565b600081359050611cbe81611c98565b92915050565b600060208284031215611cda57611cd9611c84565b5b6000611ce884828501611caf565b91505092915050565b611cfa81611c8e565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d2b82611d00565b9050919050565b611d3b81611d20565b82525050565b6000611d4c82611d00565b9050919050565b611d5c81611d41565b82525050565b6000819050919050565b611d7581611d62565b82525050565b60008115159050919050565b611d9081611d7b565b82525050565b600061010082019050611dac600083018b611cf1565b611db9602083018a611cf1565b611dc66040830189611d32565b611dd36060830188611d53565b611de06080830187611d53565b611ded60a0830186611d53565b611dfa60c0830185611d6c565b611e0760e0830184611d87565b9998505050505050505050565b611e1d81611d7b565b8114611e2857600080fd5b50565b600081359050611e3a81611e14565b92915050565b60008060408385031215611e5757611e56611c84565b5b6000611e6585828601611caf565b9250506020611e7685828601611e2b565b9150509250929050565b611e8981611d62565b8114611e9457600080fd5b50565b600081359050611ea681611e80565b92915050565b60008060408385031215611ec357611ec2611c84565b5b6000611ed185828601611e97565b9250506020611ee285828601611e97565b9150509250929050565b6000602082019050611f016000830184611d6c565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611f3c81611c8e565b82525050565b611f4b81611d20565b82525050565b611f5a81611d41565b82525050565b611f6981611d62565b82525050565b611f7881611d7b565b82525050565b61010082016000820151611f956000850182611f33565b506020820151611fa86020850182611f33565b506040820151611fbb6040850182611f42565b506060820151611fce6060850182611f51565b506080820151611fe16080850182611f51565b5060a0820151611ff460a0850182611f51565b5060c082015161200760c0850182611f60565b5060e082015161201a60e0850182611f6f565b50505050565b600061202c8383611f7e565b6101008301905092915050565b6000602082019050919050565b600061205182611f07565b61205b8185611f12565b935061206683611f23565b8060005b8381101561209757815161207e8882612020565b975061208983612039565b92505060018101905061206a565b5085935050505092915050565b600060208201905081810360008301526120be8184612046565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126120eb576120ea6120c6565b5b8235905067ffffffffffffffff811115612108576121076120cb565b5b602083019150836020820283011115612124576121236120d0565b5b9250929050565b60008060006040848603121561214457612143611c84565b5b600084013567ffffffffffffffff81111561216257612161611c89565b5b61216e868287016120d5565b9350935050602061218186828701611e2b565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156121f15780820151818401526020810190506121d6565b60008484015250505050565b6000601f19601f8301169050919050565b6000612219826121b7565b61222381856121c2565b93506122338185602086016121d3565b61223c816121fd565b840191505092915050565b600060408301600083015161225f6000860182611f6f565b5060208301518482036020860152612277828261220e565b9150508091505092915050565b60006122908383612247565b905092915050565b6000602082019050919050565b60006122b08261218b565b6122ba8185612196565b9350836020820285016122cc856121a7565b8060005b8581101561230857848403895281516122e98582612284565b94506122f483612298565b925060208a019950506001810190506122d0565b50829750879550505050505092915050565b6000602082019050818103600083015261233481846122a5565b905092915050565b60006020828403121561235257612351611c84565b5b600061236084828501611e2b565b91505092915050565b61237281611d41565b811461237d57600080fd5b50565b60008135905061238f81612369565b92915050565b600080604083850312156123ac576123ab611c84565b5b60006123ba85828601612380565b92505060206123cb85828601611e97565b9150509250929050565b60008083601f8401126123eb576123ea6120c6565b5b8235905067ffffffffffffffff811115612408576124076120cb565b5b602083019150836001820283011115612424576124236120d0565b5b9250929050565b60008060008060006080868803121561244757612446611c84565b5b600061245588828901611caf565b955050602061246688828901611e97565b945050604061247788828901612380565b935050606086013567ffffffffffffffff81111561249857612497611c89565b5b6124a4888289016123d5565b92509250509295509295909350565b6000602082840312156124c9576124c8611c84565b5b60006124d784828501611e97565b91505092915050565b60006020820190506124f56000830184611cf1565b92915050565b61250481611d20565b811461250f57600080fd5b50565b600081359050612521816124fb565b92915050565b600080600080600080600060e0888a03121561254657612545611c84565b5b60006125548a828b01611caf565b97505060206125658a828b01611caf565b96505060406125768a828b01612512565b95505060606125878a828b01612380565b94505060806125988a828b01612380565b93505060a06125a98a828b01612380565b92505060c06125ba8a828b01611e2b565b91505092959891949750929550565b60006020820190506125de6000830184611d53565b92915050565b6000602082840312156125fa576125f9611c84565b5b600061260884828501612380565b91505092915050565b600082825260208201905092915050565b7f426f7446693a53776170456e67696e6523656e61626c65526f757465723a204960008201527f4e56414c49445f524f5554450000000000000000000000000000000000000000602082015250565b600061267e602c83612611565b915061268982612622565b604082019050919050565b600060208201905081810360008301526126ad81612671565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006126ee82611d62565b91506126f983611d62565b925082820261270781611d62565b9150828204841483151761271e5761271d6126b4565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061275f82611d62565b915061276a83611d62565b92508261277a57612779612725565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006127ee82611d62565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036128205761281f6126b4565b5b600182019050919050565b600080fd5b600080fd5b600080fd5b6000823560016040038336030381126128565761285561282b565b5b80830191505092915050565b60006020828403121561287857612877611c84565b5b600061288684828501612512565b91505092915050565b600080833560016020038436030381126128ac576128ab61282b565b5b80840192508235915067ffffffffffffffff8211156128ce576128cd612830565b5b6020830192506001820236038313156128ea576128e9612835565b5b509250929050565b600081905092915050565b82818337600083830152505050565b600061291883856128f2565b93506129258385846128fd565b82840190509392505050565b600061293e82848661290c565b91508190509392505050565b600080fd5b612958826121fd565b810181811067ffffffffffffffff8211171561297757612976612785565b5b80604052505050565b600061298a611c7a565b9050612996828261294f565b919050565b600067ffffffffffffffff8211156129b6576129b5612785565b5b6129bf826121fd565b9050602081019050919050565b60006129df6129da8461299b565b612980565b9050828152602081018484840111156129fb576129fa61294a565b5b612a068482856121d3565b509392505050565b600082601f830112612a2357612a226120c6565b5b8151612a338482602086016129cc565b91505092915050565b600060208284031215612a5257612a51611c84565b5b600082015167ffffffffffffffff811115612a7057612a6f611c89565b5b612a7c84828501612a0e565b91505092915050565b600081519050919050565b6000612a9b82612a85565b612aa58185612611565b9350612ab58185602086016121d3565b612abe816121fd565b840191505092915050565b60006020820190508181036000830152612ae38184612a90565b905092915050565b7f426f7446692353776170456e67696e652376616c6964617465526f757465723a60008201527f20554e4b4e4f574e5f524f555445525f49440000000000000000000000000000602082015250565b6000612b47603283612611565b9150612b5282612aeb565b604082019050919050565b60006020820190508181036000830152612b7681612b3a565b9050919050565b7f426f7446692353776170456e67696e652376616c6964617465526f757465723a60008201527f20524f555445525f4e4f545f454e41424c454400000000000000000000000000602082015250565b6000612bd9603383612611565b9150612be482612b7d565b604082019050919050565b60006020820190508181036000830152612c0881612bcc565b9050919050565b7f426f74466923737761704e6f745061757365643a20535741505f504155534544600082015250565b6000612c45602083612611565b9150612c5082612c0f565b602082019050919050565b60006020820190508181036000830152612c7481612c38565b9050919050565b7f426f74466923537761703a20554e535550504f525445445f4445580000000000600082015250565b6000612cb1601b83612611565b9150612cbc82612c7b565b602082019050919050565b60006020820190508181036000830152612ce081612ca4565b9050919050565b7f426f74466923537761703a20444154415f4152475f5245515549524544000000600082015250565b6000612d1d601d83612611565b9150612d2882612ce7565b602082019050919050565b60006020820190508181036000830152612d4c81612d10565b9050919050565b7f426f74466923537761703a205a45524f5f544f4b454e415f4144445200000000600082015250565b6000612d89601c83612611565b9150612d9482612d53565b602082019050919050565b60006020820190508181036000830152612db881612d7c565b9050919050565b7f426f74466923537761703a20494e53554646494349454e545f42414c414e4345600082015250565b6000612df5602083612611565b9150612e0082612dbf565b602082019050919050565b60006020820190508181036000830152612e2481612de8565b9050919050565b6000612e3682611d62565b9150612e4183611d62565b9250828203905081811115612e5957612e586126b4565b5b92915050565b6000604082019050612e746000830185611d53565b612e816020830184611d6c565b9392505050565b600081519050612e9781611e14565b92915050565b600060208284031215612eb357612eb2611c84565b5b6000612ec184828501612e88565b91505092915050565b7f426f7446692353776170456e67696e653a20544f4b454e415f415050524f564160008201527f4c5f4641494c4544000000000000000000000000000000000000000000000000602082015250565b6000612f26602883612611565b9150612f3182612eca565b604082019050919050565b60006020820190508181036000830152612f5581612f19565b9050919050565b600060a082019050612f716000830188611cf1565b612f7e6020830187611d6c565b612f8b6040830186611d53565b612f986060830185611d6c565b612fa56080830184611d53565b9695505050505050565b7f426f7446692353776170456e67696e6523616464526f757465723a205a45524f60008201527f5f524f555445525f414444524553530000000000000000000000000000000000602082015250565b600061300b602f83612611565b915061301682612faf565b604082019050919050565b6000602082019050818103600083015261303a81612ffe565b9050919050565b7f426f7446692353776170456e67696e6523616464526f757465723a20524f555460008201527f45525f4e4f545f415f434f4e5452414354000000000000000000000000000000602082015250565b600061309d603183612611565b91506130a882613041565b604082019050919050565b600060208201905081810360008301526130cc81613090565b9050919050565b7f426f7446692353776170456e67696e6523616464526f757465723a204641435460008201527f4f52595f4e4f545f415f434f4e54524143540000000000000000000000000000602082015250565b600061312f603283612611565b915061313a826130d3565b604082019050919050565b6000602082019050818103600083015261315e81613122565b9050919050565b7f426f7446692353776170456e67696e6523616464526f757465723a205745544860008201527f5f4e4f545f415f434f4e54524143540000000000000000000000000000000000602082015250565b60006131c1602f83612611565b91506131cc82613165565b604082019050919050565b600060208201905081810360008301526131f0816131b4565b9050919050565b7f426f7446692353776170456e67696e6523616464526f757465723a2051554f5460008201527f45525f4e4f545f415f434f4e5452414354000000000000000000000000000000602082015250565b6000613253603183612611565b915061325e826131f7565b604082019050919050565b6000602082019050818103600083015261328281613246565b9050919050565b6000613294826121b7565b61329e81856128f2565b93506132ae8185602086016121d3565b80840191505092915050565b60006132c68284613289565b915081905092915050565b7f426f744669235472616e7366657248656c7065723a204554485f5452414e534660008201527f45525f4641494c45440000000000000000000000000000000000000000000000602082015250565b600061332d602983612611565b9150613338826132d1565b604082019050919050565b6000602082019050818103600083015261335c81613320565b9050919050565b60006060820190506133786000830186611d53565b6133856020830185611d53565b6133926040830184611d6c565b949350505050565b7f426f744669235472616e7366657248656c7065723a20544f4b454e5f5452414e60008201527f534645525f4641494c4544000000000000000000000000000000000000000000602082015250565b60006133f6602b83612611565b91506134018261339a565b604082019050919050565b60006020820190508181036000830152613425816133e9565b905091905056fea2646970667358221220cb740a34dd894d6ed69c749a2dfd9f8bd01694c813945003d2a8e9162caae8ff64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100ec5760003560e01c80636f8e61761161008a5780638ca78528116100595780638ca78528146102e55780638da5cb5b1461030e57806390d49b9d14610339578063f2fde38b14610362576100f3565b80636f8e61761461024c578063715018a614610268578063787dce3d1461027f5780637c249d29146102a8576100f3565b80631f696924116100c65780631f6969241461019f57806330f27cac146101ca57806339691ed9146101fa5780636ea056a914610223576100f3565b8063066e9481146100f55780630dd3ca83146101395780631b80b51014610162576100f3565b366100f357005b005b34801561010157600080fd5b5061011c60048036038101906101179190611cc4565b61038b565b604051610130989796959493929190611d96565b60405180910390f35b34801561014557600080fd5b50610160600480360381019061015b9190611e40565b610460565b005b34801561016e57600080fd5b5061018960048036038101906101849190611eac565b6104eb565b6040516101969190611eec565b60405180910390f35b3480156101ab57600080fd5b506101b4610528565b6040516101c191906120a4565b60405180910390f35b6101e460048036038101906101df919061212b565b610798565b6040516101f1919061231a565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c919061233c565b61099b565b005b34801561022f57600080fd5b5061024a60048036038101906102459190612395565b6109c0565b005b6102666004803603810190610261919061242b565b6109df565b005b34801561027457600080fd5b5061027d610f84565b005b34801561028b57600080fd5b506102a660048036038101906102a191906124b3565b610f98565b005b3480156102b457600080fd5b506102cf60048036038101906102ca91906124b3565b610fac565b6040516102dc91906124e0565b60405180910390f35b3480156102f157600080fd5b5061030c60048036038101906103079190612527565b610fd0565b005b34801561031a57600080fd5b5061032361141f565b60405161033091906125c9565b60405180910390f35b34801561034557600080fd5b50610360600480360381019061035b91906125e4565b611449565b005b34801561036e57600080fd5b50610389600480360381019061038491906125e4565b61145d565b005b60026020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060154908060070160009054906101000a900460ff16905088565b60006002600084815260200190815260200160002060060154116104b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b090612694565b60405180910390fd5b806002600084815260200190815260200160002060070160006101000a81548160ff0219169083151502179055505050565b600061271082846104fc91906126e3565b101561050757600080fd5b612710828461051691906126e3565b6105209190612754565b905092915050565b606060038054905067ffffffffffffffff81111561054957610548612785565b5b60405190808252806020026020018201604052801561058257816020015b61056f611bb9565b8152602001906001900390816105675790505b50905060005b6003805490508110156107945760026000600383815481106105ad576105ac6127b4565b5b906000526020600020015481526020019081526020016000206040518061010001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682015481526020016007820160009054906101000a900460ff161515151581525050828281518110610776576107756127b4565b5b6020026020010181905250808061078c906127e3565b915050610588565b5090565b60608383905067ffffffffffffffff8111156107b7576107b6612785565b5b6040519080825280602002602001820160405280156107f057816020015b6107dd611c5e565b8152602001906001900390816107d55790505b50905060005b8484905081101561099357600080868684818110610817576108166127b4565b5b9050602002810190610829919061283a565b600001602081019061083b9190612862565b73ffffffffffffffffffffffffffffffffffffffff16878785818110610864576108636127b4565b5b9050602002810190610876919061283a565b8060200190610885919061288f565b604051610893929190612931565b600060405180830381855af49150503d80600081146108ce576040519150601f19603f3d011682016040523d82523d6000602084013e6108d3565b606091505b509150915081610949576044815110156108ec57600080fd5b6004810190508415610948578080602001905181019061090c9190612a3c565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093f9190612ac9565b60405180910390fd5b5b6040518060400160405280831515815260200182815250848481518110610973576109726127b4565b5b60200260200101819052505050808061098b906127e3565b9150506107f6565b509392505050565b6109a36114e3565b80600660006101000a81548160ff02191690831515021790555050565b6109c86114e3565b6109db82306109d561156a565b84611572565b5050565b846000600260008381526020019081526020016000206006015411610a39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3090612b5d565b60405180910390fd5b6002600082815260200190815260200160002060070160009054906101000a900460ff16610a9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9390612bef565b60405180910390fd5b610aa46115db565b600660009054906101000a900460ff1615610af4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aeb90612c5b565b60405180910390fd5b6000600260008881526020019081526020016000206006015411610b4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4490612cc7565b60405180910390fd5b60008383905011610b93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8a90612d33565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610c02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf990612d9f565b60405180910390fd5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610c9057843414610c8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8290612e0b565b60405180910390fd5b610ca4565b610ca384610c9c61156a565b3088611572565b5b6000610cb2866000546104eb565b86610cbd9190612e2b565b9050610cf485610ccb61156a565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684611572565b60006002600089815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008288610d3d9190612e2b565b905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1603610dfb57610df586868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050828473ffffffffffffffffffffffffffffffffffffffff166116219092919063ffffffff16565b50610f29565b8673ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b8152600401610e36929190612e5f565b6020604051808303816000875af1158015610e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e799190612e9d565b610eb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eaf90612f3c565b60405180910390fd5b610f2786868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050348473ffffffffffffffffffffffffffffffffffffffff166116219092919063ffffffff16565b505b7fa1cf747ad001476b442e3c9c4a2b2180fbc1b3a710b44c90e2f2d23d2f2710c2898989600054610f5861156a565b604051610f69959493929190612f5c565b60405180910390a1505050610f7c6116ee565b505050505050565b610f8c6114e3565b610f9660006116f8565b565b610fa06114e3565b610fa9816117be565b50565b60038181548110610fbc57600080fd5b906000526020600020016000915090505481565b610fd86114e3565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603611047576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103e90613021565b60405180910390fd5b611050856117ff565b61108f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611086906130b3565b60405180910390fd5b611098846117ff565b6110d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ce90613145565b60405180910390fd5b6110e0836117ff565b61111f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611116906131d7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461119c5761115c826117ff565b61119b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119290613269565b60405180910390fd5b5b600080600260008a8152602001908152602001600020600601541490506000816111dc57600260008a8152602001908152602001600020600601546111de565b425b90506040518061010001604052808a81526020018981526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001828152602001841515815250600260008b8152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c0820151816006015560e08201518160070160006101000a81548160ff02191690831515021790555090505081156114145760038990806001815401808255809150506001900390600052602060002001600090919091909150555b505050505050505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6114516114e3565b61145a81611812565b50565b6114656114e3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036114d75760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016114ce91906125c9565b60405180910390fd5b6114e0816116f8565b50565b6114eb61156a565b73ffffffffffffffffffffffffffffffffffffffff1661150961141f565b73ffffffffffffffffffffffffffffffffffffffff16146115685761152c61156a565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161155f91906125c9565b60405180910390fd5b565b600033905090565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036115c8576115c3828261188d565b6115d5565b6115d48484848461198d565b5b50505050565b600260055403611617576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600581905550565b60608147101561166857306040517fcd78605900000000000000000000000000000000000000000000000000000000815260040161165f91906125c9565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16848660405161169191906132ba565b60006040518083038185875af1925050503d80600081146116ce576040519150601f19603f3d011682016040523d82523d6000602084013e6116d3565b606091505b50915091506116e3868383611ae5565b925050509392505050565b6001600581905550565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b806000819055507fdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b1816040516117f49190611eec565b60405180910390a150565b600080823b905060008111915050919050565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3d21e5a2b633291bd1ff5f9c654e402d063783c95759d2ea521b31fb30e4da418160405161188291906125c9565b60405180910390a150565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff8111156118c2576118c1612785565b5b6040519080825280601f01601f1916602001820160405280156118f45781602001600182028036833780820191505090505b5060405161190291906132ba565b60006040518083038185875af1925050503d806000811461193f576040519150601f19603f3d011682016040523d82523d6000602084013e611944565b606091505b5050905080611988576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197f90613343565b60405180910390fd5b505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b8686866040516024016119c493929190613363565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611a2e91906132ba565b6000604051808303816000865af19150503d8060008114611a6b576040519150601f19603f3d011682016040523d82523d6000602084013e611a70565b606091505b5091509150818015611a9e5750600081511480611a9d575080806020019051810190611a9c9190612e9d565b5b5b611add576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad49061340c565b60405180910390fd5b505050505050565b606082611afa57611af582611b74565b611b6c565b60008251148015611b22575060008473ffffffffffffffffffffffffffffffffffffffff163b145b15611b6457836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401611b5b91906125c9565b60405180910390fd5b819050611b6d565b5b9392505050565b600081511115611b875780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518061010001604052806000801916815260200160008019168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b6040518060400160405280600015158152602001606081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611ca181611c8e565b8114611cac57600080fd5b50565b600081359050611cbe81611c98565b92915050565b600060208284031215611cda57611cd9611c84565b5b6000611ce884828501611caf565b91505092915050565b611cfa81611c8e565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d2b82611d00565b9050919050565b611d3b81611d20565b82525050565b6000611d4c82611d00565b9050919050565b611d5c81611d41565b82525050565b6000819050919050565b611d7581611d62565b82525050565b60008115159050919050565b611d9081611d7b565b82525050565b600061010082019050611dac600083018b611cf1565b611db9602083018a611cf1565b611dc66040830189611d32565b611dd36060830188611d53565b611de06080830187611d53565b611ded60a0830186611d53565b611dfa60c0830185611d6c565b611e0760e0830184611d87565b9998505050505050505050565b611e1d81611d7b565b8114611e2857600080fd5b50565b600081359050611e3a81611e14565b92915050565b60008060408385031215611e5757611e56611c84565b5b6000611e6585828601611caf565b9250506020611e7685828601611e2b565b9150509250929050565b611e8981611d62565b8114611e9457600080fd5b50565b600081359050611ea681611e80565b92915050565b60008060408385031215611ec357611ec2611c84565b5b6000611ed185828601611e97565b9250506020611ee285828601611e97565b9150509250929050565b6000602082019050611f016000830184611d6c565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611f3c81611c8e565b82525050565b611f4b81611d20565b82525050565b611f5a81611d41565b82525050565b611f6981611d62565b82525050565b611f7881611d7b565b82525050565b61010082016000820151611f956000850182611f33565b506020820151611fa86020850182611f33565b506040820151611fbb6040850182611f42565b506060820151611fce6060850182611f51565b506080820151611fe16080850182611f51565b5060a0820151611ff460a0850182611f51565b5060c082015161200760c0850182611f60565b5060e082015161201a60e0850182611f6f565b50505050565b600061202c8383611f7e565b6101008301905092915050565b6000602082019050919050565b600061205182611f07565b61205b8185611f12565b935061206683611f23565b8060005b8381101561209757815161207e8882612020565b975061208983612039565b92505060018101905061206a565b5085935050505092915050565b600060208201905081810360008301526120be8184612046565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126120eb576120ea6120c6565b5b8235905067ffffffffffffffff811115612108576121076120cb565b5b602083019150836020820283011115612124576121236120d0565b5b9250929050565b60008060006040848603121561214457612143611c84565b5b600084013567ffffffffffffffff81111561216257612161611c89565b5b61216e868287016120d5565b9350935050602061218186828701611e2b565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156121f15780820151818401526020810190506121d6565b60008484015250505050565b6000601f19601f8301169050919050565b6000612219826121b7565b61222381856121c2565b93506122338185602086016121d3565b61223c816121fd565b840191505092915050565b600060408301600083015161225f6000860182611f6f565b5060208301518482036020860152612277828261220e565b9150508091505092915050565b60006122908383612247565b905092915050565b6000602082019050919050565b60006122b08261218b565b6122ba8185612196565b9350836020820285016122cc856121a7565b8060005b8581101561230857848403895281516122e98582612284565b94506122f483612298565b925060208a019950506001810190506122d0565b50829750879550505050505092915050565b6000602082019050818103600083015261233481846122a5565b905092915050565b60006020828403121561235257612351611c84565b5b600061236084828501611e2b565b91505092915050565b61237281611d41565b811461237d57600080fd5b50565b60008135905061238f81612369565b92915050565b600080604083850312156123ac576123ab611c84565b5b60006123ba85828601612380565b92505060206123cb85828601611e97565b9150509250929050565b60008083601f8401126123eb576123ea6120c6565b5b8235905067ffffffffffffffff811115612408576124076120cb565b5b602083019150836001820283011115612424576124236120d0565b5b9250929050565b60008060008060006080868803121561244757612446611c84565b5b600061245588828901611caf565b955050602061246688828901611e97565b945050604061247788828901612380565b935050606086013567ffffffffffffffff81111561249857612497611c89565b5b6124a4888289016123d5565b92509250509295509295909350565b6000602082840312156124c9576124c8611c84565b5b60006124d784828501611e97565b91505092915050565b60006020820190506124f56000830184611cf1565b92915050565b61250481611d20565b811461250f57600080fd5b50565b600081359050612521816124fb565b92915050565b600080600080600080600060e0888a03121561254657612545611c84565b5b60006125548a828b01611caf565b97505060206125658a828b01611caf565b96505060406125768a828b01612512565b95505060606125878a828b01612380565b94505060806125988a828b01612380565b93505060a06125a98a828b01612380565b92505060c06125ba8a828b01611e2b565b91505092959891949750929550565b60006020820190506125de6000830184611d53565b92915050565b6000602082840312156125fa576125f9611c84565b5b600061260884828501612380565b91505092915050565b600082825260208201905092915050565b7f426f7446693a53776170456e67696e6523656e61626c65526f757465723a204960008201527f4e56414c49445f524f5554450000000000000000000000000000000000000000602082015250565b600061267e602c83612611565b915061268982612622565b604082019050919050565b600060208201905081810360008301526126ad81612671565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006126ee82611d62565b91506126f983611d62565b925082820261270781611d62565b9150828204841483151761271e5761271d6126b4565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061275f82611d62565b915061276a83611d62565b92508261277a57612779612725565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006127ee82611d62565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036128205761281f6126b4565b5b600182019050919050565b600080fd5b600080fd5b600080fd5b6000823560016040038336030381126128565761285561282b565b5b80830191505092915050565b60006020828403121561287857612877611c84565b5b600061288684828501612512565b91505092915050565b600080833560016020038436030381126128ac576128ab61282b565b5b80840192508235915067ffffffffffffffff8211156128ce576128cd612830565b5b6020830192506001820236038313156128ea576128e9612835565b5b509250929050565b600081905092915050565b82818337600083830152505050565b600061291883856128f2565b93506129258385846128fd565b82840190509392505050565b600061293e82848661290c565b91508190509392505050565b600080fd5b612958826121fd565b810181811067ffffffffffffffff8211171561297757612976612785565b5b80604052505050565b600061298a611c7a565b9050612996828261294f565b919050565b600067ffffffffffffffff8211156129b6576129b5612785565b5b6129bf826121fd565b9050602081019050919050565b60006129df6129da8461299b565b612980565b9050828152602081018484840111156129fb576129fa61294a565b5b612a068482856121d3565b509392505050565b600082601f830112612a2357612a226120c6565b5b8151612a338482602086016129cc565b91505092915050565b600060208284031215612a5257612a51611c84565b5b600082015167ffffffffffffffff811115612a7057612a6f611c89565b5b612a7c84828501612a0e565b91505092915050565b600081519050919050565b6000612a9b82612a85565b612aa58185612611565b9350612ab58185602086016121d3565b612abe816121fd565b840191505092915050565b60006020820190508181036000830152612ae38184612a90565b905092915050565b7f426f7446692353776170456e67696e652376616c6964617465526f757465723a60008201527f20554e4b4e4f574e5f524f555445525f49440000000000000000000000000000602082015250565b6000612b47603283612611565b9150612b5282612aeb565b604082019050919050565b60006020820190508181036000830152612b7681612b3a565b9050919050565b7f426f7446692353776170456e67696e652376616c6964617465526f757465723a60008201527f20524f555445525f4e4f545f454e41424c454400000000000000000000000000602082015250565b6000612bd9603383612611565b9150612be482612b7d565b604082019050919050565b60006020820190508181036000830152612c0881612bcc565b9050919050565b7f426f74466923737761704e6f745061757365643a20535741505f504155534544600082015250565b6000612c45602083612611565b9150612c5082612c0f565b602082019050919050565b60006020820190508181036000830152612c7481612c38565b9050919050565b7f426f74466923537761703a20554e535550504f525445445f4445580000000000600082015250565b6000612cb1601b83612611565b9150612cbc82612c7b565b602082019050919050565b60006020820190508181036000830152612ce081612ca4565b9050919050565b7f426f74466923537761703a20444154415f4152475f5245515549524544000000600082015250565b6000612d1d601d83612611565b9150612d2882612ce7565b602082019050919050565b60006020820190508181036000830152612d4c81612d10565b9050919050565b7f426f74466923537761703a205a45524f5f544f4b454e415f4144445200000000600082015250565b6000612d89601c83612611565b9150612d9482612d53565b602082019050919050565b60006020820190508181036000830152612db881612d7c565b9050919050565b7f426f74466923537761703a20494e53554646494349454e545f42414c414e4345600082015250565b6000612df5602083612611565b9150612e0082612dbf565b602082019050919050565b60006020820190508181036000830152612e2481612de8565b9050919050565b6000612e3682611d62565b9150612e4183611d62565b9250828203905081811115612e5957612e586126b4565b5b92915050565b6000604082019050612e746000830185611d53565b612e816020830184611d6c565b9392505050565b600081519050612e9781611e14565b92915050565b600060208284031215612eb357612eb2611c84565b5b6000612ec184828501612e88565b91505092915050565b7f426f7446692353776170456e67696e653a20544f4b454e415f415050524f564160008201527f4c5f4641494c4544000000000000000000000000000000000000000000000000602082015250565b6000612f26602883612611565b9150612f3182612eca565b604082019050919050565b60006020820190508181036000830152612f5581612f19565b9050919050565b600060a082019050612f716000830188611cf1565b612f7e6020830187611d6c565b612f8b6040830186611d53565b612f986060830185611d6c565b612fa56080830184611d53565b9695505050505050565b7f426f7446692353776170456e67696e6523616464526f757465723a205a45524f60008201527f5f524f555445525f414444524553530000000000000000000000000000000000602082015250565b600061300b602f83612611565b915061301682612faf565b604082019050919050565b6000602082019050818103600083015261303a81612ffe565b9050919050565b7f426f7446692353776170456e67696e6523616464526f757465723a20524f555460008201527f45525f4e4f545f415f434f4e5452414354000000000000000000000000000000602082015250565b600061309d603183612611565b91506130a882613041565b604082019050919050565b600060208201905081810360008301526130cc81613090565b9050919050565b7f426f7446692353776170456e67696e6523616464526f757465723a204641435460008201527f4f52595f4e4f545f415f434f4e54524143540000000000000000000000000000602082015250565b600061312f603283612611565b915061313a826130d3565b604082019050919050565b6000602082019050818103600083015261315e81613122565b9050919050565b7f426f7446692353776170456e67696e6523616464526f757465723a205745544860008201527f5f4e4f545f415f434f4e54524143540000000000000000000000000000000000602082015250565b60006131c1602f83612611565b91506131cc82613165565b604082019050919050565b600060208201905081810360008301526131f0816131b4565b9050919050565b7f426f7446692353776170456e67696e6523616464526f757465723a2051554f5460008201527f45525f4e4f545f415f434f4e5452414354000000000000000000000000000000602082015250565b6000613253603183612611565b915061325e826131f7565b604082019050919050565b6000602082019050818103600083015261328281613246565b9050919050565b6000613294826121b7565b61329e81856128f2565b93506132ae8185602086016121d3565b80840191505092915050565b60006132c68284613289565b915081905092915050565b7f426f744669235472616e7366657248656c7065723a204554485f5452414e534660008201527f45525f4641494c45440000000000000000000000000000000000000000000000602082015250565b600061332d602983612611565b9150613338826132d1565b604082019050919050565b6000602082019050818103600083015261335c81613320565b9050919050565b60006060820190506133786000830186611d53565b6133856020830185611d53565b6133926040830184611d6c565b949350505050565b7f426f744669235472616e7366657248656c7065723a20544f4b454e5f5452414e60008201527f534645525f4641494c4544000000000000000000000000000000000000000000602082015250565b60006133f6602b83612611565b91506134018261339a565b604082019050919050565b60006020820190508181036000830152613425816133e9565b905091905056fea2646970667358221220cb740a34dd894d6ed69c749a2dfd9f8bd01694c813945003d2a8e9162caae8ff64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addRoute(bytes32,bytes32,address,address,address,address,bool)": {
        "details": "addRouter add a router params",
        "params": {
          "enabled": "is the router enabled or not",
          "factory": "the factory address",
          "group": "router group - uni_v2, uni_v3 ....",
          "id": "router id",
          "quoter": "swap quoter ",
          "router": "the router address ",
          "weth": "wrapped ether or wrapped native token"
        }
      },
      "calPercentage(uint256,uint256)": {
        "details": "convert percentage in basis point of a value ",
        "params": {
          "amount": "the amount to be calculated on",
          "bps": "percentage value in basis point"
        }
      },
      "enableRoute(bytes32,bool)": {
        "details": "enable or disable a route",
        "params": {
          "id": "the router id",
          "opt": "true or false"
        }
      },
      "getAllRoutes()": {
        "details": "getAllRoutes get all the routers returns array "
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pauseSwap(bool)": {
        "details": "pause the swap operation for the contract",
        "params": {
          "opt": "true or false "
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setFeeWallet(address)": {
        "details": "set the address for taking the protocol fees",
        "params": {
          "addr": "the fee in percentage basis point"
        }
      },
      "setProtocolFee(uint256)": {
        "details": "protocol fee in basis point",
        "params": {
          "_feeBps": "the fee in percentage basis point"
        }
      },
      "swap(bytes32,uint256,address,bytes)": {
        "details": "perform a swap",
        "params": {
          "amount": "the total amount including the protocol fee for the swap",
          "payload": "the encoded swap data to foward to the router",
          "routeId": "the identifier of the router to use",
          "tokenA": "the token to swap into another token (tokenB)"
        }
      },
      "sweep(address,uint256)": {
        "details": "withdraw any stucked tokens in the contract",
        "params": {
          "amount": "the amount to move out",
          "token": "the token address to withdraw"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 693,
        "contract": "contracts/Factory.sol:Factory",
        "label": "PROTOCOL_FEE",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 695,
        "contract": "contracts/Factory.sol:Factory",
        "label": "FEE_WALLET",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 703,
        "contract": "contracts/Factory.sol:Factory",
        "label": "routes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(RouteParams)723_storage)"
      },
      {
        "astId": 706,
        "contract": "contracts/Factory.sol:Factory",
        "label": "routesIds",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 8,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 515,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_status",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3074,
        "contract": "contracts/Factory.sol:Factory",
        "label": "isPaused",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(RouteParams)723_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Defs.RouteParams)",
        "numberOfBytes": "32",
        "value": "t_struct(RouteParams)723_storage"
      },
      "t_struct(RouteParams)723_storage": {
        "encoding": "inplace",
        "label": "struct Defs.RouteParams",
        "members": [
          {
            "astId": 708,
            "contract": "contracts/Factory.sol:Factory",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 710,
            "contract": "contracts/Factory.sol:Factory",
            "label": "group",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 712,
            "contract": "contracts/Factory.sol:Factory",
            "label": "router",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 714,
            "contract": "contracts/Factory.sol:Factory",
            "label": "factory",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 716,
            "contract": "contracts/Factory.sol:Factory",
            "label": "weth",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 718,
            "contract": "contracts/Factory.sol:Factory",
            "label": "quoter",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 720,
            "contract": "contracts/Factory.sol:Factory",
            "label": "createdAt",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 722,
            "contract": "contracts/Factory.sol:Factory",
            "label": "enabled",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0x249Abf9E07a9Dc22EF368ddAFA08e510C49f2C97",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "SetProtocolFee",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dex",
          "type": "bytes32"
        },
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "uniV2Router",
          "type": "address"
        },
        {
          "internalType": "contract ISwapRouter",
          "name": "uniV3Router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "uniV3Factory",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "addDex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dexes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "dexesParams",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "dex",
          "type": "bytes32"
        },
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "v2Router",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Factory",
          "name": "v2Factory",
          "type": "address"
        },
        {
          "internalType": "contract ISwapRouter",
          "name": "v3Router",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV3Factory",
          "name": "v3Factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeBps",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa3402ba8ada8e9b86f5027c5f618e60ac4e3a3f869b4e6c92ce6d589253a9037",
  "receipt": {
    "to": null,
    "from": "0x20551033FD467b8Ee59357a818911F6a6A01Ac96",
    "contractAddress": "0x249Abf9E07a9Dc22EF368ddAFA08e510C49f2C97",
    "transactionIndex": 0,
    "gasUsed": "1161889",
    "logsBloom": "0x
    "blockHash": "0x1540291dd43404f80b2557152b76e1af71daca9df2a42f72ec6c50359e079720",
    "transactionHash": "0xa3402ba8ada8e9b86f5027c5f618e60ac4e3a3f869b4e6c92ce6d589253a9037",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 18523655,
        "transactionHash": "0xa3402ba8ada8e9b86f5027c5f618e60ac4e3a3f869b4e6c92ce6d589253a9037",
        "address": "0x249Abf9E07a9Dc22EF368ddAFA08e510C49f2C97",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000020551033fd467b8ee59357a818911f6a6a01ac96"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1540291dd43404f80b2557152b76e1af71daca9df2a42f72ec6c50359e079720"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18523655,
        "transactionHash": "0xa3402ba8ada8e9b86f5027c5f618e60ac4e3a3f869b4e6c92ce6d589253a9037",
        "address": "0x249Abf9E07a9Dc22EF368ddAFA08e510C49f2C97",
        "topics": [
          "0xdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b1"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000064",
        "logIndex": 1,
        "blockHash": "0x1540291dd43404f80b2557152b76e1af71daca9df2a42f72ec6c50359e079720"
      }
    ],
    "blockNumber": 18523655,
    "cumulativeGasUsed": "1161889",
    "status": 1,
    "byzantium": true
  },
  "args": [
    100
  ],
  "numDeployments": 1,
  "solcInputHash": "6b751aea95d3b5b1a7191ef7f8e6884c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SetProtocolFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dex\",\"type\":\"bytes32\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"uniV2Router\",\"type\":\"address\"},{\"internalType\":\"contract ISwapRouter\",\"name\":\"uniV3Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniV3Factory\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"addDex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dexes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"dexesParams\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"dex\",\"type\":\"bytes32\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"v2Router\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"v2Factory\",\"type\":\"address\"},{\"internalType\":\"contract ISwapRouter\",\"name\":\"v3Router\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV3Factory\",\"name\":\"v3Factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeBps\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"multicall(bytes[])\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setProtocolFee(uint256)\":{\"details\":\"protocol fee in basis point\",\"params\":{\"_feeBps\":\"the fee in percentage basis point\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory.sol\":\"Factory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x00c23b80f74717a6765b606001c5c633116020d488ee8f53600685b8200e4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Address} from \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0xc5622e05d0cc837b2ab254c29566768e292847d05d230560d9886955cafe6c37\",\"license\":\"MIT\"},\"contracts/ContractBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"./interfaces/@uniswap/v2/v2-periphery/interfaces/IWETH.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\nimport \\\"./base/Globals.sol\\\";\\n\\ncontract ContractBase is Globals, Context, Ownable, Multicall {\\n\\n\\n    event SetProtocolFee(uint256);\\n\\n    constructor() Ownable(_msgSender()) {}\\n\\n    /**\\n     * @dev protocol fee in basis point\\n     * @param _feeBps the fee in percentage basis point\\n     */\\n    function __setProtocolFee (uint256 _feeBps)\\n        internal\\n    {\\n        protocolFee = _feeBps;\\n\\n        emit SetProtocolFee(_feeBps);\\n    }\\n\\n    /**\\n     * @dev protocol fee in basis point\\n     * @param _feeBps the fee in percentage basis point\\n     */\\n    function setProtocolFee(uint _feeBps)\\n        public \\n        onlyOwner \\n    {\\n        __setProtocolFee(_feeBps);\\n    }\\n}\\n\",\"keccak256\":\"0xf71b28bb5adf921635a6b87f37e74d413164eacb2a7db9aa8c1ae7902c91fb58\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ContractBase.sol\\\";\\nimport \\\"./core/SwapEngine.sol\\\";\\n\\ncontract Factory is ContractBase, SwapEngine {\\n\\n    constructor(\\n        uint    protocolFee\\n    ) {     \\n        __setProtocolFee(protocolFee);\\n    }\\n    \\n}\",\"keccak256\":\"0xa63d2ced3de2f8b2ff9207a333b63d4039ad1812a46f910142ba53592badde1d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/Globals.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/@uniswap/v2/v2-periphery/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"../interfaces/@uniswap/v2/v2-core/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"../interfaces/@uniswap/v3/v3-core/interfaces/IUniswapV3Factory.sol\\\";\\nimport \\\"../interfaces/@uniswap/v3/v3-periphery/interfaces/ISwapRouter.sol\\\";\\n\\ncontract Globals {\\n\\n    // the protocol fee \\n    uint protocolFee;\\n\\n    struct DexParams {\\n        bytes32             dex;\\n        IUniswapV2Router02  v2Router;\\n        IUniswapV2Factory   v2Factory;\\n        ISwapRouter         v3Router; \\n        IUniswapV3Factory   v3Factory;\\n        uint256             createdAt;\\n        bool                enabled; \\n    }\\n\\n}\",\"keccak256\":\"0xdf4caaae6f5f01efd20112c937ca3eab1b44d0cd7c88c8dcd4e76ffb6d5e3f97\",\"license\":\"GPL-2.0-or-later\"},\"contracts/core/SwapEngine.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ContractBase.sol\\\";\\n\\ncontract SwapEngine is ContractBase {\\n\\n    bool initialized; \\n\\n    // dexId Uint => Dex Params \\n    mapping (bytes32 => DexParams) public dexesParams;\\n    bytes32[] public dexes;\\n    \\n\\n    function addDex(\\n        bytes32 dex,\\n        IUniswapV2Router02 uniV2Router, \\n        ISwapRouter        uniV3Router,\\n        address            uniV3Factory,\\n        bool               enabled\\n    ) \\n        public \\n        onlyOwner \\n    {\\n\\n        bool isNew = (dexesParams[dex].createdAt == 0);\\n\\n        address v2FactoryAddr = (address(uniV2Router) == address(0))\\n                                ? address(0) \\n                                : uniV2Router.factory();\\n\\n        uint createdAt = (isNew) ? block.timestamp : dexesParams[dex].createdAt;\\n\\n        dexesParams[dex] = DexParams(\\n            dex,\\n            uniV2Router,\\n            IUniswapV2Factory(v2FactoryAddr),\\n            ISwapRouter(uniV3Router),\\n            IUniswapV3Factory(uniV3Factory),\\n            createdAt,\\n            enabled\\n        );\\n\\n        if(isNew) dexes.push(dex);\\n    \\n    }\\n    \\n}\",\"keccak256\":\"0xdbfd7d6063d21d3ae94c38033fc494a6bb49eb3f8fb7bfbecdd14bbb0f557a73\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/@uniswap/v2/v2-core/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x9765707d6827034615237b4bd51ffeb707b5839e35745532f7267199def9b4f9\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/@uniswap/v2/v2-periphery/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0xdf8ffd93dc03d216333bd9f57f93ebe44166eaa325f9dbc6f8aec382c164f0df\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/@uniswap/v2/v2-periphery/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x68c8299de0e30dc22e9192e860fdbc000a7e84ae887c6cedc40a70ac7ea240bb\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/@uniswap/v2/v2-periphery/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\",\"keccak256\":\"0x1c6a6da9db7c94d7c6311ecea417368f99c3f9ba63d71a37394ce83abbb1fcba\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/@uniswap/v3/v3-core/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/@uniswap/v3/v3-core/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/@uniswap/v3/v3-periphery/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '../../v3-core/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x6f2c489584424694a4ca59b37f1a8d30301d034fd78a1a6f8250cf3b36909693\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200161438038062001614833981810160405281019062000037919062000237565b62000047620000e660201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000bc5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000b39190620002ae565b60405180910390fd5b620000cd81620000ee60201b60201c565b50620000df81620001b460201b60201c565b50620002f9565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b806000819055507fdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b181604051620001ec9190620002dc565b60405180910390a150565b600080fd5b6000819050919050565b6200021181620001fc565b81146200021d57600080fd5b50565b600081519050620002318162000206565b92915050565b60006020828403121562000250576200024f620001f7565b5b6000620002608482850162000220565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002968262000269565b9050919050565b620002a88162000289565b82525050565b6000602082019050620002c560008301846200029d565b92915050565b620002d681620001fc565b82525050565b6000602082019050620002f36000830184620002cb565b92915050565b61130b80620003096000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b14610119578063ac9650d814610137578063e514e48114610167578063f2fde38b1461018357610088565b80630941b25e1461008d5780636338a7c0146100c3578063715018a6146100f3578063787dce3d146100fd575b600080fd5b6100a760048036038101906100a29190610acb565b61019f565b6040516100ba9796959493929190610c1d565b60405180910390f35b6100dd60048036038101906100d89190610cb8565b61026e565b6040516100ea9190610ce5565b60405180910390f35b6100fb610292565b005b61011760048036038101906101129190610cb8565b6102a6565b005b6101216102ba565b60405161012e9190610d21565b60405180910390f35b610151600480360381019061014c9190610da1565b6102e4565b60405161015e9190610f40565b60405180910390f35b610181600480360381019061017c9190611036565b6103f0565b005b61019d600480360381019061019891906110b1565b610717565b005b60026020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050154908060060160009054906101000a900460ff16905087565b6003818154811061027e57600080fd5b906000526020600020016000915090505481565b61029a61079d565b6102a46000610824565b565b6102ae61079d565b6102b7816108ea565b50565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60608282905067ffffffffffffffff811115610303576103026110de565b5b60405190808252806020026020018201604052801561033657816020015b60608152602001906001900390816103215790505b50905060005b838390508110156103e9576103b83085858481811061035e5761035d61110d565b5b9050602002810190610370919061114b565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061092b565b8282815181106103cb576103ca61110d565b5b602002602001018190525080806103e1906111dd565b91505061033c565b5092915050565b6103f861079d565b600080600260008881526020019081526020016000206005015414905060008073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146104be578573ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b9919061123a565b6104c1565b60005b90506000826104e65760026000898152602001908152602001600020600501546104e8565b425b90506040518060e001604052808981526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001851515815250600260008a81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015560c08201518160060160006101000a81548160ff021916908315150217905550905050821561070d5760038890806001815401808255809150506001900390600052602060002001600090919091909150555b5050505050505050565b61071f61079d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107915760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016107889190610d21565b60405180910390fd5b61079a81610824565b50565b6107a56109af565b73ffffffffffffffffffffffffffffffffffffffff166107c36102ba565b73ffffffffffffffffffffffffffffffffffffffff1614610822576107e66109af565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016108199190610d21565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b806000819055507fdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b1816040516109209190611267565b60405180910390a150565b60606000808473ffffffffffffffffffffffffffffffffffffffff168460405161095591906112be565b600060405180830381855af49150503d8060008114610990576040519150601f19603f3d011682016040523d82523d6000602084013e610995565b606091505b50915091506109a58583836109b7565b9250505092915050565b600033905090565b6060826109cc576109c782610a46565b610a3e565b600082511480156109f4575060008473ffffffffffffffffffffffffffffffffffffffff163b145b15610a3657836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401610a2d9190610d21565b60405180910390fd5b819050610a3f565b5b9392505050565b600081511115610a595780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080fd5b600080fd5b6000819050919050565b610aa881610a95565b8114610ab357600080fd5b50565b600081359050610ac581610a9f565b92915050565b600060208284031215610ae157610ae0610a8b565b5b6000610aef84828501610ab6565b91505092915050565b610b0181610a95565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610b4c610b47610b4284610b07565b610b27565b610b07565b9050919050565b6000610b5e82610b31565b9050919050565b6000610b7082610b53565b9050919050565b610b8081610b65565b82525050565b6000610b9182610b53565b9050919050565b610ba181610b86565b82525050565b6000610bb282610b53565b9050919050565b610bc281610ba7565b82525050565b6000610bd382610b53565b9050919050565b610be381610bc8565b82525050565b6000819050919050565b610bfc81610be9565b82525050565b60008115159050919050565b610c1781610c02565b82525050565b600060e082019050610c32600083018a610af8565b610c3f6020830189610b77565b610c4c6040830188610b98565b610c596060830187610bb9565b610c666080830186610bda565b610c7360a0830185610bf3565b610c8060c0830184610c0e565b98975050505050505050565b610c9581610be9565b8114610ca057600080fd5b50565b600081359050610cb281610c8c565b92915050565b600060208284031215610cce57610ccd610a8b565b5b6000610cdc84828501610ca3565b91505092915050565b6000602082019050610cfa6000830184610af8565b92915050565b6000610d0b82610b07565b9050919050565b610d1b81610d00565b82525050565b6000602082019050610d366000830184610d12565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610d6157610d60610d3c565b5b8235905067ffffffffffffffff811115610d7e57610d7d610d41565b5b602083019150836020820283011115610d9a57610d99610d46565b5b9250929050565b60008060208385031215610db857610db7610a8b565b5b600083013567ffffffffffffffff811115610dd657610dd5610a90565b5b610de285828601610d4b565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e54578082015181840152602081019050610e39565b60008484015250505050565b6000601f19601f8301169050919050565b6000610e7c82610e1a565b610e868185610e25565b9350610e96818560208601610e36565b610e9f81610e60565b840191505092915050565b6000610eb68383610e71565b905092915050565b6000602082019050919050565b6000610ed682610dee565b610ee08185610df9565b935083602082028501610ef285610e0a565b8060005b85811015610f2e5784840389528151610f0f8582610eaa565b9450610f1a83610ebe565b925060208a01995050600181019050610ef6565b50829750879550505050505092915050565b60006020820190508181036000830152610f5a8184610ecb565b905092915050565b6000610f6d82610d00565b9050919050565b610f7d81610f62565b8114610f8857600080fd5b50565b600081359050610f9a81610f74565b92915050565b6000610fab82610d00565b9050919050565b610fbb81610fa0565b8114610fc657600080fd5b50565b600081359050610fd881610fb2565b92915050565b610fe781610d00565b8114610ff257600080fd5b50565b60008135905061100481610fde565b92915050565b61101381610c02565b811461101e57600080fd5b50565b6000813590506110308161100a565b92915050565b600080600080600060a0868803121561105257611051610a8b565b5b600061106088828901610ab6565b955050602061107188828901610f8b565b945050604061108288828901610fc9565b935050606061109388828901610ff5565b92505060806110a488828901611021565b9150509295509295909350565b6000602082840312156110c7576110c6610a8b565b5b60006110d584828501610ff5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126111685761116761113c565b5b80840192508235915067ffffffffffffffff82111561118a57611189611141565b5b6020830192506001820236038313156111a6576111a5611146565b5b509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006111e882610be9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361121a576112196111ae565b5b600182019050919050565b60008151905061123481610fde565b92915050565b6000602082840312156112505761124f610a8b565b5b600061125e84828501611225565b91505092915050565b600060208201905061127c6000830184610bf3565b92915050565b600081905092915050565b600061129882610e1a565b6112a28185611282565b93506112b2818560208601610e36565b80840191505092915050565b60006112ca828461128d565b91508190509291505056fea2646970667358221220a965dc9f7e5380c21f745055ad05f2bca3de672578af36103c0a721ef83484cc64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b14610119578063ac9650d814610137578063e514e48114610167578063f2fde38b1461018357610088565b80630941b25e1461008d5780636338a7c0146100c3578063715018a6146100f3578063787dce3d146100fd575b600080fd5b6100a760048036038101906100a29190610acb565b61019f565b6040516100ba9796959493929190610c1d565b60405180910390f35b6100dd60048036038101906100d89190610cb8565b61026e565b6040516100ea9190610ce5565b60405180910390f35b6100fb610292565b005b61011760048036038101906101129190610cb8565b6102a6565b005b6101216102ba565b60405161012e9190610d21565b60405180910390f35b610151600480360381019061014c9190610da1565b6102e4565b60405161015e9190610f40565b60405180910390f35b610181600480360381019061017c9190611036565b6103f0565b005b61019d600480360381019061019891906110b1565b610717565b005b60026020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050154908060060160009054906101000a900460ff16905087565b6003818154811061027e57600080fd5b906000526020600020016000915090505481565b61029a61079d565b6102a46000610824565b565b6102ae61079d565b6102b7816108ea565b50565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60608282905067ffffffffffffffff811115610303576103026110de565b5b60405190808252806020026020018201604052801561033657816020015b60608152602001906001900390816103215790505b50905060005b838390508110156103e9576103b83085858481811061035e5761035d61110d565b5b9050602002810190610370919061114b565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061092b565b8282815181106103cb576103ca61110d565b5b602002602001018190525080806103e1906111dd565b91505061033c565b5092915050565b6103f861079d565b600080600260008881526020019081526020016000206005015414905060008073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146104be578573ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b9919061123a565b6104c1565b60005b90506000826104e65760026000898152602001908152602001600020600501546104e8565b425b90506040518060e001604052808981526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001851515815250600260008a81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015560c08201518160060160006101000a81548160ff021916908315150217905550905050821561070d5760038890806001815401808255809150506001900390600052602060002001600090919091909150555b5050505050505050565b61071f61079d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107915760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016107889190610d21565b60405180910390fd5b61079a81610824565b50565b6107a56109af565b73ffffffffffffffffffffffffffffffffffffffff166107c36102ba565b73ffffffffffffffffffffffffffffffffffffffff1614610822576107e66109af565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016108199190610d21565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b806000819055507fdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b1816040516109209190611267565b60405180910390a150565b60606000808473ffffffffffffffffffffffffffffffffffffffff168460405161095591906112be565b600060405180830381855af49150503d8060008114610990576040519150601f19603f3d011682016040523d82523d6000602084013e610995565b606091505b50915091506109a58583836109b7565b9250505092915050565b600033905090565b6060826109cc576109c782610a46565b610a3e565b600082511480156109f4575060008473ffffffffffffffffffffffffffffffffffffffff163b145b15610a3657836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401610a2d9190610d21565b60405180910390fd5b819050610a3f565b5b9392505050565b600081511115610a595780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080fd5b600080fd5b6000819050919050565b610aa881610a95565b8114610ab357600080fd5b50565b600081359050610ac581610a9f565b92915050565b600060208284031215610ae157610ae0610a8b565b5b6000610aef84828501610ab6565b91505092915050565b610b0181610a95565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610b4c610b47610b4284610b07565b610b27565b610b07565b9050919050565b6000610b5e82610b31565b9050919050565b6000610b7082610b53565b9050919050565b610b8081610b65565b82525050565b6000610b9182610b53565b9050919050565b610ba181610b86565b82525050565b6000610bb282610b53565b9050919050565b610bc281610ba7565b82525050565b6000610bd382610b53565b9050919050565b610be381610bc8565b82525050565b6000819050919050565b610bfc81610be9565b82525050565b60008115159050919050565b610c1781610c02565b82525050565b600060e082019050610c32600083018a610af8565b610c3f6020830189610b77565b610c4c6040830188610b98565b610c596060830187610bb9565b610c666080830186610bda565b610c7360a0830185610bf3565b610c8060c0830184610c0e565b98975050505050505050565b610c9581610be9565b8114610ca057600080fd5b50565b600081359050610cb281610c8c565b92915050565b600060208284031215610cce57610ccd610a8b565b5b6000610cdc84828501610ca3565b91505092915050565b6000602082019050610cfa6000830184610af8565b92915050565b6000610d0b82610b07565b9050919050565b610d1b81610d00565b82525050565b6000602082019050610d366000830184610d12565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610d6157610d60610d3c565b5b8235905067ffffffffffffffff811115610d7e57610d7d610d41565b5b602083019150836020820283011115610d9a57610d99610d46565b5b9250929050565b60008060208385031215610db857610db7610a8b565b5b600083013567ffffffffffffffff811115610dd657610dd5610a90565b5b610de285828601610d4b565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e54578082015181840152602081019050610e39565b60008484015250505050565b6000601f19601f8301169050919050565b6000610e7c82610e1a565b610e868185610e25565b9350610e96818560208601610e36565b610e9f81610e60565b840191505092915050565b6000610eb68383610e71565b905092915050565b6000602082019050919050565b6000610ed682610dee565b610ee08185610df9565b935083602082028501610ef285610e0a565b8060005b85811015610f2e5784840389528151610f0f8582610eaa565b9450610f1a83610ebe565b925060208a01995050600181019050610ef6565b50829750879550505050505092915050565b60006020820190508181036000830152610f5a8184610ecb565b905092915050565b6000610f6d82610d00565b9050919050565b610f7d81610f62565b8114610f8857600080fd5b50565b600081359050610f9a81610f74565b92915050565b6000610fab82610d00565b9050919050565b610fbb81610fa0565b8114610fc657600080fd5b50565b600081359050610fd881610fb2565b92915050565b610fe781610d00565b8114610ff257600080fd5b50565b60008135905061100481610fde565b92915050565b61101381610c02565b811461101e57600080fd5b50565b6000813590506110308161100a565b92915050565b600080600080600060a0868803121561105257611051610a8b565b5b600061106088828901610ab6565b955050602061107188828901610f8b565b945050604061108288828901610fc9565b935050606061109388828901610ff5565b92505060806110a488828901611021565b9150509295509295909350565b6000602082840312156110c7576110c6610a8b565b5b60006110d584828501610ff5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126111685761116761113c565b5b80840192508235915067ffffffffffffffff82111561118a57611189611141565b5b6020830192506001820236038313156111a6576111a5611146565b5b509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006111e882610be9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361121a576112196111ae565b5b600182019050919050565b60008151905061123481610fde565b92915050565b6000602082840312156112505761124f610a8b565b5b600061125e84828501611225565b91505092915050565b600060208201905061127c6000830184610bf3565b92915050565b600081905092915050565b600061129882610e1a565b6112a28185611282565b93506112b2818560208601610e36565b80840191505092915050565b60006112ca828461128d565b91508190509291505056fea2646970667358221220a965dc9f7e5380c21f745055ad05f2bca3de672578af36103c0a721ef83484cc64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "multicall(bytes[])": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setProtocolFee(uint256)": {
        "details": "protocol fee in basis point",
        "params": {
          "_feeBps": "the fee in percentage basis point"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 670,
        "contract": "contracts/Factory.sol:Factory",
        "label": "protocolFee",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 697,
        "contract": "contracts/Factory.sol:Factory",
        "label": "initialized",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 702,
        "contract": "contracts/Factory.sol:Factory",
        "label": "dexesParams",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(DexParams)689_storage)"
      },
      {
        "astId": 705,
        "contract": "contracts/Factory.sol:Factory",
        "label": "dexes",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_bytes32)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISwapRouter)2805": {
        "encoding": "inplace",
        "label": "contract ISwapRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Factory)1074": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Factory",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)1812": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV3Factory)2053": {
        "encoding": "inplace",
        "label": "contract IUniswapV3Factory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(DexParams)689_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Globals.DexParams)",
        "numberOfBytes": "32",
        "value": "t_struct(DexParams)689_storage"
      },
      "t_struct(DexParams)689_storage": {
        "encoding": "inplace",
        "label": "struct Globals.DexParams",
        "members": [
          {
            "astId": 672,
            "contract": "contracts/Factory.sol:Factory",
            "label": "dex",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 675,
            "contract": "contracts/Factory.sol:Factory",
            "label": "v2Router",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IUniswapV2Router02)1812"
          },
          {
            "astId": 678,
            "contract": "contracts/Factory.sol:Factory",
            "label": "v2Factory",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IUniswapV2Factory)1074"
          },
          {
            "astId": 681,
            "contract": "contracts/Factory.sol:Factory",
            "label": "v3Router",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(ISwapRouter)2805"
          },
          {
            "astId": 684,
            "contract": "contracts/Factory.sol:Factory",
            "label": "v3Factory",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(IUniswapV3Factory)2053"
          },
          {
            "astId": 686,
            "contract": "contracts/Factory.sol:Factory",
            "label": "createdAt",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 688,
            "contract": "contracts/Factory.sol:Factory",
            "label": "enabled",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}